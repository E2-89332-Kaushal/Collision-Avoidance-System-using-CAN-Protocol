
practice_code2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  08006a40  08006a40  00007a40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e14  08006e14  000081d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006e14  08006e14  00007e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e1c  08006e1c  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e1c  08006e1c  00007e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e20  08006e20  00007e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006e24  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081d4  2**0
                  CONTENTS
 10 .bss          0000021c  200001d4  200001d4  000081d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003f0  200003f0  000081d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c5e8  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d02  00000000  00000000  000147ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  000164f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a4c  00000000  00000000  00017220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022181  00000000  00000000  00017c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000edf0  00000000  00000000  00039ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd72f  00000000  00000000  00048bdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011630c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000491c  00000000  00000000  00116350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0011ac6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006a28 	.word	0x08006a28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08006a28 	.word	0x08006a28

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <LcdInit>:
//#include"main.h"

extern I2C_HandleTypeDef hi2c1;


void LcdInit(void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	// i2c initialization
	//I2CInit();
	HAL_I2C_Init(&hi2c1);
 8000ed8:	481b      	ldr	r0, [pc, #108]	@ (8000f48 <LcdInit+0x74>)
 8000eda:	f001 f83d 	bl	8001f58 <HAL_I2C_Init>
	// lcd initialization
	HAL_Delay(20);
 8000ede:	2014      	movs	r0, #20
 8000ee0:	f000 fd4e 	bl	8001980 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 8000ee4:	2103      	movs	r1, #3
 8000ee6:	2000      	movs	r0, #0
 8000ee8:	f000 f830 	bl	8000f4c <LcdWriteNibble>
	HAL_Delay(5);
 8000eec:	2005      	movs	r0, #5
 8000eee:	f000 fd47 	bl	8001980 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 8000ef2:	2103      	movs	r1, #3
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f000 f829 	bl	8000f4c <LcdWriteNibble>
	HAL_Delay(1);
 8000efa:	2001      	movs	r0, #1
 8000efc:	f000 fd40 	bl	8001980 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x03);
 8000f00:	2103      	movs	r1, #3
 8000f02:	2000      	movs	r0, #0
 8000f04:	f000 f822 	bl	8000f4c <LcdWriteNibble>
	HAL_Delay(1);
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f000 fd39 	bl	8001980 <HAL_Delay>
	LcdWriteNibble(LCD_CMD, 0x02);
 8000f0e:	2102      	movs	r1, #2
 8000f10:	2000      	movs	r0, #0
 8000f12:	f000 f81b 	bl	8000f4c <LcdWriteNibble>
	HAL_Delay(1);
 8000f16:	2001      	movs	r0, #1
 8000f18:	f000 fd32 	bl	8001980 <HAL_Delay>


	LcdWriteByte(LCD_CMD, LCD_FNSET_2LINE);
 8000f1c:	2128      	movs	r1, #40	@ 0x28
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 f85a 	bl	8000fd8 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_OFF);
 8000f24:	2108      	movs	r1, #8
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 f856 	bl	8000fd8 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_CLEAR);
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f000 f852 	bl	8000fd8 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_ENTRYMODE);
 8000f34:	2106      	movs	r1, #6
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f84e 	bl	8000fd8 <LcdWriteByte>
	LcdWriteByte(LCD_CMD, LCD_DISP_ON);
 8000f3c:	210c      	movs	r1, #12
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f000 f84a 	bl	8000fd8 <LcdWriteByte>
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200001f0 	.word	0x200001f0

08000f4c <LcdWriteNibble>:

void LcdWriteNibble(uint8_t rs, uint8_t data) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	4603      	mov	r3, r0
 8000f54:	460a      	mov	r2, r1
 8000f56:	71fb      	strb	r3, [r7, #7]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	71bb      	strb	r3, [r7, #6]
	uint8_t rsFlag = rs == LCD_DATA ? BV(LCD_RS_Pos) : 0;
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	bf0c      	ite	eq
 8000f62:	2301      	moveq	r3, #1
 8000f64:	2300      	movne	r3, #0
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	73fb      	strb	r3, [r7, #15]
	uint8_t val = (data << 4) | rsFlag | BV(LCD_BL_Pos) | BV(LCD_EN_Pos) ;
 8000f6a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f6e:	011b      	lsls	r3, r3, #4
 8000f70:	b25a      	sxtb	r2, r3
 8000f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	f043 030c 	orr.w	r3, r3, #12
 8000f7e:	b25b      	sxtb	r3, r3
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDR_W, (uint8_t*)&val, 1, HAL_MAX_DELAY);
 8000f84:	f107 020e 	add.w	r2, r7, #14
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	214e      	movs	r1, #78	@ 0x4e
 8000f92:	4810      	ldr	r0, [pc, #64]	@ (8000fd4 <LcdWriteNibble+0x88>)
 8000f94:	f001 f924 	bl	80021e0 <HAL_I2C_Master_Transmit>

	HAL_Delay(1);
 8000f98:	2001      	movs	r0, #1
 8000f9a:	f000 fcf1 	bl	8001980 <HAL_Delay>
	val = (data << 4) | rsFlag | BV(LCD_BL_Pos);
 8000f9e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fa2:	011b      	lsls	r3, r3, #4
 8000fa4:	b25a      	sxtb	r2, r3
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	b25b      	sxtb	r3, r3
 8000fae:	f043 0308 	orr.w	r3, r3, #8
 8000fb2:	b25b      	sxtb	r3, r3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c1, LCD_SLAVE_ADDR_W,(uint8_t*)&val, 1, HAL_MAX_DELAY);
 8000fb8:	f107 020e 	add.w	r2, r7, #14
 8000fbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fc0:	9300      	str	r3, [sp, #0]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	214e      	movs	r1, #78	@ 0x4e
 8000fc6:	4803      	ldr	r0, [pc, #12]	@ (8000fd4 <LcdWriteNibble+0x88>)
 8000fc8:	f001 f90a 	bl	80021e0 <HAL_I2C_Master_Transmit>
}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200001f0 	.word	0x200001f0

08000fd8 <LcdWriteByte>:
void LcdWriteByte(uint8_t rs, uint8_t data) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	460a      	mov	r2, r1
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	71bb      	strb	r3, [r7, #6]
	// divide data into two nibbles
	uint8_t high = data >> 4, low = data & 0x0F;
 8000fe8:	79bb      	ldrb	r3, [r7, #6]
 8000fea:	091b      	lsrs	r3, r3, #4
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	f003 030f 	and.w	r3, r3, #15
 8000ff4:	73bb      	strb	r3, [r7, #14]
	LcdWriteNibble(rs, high);
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ffa5 	bl	8000f4c <LcdWriteNibble>
	LcdWriteNibble(rs, low);
 8001002:	7bba      	ldrb	r2, [r7, #14]
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff9f 	bl	8000f4c <LcdWriteNibble>
	// wait for busy flag -- optional for low speed uc
	HAL_Delay(1);
 800100e:	2001      	movs	r0, #1
 8001010:	f000 fcb6 	bl	8001980 <HAL_Delay>
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <LcdPuts>:

void LcdPuts(uint8_t line, char *str) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
	// set line start addr
	LcdWriteByte(LCD_CMD, line);
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	4619      	mov	r1, r3
 800102c:	2000      	movs	r0, #0
 800102e:	f7ff ffd3 	bl	8000fd8 <LcdWriteByte>
	// write chars one by one
	for(int i=0; str[i] != '\0'; i++)
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	e00a      	b.n	800104e <LcdPuts+0x32>
		LcdWriteByte(LCD_DATA, str[i]);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4619      	mov	r1, r3
 8001042:	2001      	movs	r0, #1
 8001044:	f7ff ffc8 	bl	8000fd8 <LcdWriteByte>
	for(int i=0; str[i] != '\0'; i++)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3301      	adds	r3, #1
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	4413      	add	r3, r2
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1ee      	bne.n	8001038 <LcdPuts+0x1c>
}
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <trigger_ultrasonic>:
//}

uint32_t echo_time = 0;
float distance = 0;

void trigger_ultrasonic(void) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2102      	movs	r1, #2
 800106e:	4811      	ldr	r0, [pc, #68]	@ (80010b4 <trigger_ultrasonic+0x50>)
 8001070:	f000 ff58 	bl	8001f24 <HAL_GPIO_WritePin>
  for (volatile int i = 0; i < 250; i++);
 8001074:	2300      	movs	r3, #0
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	e002      	b.n	8001080 <trigger_ultrasonic+0x1c>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	3301      	adds	r3, #1
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2bf9      	cmp	r3, #249	@ 0xf9
 8001084:	ddf9      	ble.n	800107a <trigger_ultrasonic+0x16>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001086:	2201      	movs	r2, #1
 8001088:	2102      	movs	r1, #2
 800108a:	480a      	ldr	r0, [pc, #40]	@ (80010b4 <trigger_ultrasonic+0x50>)
 800108c:	f000 ff4a 	bl	8001f24 <HAL_GPIO_WritePin>
  for (volatile int i = 0; i < 30; i++);
 8001090:	2300      	movs	r3, #0
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	e002      	b.n	800109c <trigger_ultrasonic+0x38>
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	3301      	adds	r3, #1
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	2b1d      	cmp	r3, #29
 80010a0:	ddf9      	ble.n	8001096 <trigger_ultrasonic+0x32>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2102      	movs	r1, #2
 80010a6:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <trigger_ultrasonic+0x50>)
 80010a8:	f000 ff3c 	bl	8001f24 <HAL_GPIO_WritePin>
}
 80010ac:	bf00      	nop
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40020000 	.word	0x40020000

080010b8 <HAL_TIM_IC_CaptureCallback>:
//            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
//        }
//    }
//}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  static uint32_t first = 0;
  static uint8_t capFlag = 0;
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	7f1b      	ldrb	r3, [r3, #28]
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d14b      	bne.n	8001160 <HAL_TIM_IC_CaptureCallback+0xa8>
    if (!capFlag) {
 80010c8:	4b27      	ldr	r3, [pc, #156]	@ (8001168 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d11a      	bne.n	8001106 <HAL_TIM_IC_CaptureCallback+0x4e>
      first = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80010d0:	2108      	movs	r1, #8
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f002 fb66 	bl	80037a4 <HAL_TIM_ReadCapturedValue>
 80010d8:	4603      	mov	r3, r0
 80010da:	4a24      	ldr	r2, [pc, #144]	@ (800116c <HAL_TIM_IC_CaptureCallback+0xb4>)
 80010dc:	6013      	str	r3, [r2, #0]
      capFlag = 1;
 80010de:	4b22      	ldr	r3, [pc, #136]	@ (8001168 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6a1a      	ldr	r2, [r3, #32]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 80010f2:	621a      	str	r2, [r3, #32]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6a1a      	ldr	r2, [r3, #32]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001102:	621a      	str	r2, [r3, #32]
      distance = echo_time / 10.0f;
      capFlag = 0;
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
    }
  }
}
 8001104:	e02c      	b.n	8001160 <HAL_TIM_IC_CaptureCallback+0xa8>
      uint32_t second = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8001106:	2108      	movs	r1, #8
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f002 fb4b 	bl	80037a4 <HAL_TIM_ReadCapturedValue>
 800110e:	60f8      	str	r0, [r7, #12]
      __HAL_TIM_SET_COUNTER(htim, 0);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2200      	movs	r2, #0
 8001116:	625a      	str	r2, [r3, #36]	@ 0x24
      echo_time = second - first;
 8001118:	4b14      	ldr	r3, [pc, #80]	@ (800116c <HAL_TIM_IC_CaptureCallback+0xb4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	4a13      	ldr	r2, [pc, #76]	@ (8001170 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001122:	6013      	str	r3, [r2, #0]
      distance = echo_time / 10.0f;
 8001124:	4b12      	ldr	r3, [pc, #72]	@ (8001170 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	ee07 3a90 	vmov	s15, r3
 800112c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001130:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001134:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001138:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800113a:	edc3 7a00 	vstr	s15, [r3]
      capFlag = 0;
 800113e:	4b0a      	ldr	r3, [pc, #40]	@ (8001168 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6a1a      	ldr	r2, [r3, #32]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8001152:	621a      	str	r2, [r3, #32]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6a12      	ldr	r2, [r2, #32]
 800115e:	621a      	str	r2, [r3, #32]
}
 8001160:	bf00      	nop
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000294 	.word	0x20000294
 800116c:	20000298 	.word	0x20000298
 8001170:	2000028c 	.word	0x2000028c
 8001174:	20000290 	.word	0x20000290

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117e:	f000 fb8d 	bl	800189c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001182:	f000 f84f 	bl	8001224 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001186:	f000 f937 	bl	80013f8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800118a:	f000 f8e3 	bl	8001354 <MX_TIM2_Init>
  MX_I2C1_Init();
 800118e:	f000 f8b3 	bl	80012f8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
LcdInit();
 8001192:	f7ff fe9f 	bl	8000ed4 <LcdInit>
HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8001196:	2108      	movs	r1, #8
 8001198:	481b      	ldr	r0, [pc, #108]	@ (8001208 <main+0x90>)
 800119a:	f002 f84f 	bl	800323c <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
char buf[20];
LcdWriteByte(LCD_CMD, LCD_CLEAR);
 800119e:	2101      	movs	r1, #1
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff ff19 	bl	8000fd8 <LcdWriteByte>
while (1)
{
	trigger_ultrasonic();
 80011a6:	f7ff ff5d 	bl	8001064 <trigger_ultrasonic>
	    HAL_Delay(200); // Wait 200ms
 80011aa:	20c8      	movs	r0, #200	@ 0xc8
 80011ac:	f000 fbe8 	bl	8001980 <HAL_Delay>

	    if (echo_time == 0 || echo_time > 100) {
 80011b0:	4b16      	ldr	r3, [pc, #88]	@ (800120c <main+0x94>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <main+0x48>
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <main+0x94>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b64      	cmp	r3, #100	@ 0x64
 80011be:	d90b      	bls.n	80011d8 <main+0x60>


	      LcdPuts(LCD_LINE1, "Safe zone !!!!");
 80011c0:	4913      	ldr	r1, [pc, #76]	@ (8001210 <main+0x98>)
 80011c2:	2080      	movs	r0, #128	@ 0x80
 80011c4:	f7ff ff2a 	bl	800101c <LcdPuts>
	      LcdPuts(LCD_LINE2, "                ");
 80011c8:	4912      	ldr	r1, [pc, #72]	@ (8001214 <main+0x9c>)
 80011ca:	20c0      	movs	r0, #192	@ 0xc0
 80011cc:	f7ff ff26 	bl	800101c <LcdPuts>
	      HAL_Delay(100);
 80011d0:	2064      	movs	r0, #100	@ 0x64
 80011d2:	f000 fbd5 	bl	8001980 <HAL_Delay>
 80011d6:	e016      	b.n	8001206 <main+0x8e>

	    } else {

	      LcdPuts(LCD_LINE2, "STOP STOP !!! ");
 80011d8:	490f      	ldr	r1, [pc, #60]	@ (8001218 <main+0xa0>)
 80011da:	20c0      	movs	r0, #192	@ 0xc0
 80011dc:	f7ff ff1e 	bl	800101c <LcdPuts>
	      sprintf(buf, "Dist: %5.2f cm", distance);
 80011e0:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <main+0xa4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f9af 	bl	8000548 <__aeabi_f2d>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	1d38      	adds	r0, r7, #4
 80011f0:	490b      	ldr	r1, [pc, #44]	@ (8001220 <main+0xa8>)
 80011f2:	f003 fae7 	bl	80047c4 <siprintf>

	      LcdPuts(LCD_LINE1, buf);
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	4619      	mov	r1, r3
 80011fa:	2080      	movs	r0, #128	@ 0x80
 80011fc:	f7ff ff0e 	bl	800101c <LcdPuts>
	      HAL_Delay(100);
 8001200:	2064      	movs	r0, #100	@ 0x64
 8001202:	f000 fbbd 	bl	8001980 <HAL_Delay>
	trigger_ultrasonic();
 8001206:	e7ce      	b.n	80011a6 <main+0x2e>
 8001208:	20000244 	.word	0x20000244
 800120c:	2000028c 	.word	0x2000028c
 8001210:	08006a40 	.word	0x08006a40
 8001214:	08006a50 	.word	0x08006a50
 8001218:	08006a64 	.word	0x08006a64
 800121c:	20000290 	.word	0x20000290
 8001220:	08006a74 	.word	0x08006a74

08001224 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b094      	sub	sp, #80	@ 0x50
 8001228:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	2230      	movs	r2, #48	@ 0x30
 8001230:	2100      	movs	r1, #0
 8001232:	4618      	mov	r0, r3
 8001234:	f003 fb2b 	bl	800488e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	4b28      	ldr	r3, [pc, #160]	@ (80012f0 <SystemClock_Config+0xcc>)
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	4a27      	ldr	r2, [pc, #156]	@ (80012f0 <SystemClock_Config+0xcc>)
 8001252:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001256:	6413      	str	r3, [r2, #64]	@ 0x40
 8001258:	4b25      	ldr	r3, [pc, #148]	@ (80012f0 <SystemClock_Config+0xcc>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	4b22      	ldr	r3, [pc, #136]	@ (80012f4 <SystemClock_Config+0xd0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a21      	ldr	r2, [pc, #132]	@ (80012f4 <SystemClock_Config+0xd0>)
 800126e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001272:	6013      	str	r3, [r2, #0]
 8001274:	4b1f      	ldr	r3, [pc, #124]	@ (80012f4 <SystemClock_Config+0xd0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001280:	2302      	movs	r3, #2
 8001282:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001284:	2301      	movs	r3, #1
 8001286:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001288:	2310      	movs	r3, #16
 800128a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128c:	2302      	movs	r3, #2
 800128e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001290:	2300      	movs	r3, #0
 8001292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001294:	2308      	movs	r3, #8
 8001296:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001298:	2332      	movs	r3, #50	@ 0x32
 800129a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800129c:	2304      	movs	r3, #4
 800129e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012a0:	2307      	movs	r3, #7
 80012a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a4:	f107 0320 	add.w	r3, r7, #32
 80012a8:	4618      	mov	r0, r3
 80012aa:	f001 faf3 	bl	8002894 <HAL_RCC_OscConfig>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012b4:	f000 f8f2 	bl	800149c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b8:	230f      	movs	r3, #15
 80012ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012bc:	2302      	movs	r3, #2
 80012be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 fd54 	bl	8002d84 <HAL_RCC_ClockConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012e2:	f000 f8db 	bl	800149c <Error_Handler>
  }
}
 80012e6:	bf00      	nop
 80012e8:	3750      	adds	r7, #80	@ 0x50
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023800 	.word	0x40023800
 80012f4:	40007000 	.word	0x40007000

080012f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <MX_I2C1_Init+0x50>)
 80012fe:	4a13      	ldr	r2, [pc, #76]	@ (800134c <MX_I2C1_Init+0x54>)
 8001300:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MX_I2C1_Init+0x50>)
 8001304:	4a12      	ldr	r2, [pc, #72]	@ (8001350 <MX_I2C1_Init+0x58>)
 8001306:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001308:	4b0f      	ldr	r3, [pc, #60]	@ (8001348 <MX_I2C1_Init+0x50>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <MX_I2C1_Init+0x50>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001314:	4b0c      	ldr	r3, [pc, #48]	@ (8001348 <MX_I2C1_Init+0x50>)
 8001316:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800131a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800131c:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <MX_I2C1_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001322:	4b09      	ldr	r3, [pc, #36]	@ (8001348 <MX_I2C1_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001328:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <MX_I2C1_Init+0x50>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <MX_I2C1_Init+0x50>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001334:	4804      	ldr	r0, [pc, #16]	@ (8001348 <MX_I2C1_Init+0x50>)
 8001336:	f000 fe0f 	bl	8001f58 <HAL_I2C_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001340:	f000 f8ac 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}
 8001348:	200001f0 	.word	0x200001f0
 800134c:	40005400 	.word	0x40005400
 8001350:	000186a0 	.word	0x000186a0

08001354 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135a:	f107 0310 	add.w	r3, r7, #16
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001370:	4b20      	ldr	r3, [pc, #128]	@ (80013f4 <MX_TIM2_Init+0xa0>)
 8001372:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001376:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001378:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <MX_TIM2_Init+0xa0>)
 800137a:	2253      	movs	r2, #83	@ 0x53
 800137c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137e:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <MX_TIM2_Init+0xa0>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001384:	4b1b      	ldr	r3, [pc, #108]	@ (80013f4 <MX_TIM2_Init+0xa0>)
 8001386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800138a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138c:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <MX_TIM2_Init+0xa0>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001392:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <MX_TIM2_Init+0xa0>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001398:	4816      	ldr	r0, [pc, #88]	@ (80013f4 <MX_TIM2_Init+0xa0>)
 800139a:	f001 feff 	bl	800319c <HAL_TIM_IC_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013a4:	f000 f87a 	bl	800149c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	4619      	mov	r1, r3
 80013b6:	480f      	ldr	r0, [pc, #60]	@ (80013f4 <MX_TIM2_Init+0xa0>)
 80013b8:	f002 fc5c 	bl	8003c74 <HAL_TIMEx_MasterConfigSynchronization>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80013c2:	f000 f86b 	bl	800149c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013ca:	2301      	movs	r3, #1
 80013cc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80013d6:	463b      	mov	r3, r7
 80013d8:	2208      	movs	r2, #8
 80013da:	4619      	mov	r1, r3
 80013dc:	4805      	ldr	r0, [pc, #20]	@ (80013f4 <MX_TIM2_Init+0xa0>)
 80013de:	f002 f945 	bl	800366c <HAL_TIM_IC_ConfigChannel>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80013e8:	f000 f858 	bl	800149c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20000244 	.word	0x20000244

080013f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	4b20      	ldr	r3, [pc, #128]	@ (8001494 <MX_GPIO_Init+0x9c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a1f      	ldr	r2, [pc, #124]	@ (8001494 <MX_GPIO_Init+0x9c>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <MX_GPIO_Init+0x9c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	60bb      	str	r3, [r7, #8]
 8001428:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	4b19      	ldr	r3, [pc, #100]	@ (8001494 <MX_GPIO_Init+0x9c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a18      	ldr	r2, [pc, #96]	@ (8001494 <MX_GPIO_Init+0x9c>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b16      	ldr	r3, [pc, #88]	@ (8001494 <MX_GPIO_Init+0x9c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001446:	2200      	movs	r2, #0
 8001448:	2102      	movs	r1, #2
 800144a:	4813      	ldr	r0, [pc, #76]	@ (8001498 <MX_GPIO_Init+0xa0>)
 800144c:	f000 fd6a 	bl	8001f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001450:	2302      	movs	r3, #2
 8001452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	4619      	mov	r1, r3
 8001466:	480c      	ldr	r0, [pc, #48]	@ (8001498 <MX_GPIO_Init+0xa0>)
 8001468:	f000 fbc0 	bl	8001bec <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* ✅ Configure GPIO pin : PA2 (Echo for TIM2_CH3) */
   GPIO_InitStruct.Pin = GPIO_PIN_2;
 800146c:	2304      	movs	r3, #4
 800146e:	60fb      	str	r3, [r7, #12]
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	613b      	str	r3, [r7, #16]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
   GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800147c:	2301      	movs	r3, #1
 800147e:	61fb      	str	r3, [r7, #28]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	4619      	mov	r1, r3
 8001486:	4804      	ldr	r0, [pc, #16]	@ (8001498 <MX_GPIO_Init+0xa0>)
 8001488:	f000 fbb0 	bl	8001bec <HAL_GPIO_Init>

  /* USER CODE END MX_GPIO_Init_2 */
}
 800148c:	bf00      	nop
 800148e:	3720      	adds	r7, #32
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	40020000 	.word	0x40020000

0800149c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a0:	b672      	cpsid	i
}
 80014a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <Error_Handler+0x8>

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b6:	4a0f      	ldr	r2, [pc, #60]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014be:	4b0d      	ldr	r3, [pc, #52]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	4a08      	ldr	r2, [pc, #32]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <HAL_MspInit+0x4c>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014e6:	2007      	movs	r0, #7
 80014e8:	f000 fb3e 	bl	8001b68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800

080014f8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	@ 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a19      	ldr	r2, [pc, #100]	@ (800157c <HAL_I2C_MspInit+0x84>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d12b      	bne.n	8001572 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <HAL_I2C_MspInit+0x88>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a17      	ldr	r2, [pc, #92]	@ (8001580 <HAL_I2C_MspInit+0x88>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b15      	ldr	r3, [pc, #84]	@ (8001580 <HAL_I2C_MspInit+0x88>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001536:	23c0      	movs	r3, #192	@ 0xc0
 8001538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800153a:	2312      	movs	r3, #18
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001546:	2304      	movs	r3, #4
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	480c      	ldr	r0, [pc, #48]	@ (8001584 <HAL_I2C_MspInit+0x8c>)
 8001552:	f000 fb4b 	bl	8001bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b09      	ldr	r3, [pc, #36]	@ (8001580 <HAL_I2C_MspInit+0x88>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	4a08      	ldr	r2, [pc, #32]	@ (8001580 <HAL_I2C_MspInit+0x88>)
 8001560:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001564:	6413      	str	r3, [r2, #64]	@ 0x40
 8001566:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <HAL_I2C_MspInit+0x88>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	@ 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40005400 	.word	0x40005400
 8001580:	40023800 	.word	0x40023800
 8001584:	40020400 	.word	0x40020400

08001588 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	@ 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015a8:	d133      	bne.n	8001612 <HAL_TIM_IC_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <HAL_TIM_IC_MspInit+0x94>)
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	4a1a      	ldr	r2, [pc, #104]	@ (800161c <HAL_TIM_IC_MspInit+0x94>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ba:	4b18      	ldr	r3, [pc, #96]	@ (800161c <HAL_TIM_IC_MspInit+0x94>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b14      	ldr	r3, [pc, #80]	@ (800161c <HAL_TIM_IC_MspInit+0x94>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ce:	4a13      	ldr	r2, [pc, #76]	@ (800161c <HAL_TIM_IC_MspInit+0x94>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015d6:	4b11      	ldr	r3, [pc, #68]	@ (800161c <HAL_TIM_IC_MspInit+0x94>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015e2:	2304      	movs	r3, #4
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015f2:	2301      	movs	r3, #1
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4808      	ldr	r0, [pc, #32]	@ (8001620 <HAL_TIM_IC_MspInit+0x98>)
 80015fe:	f000 faf5 	bl	8001bec <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2100      	movs	r1, #0
 8001606:	201c      	movs	r0, #28
 8001608:	f000 fab9 	bl	8001b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800160c:	201c      	movs	r0, #28
 800160e:	f000 fad2 	bl	8001bb6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001612:	bf00      	nop
 8001614:	3728      	adds	r7, #40	@ 0x28
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800
 8001620:	40020000 	.word	0x40020000

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <NMI_Handler+0x4>

0800162c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <MemManage_Handler+0x4>

0800163c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <BusFault_Handler+0x4>

08001644 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <UsageFault_Handler+0x4>

0800164c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167a:	f000 f961 	bl	8001940 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
	...

08001684 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001688:	4802      	ldr	r0, [pc, #8]	@ (8001694 <TIM2_IRQHandler+0x10>)
 800168a:	f001 feff 	bl	800348c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000244 	.word	0x20000244

08001698 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return 1;
 800169c:	2301      	movs	r3, #1
}
 800169e:	4618      	mov	r0, r3
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_kill>:

int _kill(int pid, int sig)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016b2:	f003 f93f 	bl	8004934 <__errno>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2216      	movs	r2, #22
 80016ba:	601a      	str	r2, [r3, #0]
  return -1;
 80016bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_exit>:

void _exit (int status)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ffe7 	bl	80016a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016da:	bf00      	nop
 80016dc:	e7fd      	b.n	80016da <_exit+0x12>

080016de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b086      	sub	sp, #24
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	e00a      	b.n	8001706 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016f0:	f3af 8000 	nop.w
 80016f4:	4601      	mov	r1, r0
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	60ba      	str	r2, [r7, #8]
 80016fc:	b2ca      	uxtb	r2, r1
 80016fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	3301      	adds	r3, #1
 8001704:	617b      	str	r3, [r7, #20]
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	429a      	cmp	r2, r3
 800170c:	dbf0      	blt.n	80016f0 <_read+0x12>
  }

  return len;
 800170e:	687b      	ldr	r3, [r7, #4]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]
 8001728:	e009      	b.n	800173e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	60ba      	str	r2, [r7, #8]
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	4618      	mov	r0, r3
 8001734:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	3301      	adds	r3, #1
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	429a      	cmp	r2, r3
 8001744:	dbf1      	blt.n	800172a <_write+0x12>
  }
  return len;
 8001746:	687b      	ldr	r3, [r7, #4]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <_close>:

int _close(int file)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001758:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800175c:	4618      	mov	r0, r3
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001778:	605a      	str	r2, [r3, #4]
  return 0;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <_isatty>:

int _isatty(int file)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001790:	2301      	movs	r3, #1
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800179e:	b480      	push	{r7}
 80017a0:	b085      	sub	sp, #20
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	60b9      	str	r1, [r7, #8]
 80017a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c0:	4a14      	ldr	r2, [pc, #80]	@ (8001814 <_sbrk+0x5c>)
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <_sbrk+0x60>)
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017cc:	4b13      	ldr	r3, [pc, #76]	@ (800181c <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017d4:	4b11      	ldr	r3, [pc, #68]	@ (800181c <_sbrk+0x64>)
 80017d6:	4a12      	ldr	r2, [pc, #72]	@ (8001820 <_sbrk+0x68>)
 80017d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017da:	4b10      	ldr	r3, [pc, #64]	@ (800181c <_sbrk+0x64>)
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4413      	add	r3, r2
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d207      	bcs.n	80017f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e8:	f003 f8a4 	bl	8004934 <__errno>
 80017ec:	4603      	mov	r3, r0
 80017ee:	220c      	movs	r2, #12
 80017f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017f6:	e009      	b.n	800180c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f8:	4b08      	ldr	r3, [pc, #32]	@ (800181c <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017fe:	4b07      	ldr	r3, [pc, #28]	@ (800181c <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	4a05      	ldr	r2, [pc, #20]	@ (800181c <_sbrk+0x64>)
 8001808:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20020000 	.word	0x20020000
 8001818:	00000400 	.word	0x00000400
 800181c:	2000029c 	.word	0x2000029c
 8001820:	200003f0 	.word	0x200003f0

08001824 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <SystemInit+0x20>)
 800182a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800182e:	4a05      	ldr	r2, [pc, #20]	@ (8001844 <SystemInit+0x20>)
 8001830:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001834:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001848:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001880 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800184c:	f7ff ffea 	bl	8001824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001850:	480c      	ldr	r0, [pc, #48]	@ (8001884 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001852:	490d      	ldr	r1, [pc, #52]	@ (8001888 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001854:	4a0d      	ldr	r2, [pc, #52]	@ (800188c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001858:	e002      	b.n	8001860 <LoopCopyDataInit>

0800185a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800185a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800185c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800185e:	3304      	adds	r3, #4

08001860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001864:	d3f9      	bcc.n	800185a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001866:	4a0a      	ldr	r2, [pc, #40]	@ (8001890 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001868:	4c0a      	ldr	r4, [pc, #40]	@ (8001894 <LoopFillZerobss+0x22>)
  movs r3, #0
 800186a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800186c:	e001      	b.n	8001872 <LoopFillZerobss>

0800186e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800186e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001870:	3204      	adds	r2, #4

08001872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001874:	d3fb      	bcc.n	800186e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001876:	f003 f863 	bl	8004940 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800187a:	f7ff fc7d 	bl	8001178 <main>
  bx  lr    
 800187e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001880:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001888:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800188c:	08006e24 	.word	0x08006e24
  ldr r2, =_sbss
 8001890:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001894:	200003f0 	.word	0x200003f0

08001898 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC_IRQHandler>
	...

0800189c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a0:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0d      	ldr	r2, [pc, #52]	@ (80018dc <HAL_Init+0x40>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0a      	ldr	r2, [pc, #40]	@ (80018dc <HAL_Init+0x40>)
 80018b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b8:	4b08      	ldr	r3, [pc, #32]	@ (80018dc <HAL_Init+0x40>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a07      	ldr	r2, [pc, #28]	@ (80018dc <HAL_Init+0x40>)
 80018be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c4:	2003      	movs	r0, #3
 80018c6:	f000 f94f 	bl	8001b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 f808 	bl	80018e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d0:	f7ff fdea 	bl	80014a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023c00 	.word	0x40023c00

080018e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e8:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <HAL_InitTick+0x54>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <HAL_InitTick+0x58>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4619      	mov	r1, r3
 80018f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 f967 	bl	8001bd2 <HAL_SYSTICK_Config>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e00e      	b.n	800192c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b0f      	cmp	r3, #15
 8001912:	d80a      	bhi.n	800192a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001914:	2200      	movs	r2, #0
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800191c:	f000 f92f 	bl	8001b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001920:	4a06      	ldr	r2, [pc, #24]	@ (800193c <HAL_InitTick+0x5c>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	e000      	b.n	800192c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000000 	.word	0x20000000
 8001938:	20000008 	.word	0x20000008
 800193c:	20000004 	.word	0x20000004

08001940 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001944:	4b06      	ldr	r3, [pc, #24]	@ (8001960 <HAL_IncTick+0x20>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_IncTick+0x24>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4413      	add	r3, r2
 8001950:	4a04      	ldr	r2, [pc, #16]	@ (8001964 <HAL_IncTick+0x24>)
 8001952:	6013      	str	r3, [r2, #0]
}
 8001954:	bf00      	nop
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000008 	.word	0x20000008
 8001964:	200002a0 	.word	0x200002a0

08001968 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return uwTick;
 800196c:	4b03      	ldr	r3, [pc, #12]	@ (800197c <HAL_GetTick+0x14>)
 800196e:	681b      	ldr	r3, [r3, #0]
}
 8001970:	4618      	mov	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	200002a0 	.word	0x200002a0

08001980 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001988:	f7ff ffee 	bl	8001968 <HAL_GetTick>
 800198c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001998:	d005      	beq.n	80019a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199a:	4b0a      	ldr	r3, [pc, #40]	@ (80019c4 <HAL_Delay+0x44>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019a6:	bf00      	nop
 80019a8:	f7ff ffde 	bl	8001968 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d8f7      	bhi.n	80019a8 <HAL_Delay+0x28>
  {
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000008 	.word	0x20000008

080019c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e4:	4013      	ands	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fa:	4a04      	ldr	r2, [pc, #16]	@ (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	60d3      	str	r3, [r2, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a14:	4b04      	ldr	r3, [pc, #16]	@ (8001a28 <__NVIC_GetPriorityGrouping+0x18>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	f003 0307 	and.w	r3, r3, #7
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	db0b      	blt.n	8001a56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	f003 021f 	and.w	r2, r3, #31
 8001a44:	4907      	ldr	r1, [pc, #28]	@ (8001a64 <__NVIC_EnableIRQ+0x38>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	e000e100 	.word	0xe000e100

08001a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db0a      	blt.n	8001a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	490c      	ldr	r1, [pc, #48]	@ (8001ab4 <__NVIC_SetPriority+0x4c>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a90:	e00a      	b.n	8001aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4908      	ldr	r1, [pc, #32]	@ (8001ab8 <__NVIC_SetPriority+0x50>)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	0112      	lsls	r2, r2, #4
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	761a      	strb	r2, [r3, #24]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000e100 	.word	0xe000e100
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b089      	sub	sp, #36	@ 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f1c3 0307 	rsb	r3, r3, #7
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	bf28      	it	cs
 8001ada:	2304      	movcs	r3, #4
 8001adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3304      	adds	r3, #4
 8001ae2:	2b06      	cmp	r3, #6
 8001ae4:	d902      	bls.n	8001aec <NVIC_EncodePriority+0x30>
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3b03      	subs	r3, #3
 8001aea:	e000      	b.n	8001aee <NVIC_EncodePriority+0x32>
 8001aec:	2300      	movs	r3, #0
 8001aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	401a      	ands	r2, r3
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0e:	43d9      	mvns	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b14:	4313      	orrs	r3, r2
         );
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3724      	adds	r7, #36	@ 0x24
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
	...

08001b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b34:	d301      	bcc.n	8001b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b36:	2301      	movs	r3, #1
 8001b38:	e00f      	b.n	8001b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b64 <SysTick_Config+0x40>)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b42:	210f      	movs	r1, #15
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b48:	f7ff ff8e 	bl	8001a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b4c:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <SysTick_Config+0x40>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b52:	4b04      	ldr	r3, [pc, #16]	@ (8001b64 <SysTick_Config+0x40>)
 8001b54:	2207      	movs	r2, #7
 8001b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	e000e010 	.word	0xe000e010

08001b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f7ff ff29 	bl	80019c8 <__NVIC_SetPriorityGrouping>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	4603      	mov	r3, r0
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b90:	f7ff ff3e 	bl	8001a10 <__NVIC_GetPriorityGrouping>
 8001b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	6978      	ldr	r0, [r7, #20]
 8001b9c:	f7ff ff8e 	bl	8001abc <NVIC_EncodePriority>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff5d 	bl	8001a68 <__NVIC_SetPriority>
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff31 	bl	8001a2c <__NVIC_EnableIRQ>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffa2 	bl	8001b24 <SysTick_Config>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	@ 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	e16b      	b.n	8001ee0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c08:	2201      	movs	r2, #1
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	f040 815a 	bne.w	8001eda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d005      	beq.n	8001c3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d130      	bne.n	8001ca0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2203      	movs	r2, #3
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c74:	2201      	movs	r2, #1
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	f003 0201 	and.w	r2, r3, #1
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d017      	beq.n	8001cdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	2203      	movs	r2, #3
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d123      	bne.n	8001d30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	08da      	lsrs	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3208      	adds	r2, #8
 8001cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	220f      	movs	r2, #15
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	08da      	lsrs	r2, r3, #3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3208      	adds	r2, #8
 8001d2a:	69b9      	ldr	r1, [r7, #24]
 8001d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0203 	and.w	r2, r3, #3
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80b4 	beq.w	8001eda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b60      	ldr	r3, [pc, #384]	@ (8001ef8 <HAL_GPIO_Init+0x30c>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7a:	4a5f      	ldr	r2, [pc, #380]	@ (8001ef8 <HAL_GPIO_Init+0x30c>)
 8001d7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d80:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d82:	4b5d      	ldr	r3, [pc, #372]	@ (8001ef8 <HAL_GPIO_Init+0x30c>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d8e:	4a5b      	ldr	r2, [pc, #364]	@ (8001efc <HAL_GPIO_Init+0x310>)
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	089b      	lsrs	r3, r3, #2
 8001d94:	3302      	adds	r3, #2
 8001d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	220f      	movs	r2, #15
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a52      	ldr	r2, [pc, #328]	@ (8001f00 <HAL_GPIO_Init+0x314>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d02b      	beq.n	8001e12 <HAL_GPIO_Init+0x226>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a51      	ldr	r2, [pc, #324]	@ (8001f04 <HAL_GPIO_Init+0x318>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d025      	beq.n	8001e0e <HAL_GPIO_Init+0x222>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a50      	ldr	r2, [pc, #320]	@ (8001f08 <HAL_GPIO_Init+0x31c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d01f      	beq.n	8001e0a <HAL_GPIO_Init+0x21e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4f      	ldr	r2, [pc, #316]	@ (8001f0c <HAL_GPIO_Init+0x320>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d019      	beq.n	8001e06 <HAL_GPIO_Init+0x21a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4e      	ldr	r2, [pc, #312]	@ (8001f10 <HAL_GPIO_Init+0x324>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_GPIO_Init+0x216>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4d      	ldr	r2, [pc, #308]	@ (8001f14 <HAL_GPIO_Init+0x328>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00d      	beq.n	8001dfe <HAL_GPIO_Init+0x212>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4c      	ldr	r2, [pc, #304]	@ (8001f18 <HAL_GPIO_Init+0x32c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d007      	beq.n	8001dfa <HAL_GPIO_Init+0x20e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4b      	ldr	r2, [pc, #300]	@ (8001f1c <HAL_GPIO_Init+0x330>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d101      	bne.n	8001df6 <HAL_GPIO_Init+0x20a>
 8001df2:	2307      	movs	r3, #7
 8001df4:	e00e      	b.n	8001e14 <HAL_GPIO_Init+0x228>
 8001df6:	2308      	movs	r3, #8
 8001df8:	e00c      	b.n	8001e14 <HAL_GPIO_Init+0x228>
 8001dfa:	2306      	movs	r3, #6
 8001dfc:	e00a      	b.n	8001e14 <HAL_GPIO_Init+0x228>
 8001dfe:	2305      	movs	r3, #5
 8001e00:	e008      	b.n	8001e14 <HAL_GPIO_Init+0x228>
 8001e02:	2304      	movs	r3, #4
 8001e04:	e006      	b.n	8001e14 <HAL_GPIO_Init+0x228>
 8001e06:	2303      	movs	r3, #3
 8001e08:	e004      	b.n	8001e14 <HAL_GPIO_Init+0x228>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e002      	b.n	8001e14 <HAL_GPIO_Init+0x228>
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e000      	b.n	8001e14 <HAL_GPIO_Init+0x228>
 8001e12:	2300      	movs	r3, #0
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	f002 0203 	and.w	r2, r2, #3
 8001e1a:	0092      	lsls	r2, r2, #2
 8001e1c:	4093      	lsls	r3, r2
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e24:	4935      	ldr	r1, [pc, #212]	@ (8001efc <HAL_GPIO_Init+0x310>)
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	089b      	lsrs	r3, r3, #2
 8001e2a:	3302      	adds	r3, #2
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e32:	4b3b      	ldr	r3, [pc, #236]	@ (8001f20 <HAL_GPIO_Init+0x334>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e56:	4a32      	ldr	r2, [pc, #200]	@ (8001f20 <HAL_GPIO_Init+0x334>)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e5c:	4b30      	ldr	r3, [pc, #192]	@ (8001f20 <HAL_GPIO_Init+0x334>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e80:	4a27      	ldr	r2, [pc, #156]	@ (8001f20 <HAL_GPIO_Init+0x334>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e86:	4b26      	ldr	r3, [pc, #152]	@ (8001f20 <HAL_GPIO_Init+0x334>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4013      	ands	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eaa:	4a1d      	ldr	r2, [pc, #116]	@ (8001f20 <HAL_GPIO_Init+0x334>)
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f20 <HAL_GPIO_Init+0x334>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ed4:	4a12      	ldr	r2, [pc, #72]	@ (8001f20 <HAL_GPIO_Init+0x334>)
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3301      	adds	r3, #1
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	2b0f      	cmp	r3, #15
 8001ee4:	f67f ae90 	bls.w	8001c08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3724      	adds	r7, #36	@ 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40013800 	.word	0x40013800
 8001f00:	40020000 	.word	0x40020000
 8001f04:	40020400 	.word	0x40020400
 8001f08:	40020800 	.word	0x40020800
 8001f0c:	40020c00 	.word	0x40020c00
 8001f10:	40021000 	.word	0x40021000
 8001f14:	40021400 	.word	0x40021400
 8001f18:	40021800 	.word	0x40021800
 8001f1c:	40021c00 	.word	0x40021c00
 8001f20:	40013c00 	.word	0x40013c00

08001f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	807b      	strh	r3, [r7, #2]
 8001f30:	4613      	mov	r3, r2
 8001f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f34:	787b      	ldrb	r3, [r7, #1]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f3a:	887a      	ldrh	r2, [r7, #2]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f40:	e003      	b.n	8001f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f42:	887b      	ldrh	r3, [r7, #2]
 8001f44:	041a      	lsls	r2, r3, #16
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	619a      	str	r2, [r3, #24]
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e12b      	b.n	80021c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d106      	bne.n	8001f84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff faba 	bl	80014f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2224      	movs	r2, #36	@ 0x24
 8001f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f022 0201 	bic.w	r2, r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001faa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fbc:	f001 f8da 	bl	8003174 <HAL_RCC_GetPCLK1Freq>
 8001fc0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4a81      	ldr	r2, [pc, #516]	@ (80021cc <HAL_I2C_Init+0x274>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d807      	bhi.n	8001fdc <HAL_I2C_Init+0x84>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4a80      	ldr	r2, [pc, #512]	@ (80021d0 <HAL_I2C_Init+0x278>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	bf94      	ite	ls
 8001fd4:	2301      	movls	r3, #1
 8001fd6:	2300      	movhi	r3, #0
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	e006      	b.n	8001fea <HAL_I2C_Init+0x92>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4a7d      	ldr	r2, [pc, #500]	@ (80021d4 <HAL_I2C_Init+0x27c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	bf94      	ite	ls
 8001fe4:	2301      	movls	r3, #1
 8001fe6:	2300      	movhi	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0e7      	b.n	80021c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4a78      	ldr	r2, [pc, #480]	@ (80021d8 <HAL_I2C_Init+0x280>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	0c9b      	lsrs	r3, r3, #18
 8001ffc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	430a      	orrs	r2, r1
 8002010:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6a1b      	ldr	r3, [r3, #32]
 8002018:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	4a6a      	ldr	r2, [pc, #424]	@ (80021cc <HAL_I2C_Init+0x274>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d802      	bhi.n	800202c <HAL_I2C_Init+0xd4>
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	3301      	adds	r3, #1
 800202a:	e009      	b.n	8002040 <HAL_I2C_Init+0xe8>
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002032:	fb02 f303 	mul.w	r3, r2, r3
 8002036:	4a69      	ldr	r2, [pc, #420]	@ (80021dc <HAL_I2C_Init+0x284>)
 8002038:	fba2 2303 	umull	r2, r3, r2, r3
 800203c:	099b      	lsrs	r3, r3, #6
 800203e:	3301      	adds	r3, #1
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	430b      	orrs	r3, r1
 8002046:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002052:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	495c      	ldr	r1, [pc, #368]	@ (80021cc <HAL_I2C_Init+0x274>)
 800205c:	428b      	cmp	r3, r1
 800205e:	d819      	bhi.n	8002094 <HAL_I2C_Init+0x13c>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1e59      	subs	r1, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	fbb1 f3f3 	udiv	r3, r1, r3
 800206e:	1c59      	adds	r1, r3, #1
 8002070:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002074:	400b      	ands	r3, r1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00a      	beq.n	8002090 <HAL_I2C_Init+0x138>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1e59      	subs	r1, r3, #1
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fbb1 f3f3 	udiv	r3, r1, r3
 8002088:	3301      	adds	r3, #1
 800208a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208e:	e051      	b.n	8002134 <HAL_I2C_Init+0x1dc>
 8002090:	2304      	movs	r3, #4
 8002092:	e04f      	b.n	8002134 <HAL_I2C_Init+0x1dc>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d111      	bne.n	80020c0 <HAL_I2C_Init+0x168>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1e58      	subs	r0, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	440b      	add	r3, r1
 80020aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf0c      	ite	eq
 80020b8:	2301      	moveq	r3, #1
 80020ba:	2300      	movne	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	e012      	b.n	80020e6 <HAL_I2C_Init+0x18e>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1e58      	subs	r0, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	0099      	lsls	r1, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d6:	3301      	adds	r3, #1
 80020d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bf0c      	ite	eq
 80020e0:	2301      	moveq	r3, #1
 80020e2:	2300      	movne	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_I2C_Init+0x196>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e022      	b.n	8002134 <HAL_I2C_Init+0x1dc>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10e      	bne.n	8002114 <HAL_I2C_Init+0x1bc>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1e58      	subs	r0, r3, #1
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6859      	ldr	r1, [r3, #4]
 80020fe:	460b      	mov	r3, r1
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	440b      	add	r3, r1
 8002104:	fbb0 f3f3 	udiv	r3, r0, r3
 8002108:	3301      	adds	r3, #1
 800210a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800210e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002112:	e00f      	b.n	8002134 <HAL_I2C_Init+0x1dc>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	1e58      	subs	r0, r3, #1
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6859      	ldr	r1, [r3, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	0099      	lsls	r1, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	fbb0 f3f3 	udiv	r3, r0, r3
 800212a:	3301      	adds	r3, #1
 800212c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002130:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	6809      	ldr	r1, [r1, #0]
 8002138:	4313      	orrs	r3, r2
 800213a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69da      	ldr	r2, [r3, #28]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	431a      	orrs	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002162:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	6911      	ldr	r1, [r2, #16]
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68d2      	ldr	r2, [r2, #12]
 800216e:	4311      	orrs	r1, r2
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	430b      	orrs	r3, r1
 8002176:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695a      	ldr	r2, [r3, #20]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f042 0201 	orr.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2220      	movs	r2, #32
 80021ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	000186a0 	.word	0x000186a0
 80021d0:	001e847f 	.word	0x001e847f
 80021d4:	003d08ff 	.word	0x003d08ff
 80021d8:	431bde83 	.word	0x431bde83
 80021dc:	10624dd3 	.word	0x10624dd3

080021e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af02      	add	r7, sp, #8
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	461a      	mov	r2, r3
 80021ec:	460b      	mov	r3, r1
 80021ee:	817b      	strh	r3, [r7, #10]
 80021f0:	4613      	mov	r3, r2
 80021f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021f4:	f7ff fbb8 	bl	8001968 <HAL_GetTick>
 80021f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b20      	cmp	r3, #32
 8002204:	f040 80e0 	bne.w	80023c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2319      	movs	r3, #25
 800220e:	2201      	movs	r2, #1
 8002210:	4970      	ldr	r1, [pc, #448]	@ (80023d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f964 	bl	80024e0 <I2C_WaitOnFlagUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800221e:	2302      	movs	r3, #2
 8002220:	e0d3      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002228:	2b01      	cmp	r3, #1
 800222a:	d101      	bne.n	8002230 <HAL_I2C_Master_Transmit+0x50>
 800222c:	2302      	movs	r3, #2
 800222e:	e0cc      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d007      	beq.n	8002256 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0201 	orr.w	r2, r2, #1
 8002254:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002264:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2221      	movs	r2, #33	@ 0x21
 800226a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2210      	movs	r2, #16
 8002272:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2200      	movs	r2, #0
 800227a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	893a      	ldrh	r2, [r7, #8]
 8002286:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800228c:	b29a      	uxth	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4a50      	ldr	r2, [pc, #320]	@ (80023d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002296:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002298:	8979      	ldrh	r1, [r7, #10]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	6a3a      	ldr	r2, [r7, #32]
 800229e:	68f8      	ldr	r0, [r7, #12]
 80022a0:	f000 f89c 	bl	80023dc <I2C_MasterRequestWrite>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e08d      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022c4:	e066      	b.n	8002394 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	6a39      	ldr	r1, [r7, #32]
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 fa22 	bl	8002714 <I2C_WaitOnTXEFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00d      	beq.n	80022f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	2b04      	cmp	r3, #4
 80022dc:	d107      	bne.n	80022ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e06b      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f6:	781a      	ldrb	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b04      	cmp	r3, #4
 800232e:	d11b      	bne.n	8002368 <HAL_I2C_Master_Transmit+0x188>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002334:	2b00      	cmp	r3, #0
 8002336:	d017      	beq.n	8002368 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233c:	781a      	ldrb	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	1c5a      	adds	r2, r3, #1
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002352:	b29b      	uxth	r3, r3
 8002354:	3b01      	subs	r3, #1
 8002356:	b29a      	uxth	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002360:	3b01      	subs	r3, #1
 8002362:	b29a      	uxth	r2, r3
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	6a39      	ldr	r1, [r7, #32]
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f000 fa19 	bl	80027a4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d00d      	beq.n	8002394 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	2b04      	cmp	r3, #4
 800237e:	d107      	bne.n	8002390 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800238e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e01a      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002398:	2b00      	cmp	r3, #0
 800239a:	d194      	bne.n	80022c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	e000      	b.n	80023ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023c8:	2302      	movs	r3, #2
  }
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	00100002 	.word	0x00100002
 80023d8:	ffff0000 	.word	0xffff0000

080023dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af02      	add	r7, sp, #8
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	460b      	mov	r3, r1
 80023ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d006      	beq.n	8002406 <I2C_MasterRequestWrite+0x2a>
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d003      	beq.n	8002406 <I2C_MasterRequestWrite+0x2a>
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002404:	d108      	bne.n	8002418 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	e00b      	b.n	8002430 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241c:	2b12      	cmp	r3, #18
 800241e:	d107      	bne.n	8002430 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800242e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f84f 	bl	80024e0 <I2C_WaitOnFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00d      	beq.n	8002464 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002452:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002456:	d103      	bne.n	8002460 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800245e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e035      	b.n	80024d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800246c:	d108      	bne.n	8002480 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800246e:	897b      	ldrh	r3, [r7, #10]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	461a      	mov	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800247c:	611a      	str	r2, [r3, #16]
 800247e:	e01b      	b.n	80024b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002480:	897b      	ldrh	r3, [r7, #10]
 8002482:	11db      	asrs	r3, r3, #7
 8002484:	b2db      	uxtb	r3, r3
 8002486:	f003 0306 	and.w	r3, r3, #6
 800248a:	b2db      	uxtb	r3, r3
 800248c:	f063 030f 	orn	r3, r3, #15
 8002490:	b2da      	uxtb	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	490e      	ldr	r1, [pc, #56]	@ (80024d8 <I2C_MasterRequestWrite+0xfc>)
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f898 	bl	80025d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e010      	b.n	80024d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024ae:	897b      	ldrh	r3, [r7, #10]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4907      	ldr	r1, [pc, #28]	@ (80024dc <I2C_MasterRequestWrite+0x100>)
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f888 	bl	80025d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	00010008 	.word	0x00010008
 80024dc:	00010002 	.word	0x00010002

080024e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	4613      	mov	r3, r2
 80024ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024f0:	e048      	b.n	8002584 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024f8:	d044      	beq.n	8002584 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fa:	f7ff fa35 	bl	8001968 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d302      	bcc.n	8002510 <I2C_WaitOnFlagUntilTimeout+0x30>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d139      	bne.n	8002584 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	0c1b      	lsrs	r3, r3, #16
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b01      	cmp	r3, #1
 8002518:	d10d      	bne.n	8002536 <I2C_WaitOnFlagUntilTimeout+0x56>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	43da      	mvns	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	4013      	ands	r3, r2
 8002526:	b29b      	uxth	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf0c      	ite	eq
 800252c:	2301      	moveq	r3, #1
 800252e:	2300      	movne	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	461a      	mov	r2, r3
 8002534:	e00c      	b.n	8002550 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	43da      	mvns	r2, r3
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	4013      	ands	r3, r2
 8002542:	b29b      	uxth	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf0c      	ite	eq
 8002548:	2301      	moveq	r3, #1
 800254a:	2300      	movne	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	429a      	cmp	r2, r3
 8002554:	d116      	bne.n	8002584 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	f043 0220 	orr.w	r2, r3, #32
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e023      	b.n	80025cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	0c1b      	lsrs	r3, r3, #16
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d10d      	bne.n	80025aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	43da      	mvns	r2, r3
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	4013      	ands	r3, r2
 800259a:	b29b      	uxth	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	bf0c      	ite	eq
 80025a0:	2301      	moveq	r3, #1
 80025a2:	2300      	movne	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	461a      	mov	r2, r3
 80025a8:	e00c      	b.n	80025c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	43da      	mvns	r2, r3
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	4013      	ands	r3, r2
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf0c      	ite	eq
 80025bc:	2301      	moveq	r3, #1
 80025be:	2300      	movne	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	461a      	mov	r2, r3
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d093      	beq.n	80024f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
 80025e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025e2:	e071      	b.n	80026c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025f2:	d123      	bne.n	800263c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002602:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800260c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002628:	f043 0204 	orr.w	r2, r3, #4
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e067      	b.n	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002642:	d041      	beq.n	80026c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002644:	f7ff f990 	bl	8001968 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	429a      	cmp	r2, r3
 8002652:	d302      	bcc.n	800265a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d136      	bne.n	80026c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b01      	cmp	r3, #1
 8002662:	d10c      	bne.n	800267e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	43da      	mvns	r2, r3
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4013      	ands	r3, r2
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	bf14      	ite	ne
 8002676:	2301      	movne	r3, #1
 8002678:	2300      	moveq	r3, #0
 800267a:	b2db      	uxtb	r3, r3
 800267c:	e00b      	b.n	8002696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	43da      	mvns	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	4013      	ands	r3, r2
 800268a:	b29b      	uxth	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	bf14      	ite	ne
 8002690:	2301      	movne	r3, #1
 8002692:	2300      	moveq	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d016      	beq.n	80026c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b4:	f043 0220 	orr.w	r2, r3, #32
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e021      	b.n	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	0c1b      	lsrs	r3, r3, #16
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d10c      	bne.n	80026ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	43da      	mvns	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	4013      	ands	r3, r2
 80026de:	b29b      	uxth	r3, r3
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	bf14      	ite	ne
 80026e4:	2301      	movne	r3, #1
 80026e6:	2300      	moveq	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	e00b      	b.n	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	43da      	mvns	r2, r3
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	4013      	ands	r3, r2
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bf14      	ite	ne
 80026fe:	2301      	movne	r3, #1
 8002700:	2300      	moveq	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	f47f af6d 	bne.w	80025e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002720:	e034      	b.n	800278c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f886 	bl	8002834 <I2C_IsAcknowledgeFailed>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e034      	b.n	800279c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002738:	d028      	beq.n	800278c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273a:	f7ff f915 	bl	8001968 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	429a      	cmp	r2, r3
 8002748:	d302      	bcc.n	8002750 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d11d      	bne.n	800278c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800275a:	2b80      	cmp	r3, #128	@ 0x80
 800275c:	d016      	beq.n	800278c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2220      	movs	r2, #32
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	f043 0220 	orr.w	r2, r3, #32
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e007      	b.n	800279c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002796:	2b80      	cmp	r3, #128	@ 0x80
 8002798:	d1c3      	bne.n	8002722 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027b0:	e034      	b.n	800281c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f83e 	bl	8002834 <I2C_IsAcknowledgeFailed>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e034      	b.n	800282c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027c8:	d028      	beq.n	800281c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ca:	f7ff f8cd 	bl	8001968 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d302      	bcc.n	80027e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d11d      	bne.n	800281c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d016      	beq.n	800281c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002808:	f043 0220 	orr.w	r2, r3, #32
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e007      	b.n	800282c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	f003 0304 	and.w	r3, r3, #4
 8002826:	2b04      	cmp	r3, #4
 8002828:	d1c3      	bne.n	80027b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002846:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800284a:	d11b      	bne.n	8002884 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002854:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2220      	movs	r2, #32
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002870:	f043 0204 	orr.w	r2, r3, #4
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e267      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d075      	beq.n	800299e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028b2:	4b88      	ldr	r3, [pc, #544]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d00c      	beq.n	80028d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028be:	4b85      	ldr	r3, [pc, #532]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80028c6:	2b08      	cmp	r3, #8
 80028c8:	d112      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028ca:	4b82      	ldr	r3, [pc, #520]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028d6:	d10b      	bne.n	80028f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d8:	4b7e      	ldr	r3, [pc, #504]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d05b      	beq.n	800299c <HAL_RCC_OscConfig+0x108>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d157      	bne.n	800299c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e242      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028f8:	d106      	bne.n	8002908 <HAL_RCC_OscConfig+0x74>
 80028fa:	4b76      	ldr	r3, [pc, #472]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a75      	ldr	r2, [pc, #468]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	e01d      	b.n	8002944 <HAL_RCC_OscConfig+0xb0>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0x98>
 8002912:	4b70      	ldr	r3, [pc, #448]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a6f      	ldr	r2, [pc, #444]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002918:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a6c      	ldr	r2, [pc, #432]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002924:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e00b      	b.n	8002944 <HAL_RCC_OscConfig+0xb0>
 800292c:	4b69      	ldr	r3, [pc, #420]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a68      	ldr	r2, [pc, #416]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002932:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	4b66      	ldr	r3, [pc, #408]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a65      	ldr	r2, [pc, #404]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 800293e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d013      	beq.n	8002974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7ff f80c 	bl	8001968 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002954:	f7ff f808 	bl	8001968 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	@ 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e207      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	4b5b      	ldr	r3, [pc, #364]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0xc0>
 8002972:	e014      	b.n	800299e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002974:	f7fe fff8 	bl	8001968 <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800297c:	f7fe fff4 	bl	8001968 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b64      	cmp	r3, #100	@ 0x64
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e1f3      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298e:	4b51      	ldr	r3, [pc, #324]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f0      	bne.n	800297c <HAL_RCC_OscConfig+0xe8>
 800299a:	e000      	b.n	800299e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800299c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d063      	beq.n	8002a72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029aa:	4b4a      	ldr	r3, [pc, #296]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00b      	beq.n	80029ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029b6:	4b47      	ldr	r3, [pc, #284]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80029be:	2b08      	cmp	r3, #8
 80029c0:	d11c      	bne.n	80029fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029c2:	4b44      	ldr	r3, [pc, #272]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d116      	bne.n	80029fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ce:	4b41      	ldr	r3, [pc, #260]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <HAL_RCC_OscConfig+0x152>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d001      	beq.n	80029e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e1c7      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	4937      	ldr	r1, [pc, #220]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029fa:	e03a      	b.n	8002a72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d020      	beq.n	8002a46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a04:	4b34      	ldr	r3, [pc, #208]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0a:	f7fe ffad 	bl	8001968 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a12:	f7fe ffa9 	bl	8001968 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e1a8      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a24:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a30:	4b28      	ldr	r3, [pc, #160]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	00db      	lsls	r3, r3, #3
 8002a3e:	4925      	ldr	r1, [pc, #148]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	600b      	str	r3, [r1, #0]
 8002a44:	e015      	b.n	8002a72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a46:	4b24      	ldr	r3, [pc, #144]	@ (8002ad8 <HAL_RCC_OscConfig+0x244>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4c:	f7fe ff8c 	bl	8001968 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a54:	f7fe ff88 	bl	8001968 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e187      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a66:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d036      	beq.n	8002aec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d016      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a86:	4b15      	ldr	r3, [pc, #84]	@ (8002adc <HAL_RCC_OscConfig+0x248>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a8c:	f7fe ff6c 	bl	8001968 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a94:	f7fe ff68 	bl	8001968 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e167      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <HAL_RCC_OscConfig+0x240>)
 8002aa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0x200>
 8002ab2:	e01b      	b.n	8002aec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab4:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <HAL_RCC_OscConfig+0x248>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aba:	f7fe ff55 	bl	8001968 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ac0:	e00e      	b.n	8002ae0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac2:	f7fe ff51 	bl	8001968 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d907      	bls.n	8002ae0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e150      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	42470000 	.word	0x42470000
 8002adc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae0:	4b88      	ldr	r3, [pc, #544]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1ea      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	f000 8097 	beq.w	8002c28 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002afa:	2300      	movs	r3, #0
 8002afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002afe:	4b81      	ldr	r3, [pc, #516]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10f      	bne.n	8002b2a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	4b7d      	ldr	r3, [pc, #500]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	4a7c      	ldr	r2, [pc, #496]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b1a:	4b7a      	ldr	r3, [pc, #488]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b26:	2301      	movs	r3, #1
 8002b28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2a:	4b77      	ldr	r3, [pc, #476]	@ (8002d08 <HAL_RCC_OscConfig+0x474>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d118      	bne.n	8002b68 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b36:	4b74      	ldr	r3, [pc, #464]	@ (8002d08 <HAL_RCC_OscConfig+0x474>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a73      	ldr	r2, [pc, #460]	@ (8002d08 <HAL_RCC_OscConfig+0x474>)
 8002b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b42:	f7fe ff11 	bl	8001968 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b4a:	f7fe ff0d 	bl	8001968 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e10c      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	4b6a      	ldr	r3, [pc, #424]	@ (8002d08 <HAL_RCC_OscConfig+0x474>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d106      	bne.n	8002b7e <HAL_RCC_OscConfig+0x2ea>
 8002b70:	4b64      	ldr	r3, [pc, #400]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b74:	4a63      	ldr	r2, [pc, #396]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7c:	e01c      	b.n	8002bb8 <HAL_RCC_OscConfig+0x324>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b05      	cmp	r3, #5
 8002b84:	d10c      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x30c>
 8002b86:	4b5f      	ldr	r3, [pc, #380]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8a:	4a5e      	ldr	r2, [pc, #376]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	f043 0304 	orr.w	r3, r3, #4
 8002b90:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b92:	4b5c      	ldr	r3, [pc, #368]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b96:	4a5b      	ldr	r2, [pc, #364]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b9e:	e00b      	b.n	8002bb8 <HAL_RCC_OscConfig+0x324>
 8002ba0:	4b58      	ldr	r3, [pc, #352]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba4:	4a57      	ldr	r2, [pc, #348]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bac:	4b55      	ldr	r3, [pc, #340]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb0:	4a54      	ldr	r2, [pc, #336]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002bb2:	f023 0304 	bic.w	r3, r3, #4
 8002bb6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d015      	beq.n	8002bec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7fe fed2 	bl	8001968 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7fe fece 	bl	8001968 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0cb      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bde:	4b49      	ldr	r3, [pc, #292]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0ee      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x334>
 8002bea:	e014      	b.n	8002c16 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bec:	f7fe febc 	bl	8001968 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf4:	f7fe feb8 	bl	8001968 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e0b5      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1ee      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c16:	7dfb      	ldrb	r3, [r7, #23]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d105      	bne.n	8002c28 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c1c:	4b39      	ldr	r3, [pc, #228]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c20:	4a38      	ldr	r2, [pc, #224]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c26:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 80a1 	beq.w	8002d74 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c32:	4b34      	ldr	r3, [pc, #208]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d05c      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d141      	bne.n	8002cca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c46:	4b31      	ldr	r3, [pc, #196]	@ (8002d0c <HAL_RCC_OscConfig+0x478>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4c:	f7fe fe8c 	bl	8001968 <HAL_GetTick>
 8002c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c52:	e008      	b.n	8002c66 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c54:	f7fe fe88 	bl	8001968 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e087      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c66:	4b27      	ldr	r3, [pc, #156]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1f0      	bne.n	8002c54 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	69da      	ldr	r2, [r3, #28]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c80:	019b      	lsls	r3, r3, #6
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c88:	085b      	lsrs	r3, r3, #1
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	041b      	lsls	r3, r3, #16
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c94:	061b      	lsls	r3, r3, #24
 8002c96:	491b      	ldr	r1, [pc, #108]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d0c <HAL_RCC_OscConfig+0x478>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca2:	f7fe fe61 	bl	8001968 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002caa:	f7fe fe5d 	bl	8001968 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e05c      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbc:	4b11      	ldr	r3, [pc, #68]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x416>
 8002cc8:	e054      	b.n	8002d74 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cca:	4b10      	ldr	r3, [pc, #64]	@ (8002d0c <HAL_RCC_OscConfig+0x478>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fe4a 	bl	8001968 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd8:	f7fe fe46 	bl	8001968 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e045      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cea:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <HAL_RCC_OscConfig+0x470>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x444>
 8002cf6:	e03d      	b.n	8002d74 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d107      	bne.n	8002d10 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e038      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40007000 	.word	0x40007000
 8002d0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d10:	4b1b      	ldr	r3, [pc, #108]	@ (8002d80 <HAL_RCC_OscConfig+0x4ec>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d028      	beq.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d121      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d11a      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d40:	4013      	ands	r3, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d111      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d56:	085b      	lsrs	r3, r3, #1
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d107      	bne.n	8002d70 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e000      	b.n	8002d76 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800

08002d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0cc      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d98:	4b68      	ldr	r3, [pc, #416]	@ (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d90c      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b65      	ldr	r3, [pc, #404]	@ (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	b2d2      	uxtb	r2, r2
 8002dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b63      	ldr	r3, [pc, #396]	@ (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0b8      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d020      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dd8:	4b59      	ldr	r3, [pc, #356]	@ (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4a58      	ldr	r2, [pc, #352]	@ (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002de2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0308 	and.w	r3, r3, #8
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df0:	4b53      	ldr	r3, [pc, #332]	@ (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4a52      	ldr	r2, [pc, #328]	@ (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002df6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dfc:	4b50      	ldr	r3, [pc, #320]	@ (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	494d      	ldr	r1, [pc, #308]	@ (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d044      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d107      	bne.n	8002e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e22:	4b47      	ldr	r3, [pc, #284]	@ (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d119      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e07f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d003      	beq.n	8002e42 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e3e:	2b03      	cmp	r3, #3
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e42:	4b3f      	ldr	r3, [pc, #252]	@ (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e06f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e52:	4b3b      	ldr	r3, [pc, #236]	@ (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e067      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e62:	4b37      	ldr	r3, [pc, #220]	@ (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f023 0203 	bic.w	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4934      	ldr	r1, [pc, #208]	@ (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e74:	f7fe fd78 	bl	8001968 <HAL_GetTick>
 8002e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7c:	f7fe fd74 	bl	8001968 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e04f      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e92:	4b2b      	ldr	r3, [pc, #172]	@ (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 020c 	and.w	r2, r3, #12
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d1eb      	bne.n	8002e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea4:	4b25      	ldr	r3, [pc, #148]	@ (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d20c      	bcs.n	8002ecc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb2:	4b22      	ldr	r3, [pc, #136]	@ (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eba:	4b20      	ldr	r3, [pc, #128]	@ (8002f3c <HAL_RCC_ClockConfig+0x1b8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d001      	beq.n	8002ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e032      	b.n	8002f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0304 	and.w	r3, r3, #4
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ed8:	4b19      	ldr	r3, [pc, #100]	@ (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	4916      	ldr	r1, [pc, #88]	@ (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ef6:	4b12      	ldr	r3, [pc, #72]	@ (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	490e      	ldr	r1, [pc, #56]	@ (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f0a:	f000 f821 	bl	8002f50 <HAL_RCC_GetSysClockFreq>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	490a      	ldr	r1, [pc, #40]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002f1c:	5ccb      	ldrb	r3, [r1, r3]
 8002f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f22:	4a09      	ldr	r2, [pc, #36]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002f26:	4b09      	ldr	r3, [pc, #36]	@ (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fe fcd8 	bl	80018e0 <HAL_InitTick>

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023c00 	.word	0x40023c00
 8002f40:	40023800 	.word	0x40023800
 8002f44:	08006a84 	.word	0x08006a84
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	20000004 	.word	0x20000004

08002f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f54:	b094      	sub	sp, #80	@ 0x50
 8002f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002f64:	2300      	movs	r3, #0
 8002f66:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f68:	4b79      	ldr	r3, [pc, #484]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 030c 	and.w	r3, r3, #12
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d00d      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x40>
 8002f74:	2b08      	cmp	r3, #8
 8002f76:	f200 80e1 	bhi.w	800313c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d002      	beq.n	8002f84 <HAL_RCC_GetSysClockFreq+0x34>
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d003      	beq.n	8002f8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002f82:	e0db      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f84:	4b73      	ldr	r3, [pc, #460]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f88:	e0db      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f8a:	4b73      	ldr	r3, [pc, #460]	@ (8003158 <HAL_RCC_GetSysClockFreq+0x208>)
 8002f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f8e:	e0d8      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f90:	4b6f      	ldr	r3, [pc, #444]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f98:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f9a:	4b6d      	ldr	r3, [pc, #436]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d063      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fa6:	4b6a      	ldr	r3, [pc, #424]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	099b      	lsrs	r3, r3, #6
 8002fac:	2200      	movs	r2, #0
 8002fae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002fba:	2300      	movs	r3, #0
 8002fbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fbe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002fc2:	4622      	mov	r2, r4
 8002fc4:	462b      	mov	r3, r5
 8002fc6:	f04f 0000 	mov.w	r0, #0
 8002fca:	f04f 0100 	mov.w	r1, #0
 8002fce:	0159      	lsls	r1, r3, #5
 8002fd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fd4:	0150      	lsls	r0, r2, #5
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4621      	mov	r1, r4
 8002fdc:	1a51      	subs	r1, r2, r1
 8002fde:	6139      	str	r1, [r7, #16]
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	eb63 0301 	sbc.w	r3, r3, r1
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ff4:	4659      	mov	r1, fp
 8002ff6:	018b      	lsls	r3, r1, #6
 8002ff8:	4651      	mov	r1, sl
 8002ffa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ffe:	4651      	mov	r1, sl
 8003000:	018a      	lsls	r2, r1, #6
 8003002:	4651      	mov	r1, sl
 8003004:	ebb2 0801 	subs.w	r8, r2, r1
 8003008:	4659      	mov	r1, fp
 800300a:	eb63 0901 	sbc.w	r9, r3, r1
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800301a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800301e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003022:	4690      	mov	r8, r2
 8003024:	4699      	mov	r9, r3
 8003026:	4623      	mov	r3, r4
 8003028:	eb18 0303 	adds.w	r3, r8, r3
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	462b      	mov	r3, r5
 8003030:	eb49 0303 	adc.w	r3, r9, r3
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003042:	4629      	mov	r1, r5
 8003044:	024b      	lsls	r3, r1, #9
 8003046:	4621      	mov	r1, r4
 8003048:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800304c:	4621      	mov	r1, r4
 800304e:	024a      	lsls	r2, r1, #9
 8003050:	4610      	mov	r0, r2
 8003052:	4619      	mov	r1, r3
 8003054:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003056:	2200      	movs	r2, #0
 8003058:	62bb      	str	r3, [r7, #40]	@ 0x28
 800305a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800305c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003060:	f7fd fda2 	bl	8000ba8 <__aeabi_uldivmod>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4613      	mov	r3, r2
 800306a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800306c:	e058      	b.n	8003120 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800306e:	4b38      	ldr	r3, [pc, #224]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x200>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	099b      	lsrs	r3, r3, #6
 8003074:	2200      	movs	r2, #0
 8003076:	4618      	mov	r0, r3
 8003078:	4611      	mov	r1, r2
 800307a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800307e:	623b      	str	r3, [r7, #32]
 8003080:	2300      	movs	r3, #0
 8003082:	627b      	str	r3, [r7, #36]	@ 0x24
 8003084:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003088:	4642      	mov	r2, r8
 800308a:	464b      	mov	r3, r9
 800308c:	f04f 0000 	mov.w	r0, #0
 8003090:	f04f 0100 	mov.w	r1, #0
 8003094:	0159      	lsls	r1, r3, #5
 8003096:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800309a:	0150      	lsls	r0, r2, #5
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4641      	mov	r1, r8
 80030a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80030a6:	4649      	mov	r1, r9
 80030a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80030b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80030bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80030c0:	ebb2 040a 	subs.w	r4, r2, sl
 80030c4:	eb63 050b 	sbc.w	r5, r3, fp
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	00eb      	lsls	r3, r5, #3
 80030d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030d6:	00e2      	lsls	r2, r4, #3
 80030d8:	4614      	mov	r4, r2
 80030da:	461d      	mov	r5, r3
 80030dc:	4643      	mov	r3, r8
 80030de:	18e3      	adds	r3, r4, r3
 80030e0:	603b      	str	r3, [r7, #0]
 80030e2:	464b      	mov	r3, r9
 80030e4:	eb45 0303 	adc.w	r3, r5, r3
 80030e8:	607b      	str	r3, [r7, #4]
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f04f 0300 	mov.w	r3, #0
 80030f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030f6:	4629      	mov	r1, r5
 80030f8:	028b      	lsls	r3, r1, #10
 80030fa:	4621      	mov	r1, r4
 80030fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003100:	4621      	mov	r1, r4
 8003102:	028a      	lsls	r2, r1, #10
 8003104:	4610      	mov	r0, r2
 8003106:	4619      	mov	r1, r3
 8003108:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800310a:	2200      	movs	r2, #0
 800310c:	61bb      	str	r3, [r7, #24]
 800310e:	61fa      	str	r2, [r7, #28]
 8003110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003114:	f7fd fd48 	bl	8000ba8 <__aeabi_uldivmod>
 8003118:	4602      	mov	r2, r0
 800311a:	460b      	mov	r3, r1
 800311c:	4613      	mov	r3, r2
 800311e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003120:	4b0b      	ldr	r3, [pc, #44]	@ (8003150 <HAL_RCC_GetSysClockFreq+0x200>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	0c1b      	lsrs	r3, r3, #16
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	3301      	adds	r3, #1
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003130:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003132:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800313a:	e002      	b.n	8003142 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800313c:	4b05      	ldr	r3, [pc, #20]	@ (8003154 <HAL_RCC_GetSysClockFreq+0x204>)
 800313e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003140:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003142:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003144:	4618      	mov	r0, r3
 8003146:	3750      	adds	r7, #80	@ 0x50
 8003148:	46bd      	mov	sp, r7
 800314a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800314e:	bf00      	nop
 8003150:	40023800 	.word	0x40023800
 8003154:	00f42400 	.word	0x00f42400
 8003158:	007a1200 	.word	0x007a1200

0800315c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003160:	4b03      	ldr	r3, [pc, #12]	@ (8003170 <HAL_RCC_GetHCLKFreq+0x14>)
 8003162:	681b      	ldr	r3, [r3, #0]
}
 8003164:	4618      	mov	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000000 	.word	0x20000000

08003174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003178:	f7ff fff0 	bl	800315c <HAL_RCC_GetHCLKFreq>
 800317c:	4602      	mov	r2, r0
 800317e:	4b05      	ldr	r3, [pc, #20]	@ (8003194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	0a9b      	lsrs	r3, r3, #10
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	4903      	ldr	r1, [pc, #12]	@ (8003198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800318a:	5ccb      	ldrb	r3, [r1, r3]
 800318c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003190:	4618      	mov	r0, r3
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40023800 	.word	0x40023800
 8003198:	08006a94 	.word	0x08006a94

0800319c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e041      	b.n	8003232 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fe f9e0 	bl	8001588 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3304      	adds	r3, #4
 80031d8:	4619      	mov	r1, r3
 80031da:	4610      	mov	r0, r2
 80031dc:	f000 fb4e 	bl	800387c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d104      	bne.n	800325a <HAL_TIM_IC_Start_IT+0x1e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003256:	b2db      	uxtb	r3, r3
 8003258:	e013      	b.n	8003282 <HAL_TIM_IC_Start_IT+0x46>
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	2b04      	cmp	r3, #4
 800325e:	d104      	bne.n	800326a <HAL_TIM_IC_Start_IT+0x2e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003266:	b2db      	uxtb	r3, r3
 8003268:	e00b      	b.n	8003282 <HAL_TIM_IC_Start_IT+0x46>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	2b08      	cmp	r3, #8
 800326e:	d104      	bne.n	800327a <HAL_TIM_IC_Start_IT+0x3e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003276:	b2db      	uxtb	r3, r3
 8003278:	e003      	b.n	8003282 <HAL_TIM_IC_Start_IT+0x46>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003280:	b2db      	uxtb	r3, r3
 8003282:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d104      	bne.n	8003294 <HAL_TIM_IC_Start_IT+0x58>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003290:	b2db      	uxtb	r3, r3
 8003292:	e013      	b.n	80032bc <HAL_TIM_IC_Start_IT+0x80>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	2b04      	cmp	r3, #4
 8003298:	d104      	bne.n	80032a4 <HAL_TIM_IC_Start_IT+0x68>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e00b      	b.n	80032bc <HAL_TIM_IC_Start_IT+0x80>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d104      	bne.n	80032b4 <HAL_TIM_IC_Start_IT+0x78>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	e003      	b.n	80032bc <HAL_TIM_IC_Start_IT+0x80>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80032be:	7bbb      	ldrb	r3, [r7, #14]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d102      	bne.n	80032ca <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80032c4:	7b7b      	ldrb	r3, [r7, #13]
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d001      	beq.n	80032ce <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e0cc      	b.n	8003468 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d104      	bne.n	80032de <HAL_TIM_IC_Start_IT+0xa2>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032dc:	e013      	b.n	8003306 <HAL_TIM_IC_Start_IT+0xca>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d104      	bne.n	80032ee <HAL_TIM_IC_Start_IT+0xb2>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032ec:	e00b      	b.n	8003306 <HAL_TIM_IC_Start_IT+0xca>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d104      	bne.n	80032fe <HAL_TIM_IC_Start_IT+0xc2>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032fc:	e003      	b.n	8003306 <HAL_TIM_IC_Start_IT+0xca>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2202      	movs	r2, #2
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d104      	bne.n	8003316 <HAL_TIM_IC_Start_IT+0xda>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003314:	e013      	b.n	800333e <HAL_TIM_IC_Start_IT+0x102>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b04      	cmp	r3, #4
 800331a:	d104      	bne.n	8003326 <HAL_TIM_IC_Start_IT+0xea>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003324:	e00b      	b.n	800333e <HAL_TIM_IC_Start_IT+0x102>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b08      	cmp	r3, #8
 800332a:	d104      	bne.n	8003336 <HAL_TIM_IC_Start_IT+0xfa>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003334:	e003      	b.n	800333e <HAL_TIM_IC_Start_IT+0x102>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2202      	movs	r2, #2
 800333a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b0c      	cmp	r3, #12
 8003342:	d841      	bhi.n	80033c8 <HAL_TIM_IC_Start_IT+0x18c>
 8003344:	a201      	add	r2, pc, #4	@ (adr r2, 800334c <HAL_TIM_IC_Start_IT+0x110>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	08003381 	.word	0x08003381
 8003350:	080033c9 	.word	0x080033c9
 8003354:	080033c9 	.word	0x080033c9
 8003358:	080033c9 	.word	0x080033c9
 800335c:	08003393 	.word	0x08003393
 8003360:	080033c9 	.word	0x080033c9
 8003364:	080033c9 	.word	0x080033c9
 8003368:	080033c9 	.word	0x080033c9
 800336c:	080033a5 	.word	0x080033a5
 8003370:	080033c9 	.word	0x080033c9
 8003374:	080033c9 	.word	0x080033c9
 8003378:	080033c9 	.word	0x080033c9
 800337c:	080033b7 	.word	0x080033b7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0202 	orr.w	r2, r2, #2
 800338e:	60da      	str	r2, [r3, #12]
      break;
 8003390:	e01d      	b.n	80033ce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 0204 	orr.w	r2, r2, #4
 80033a0:	60da      	str	r2, [r3, #12]
      break;
 80033a2:	e014      	b.n	80033ce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f042 0208 	orr.w	r2, r2, #8
 80033b2:	60da      	str	r2, [r3, #12]
      break;
 80033b4:	e00b      	b.n	80033ce <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0210 	orr.w	r2, r2, #16
 80033c4:	60da      	str	r2, [r3, #12]
      break;
 80033c6:	e002      	b.n	80033ce <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
      break;
 80033cc:	bf00      	nop
  }

  if (status == HAL_OK)
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d148      	bne.n	8003466 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2201      	movs	r2, #1
 80033da:	6839      	ldr	r1, [r7, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 fc23 	bl	8003c28 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a22      	ldr	r2, [pc, #136]	@ (8003470 <HAL_TIM_IC_Start_IT+0x234>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d022      	beq.n	8003432 <HAL_TIM_IC_Start_IT+0x1f6>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033f4:	d01d      	beq.n	8003432 <HAL_TIM_IC_Start_IT+0x1f6>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003474 <HAL_TIM_IC_Start_IT+0x238>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d018      	beq.n	8003432 <HAL_TIM_IC_Start_IT+0x1f6>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1c      	ldr	r2, [pc, #112]	@ (8003478 <HAL_TIM_IC_Start_IT+0x23c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d013      	beq.n	8003432 <HAL_TIM_IC_Start_IT+0x1f6>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1b      	ldr	r2, [pc, #108]	@ (800347c <HAL_TIM_IC_Start_IT+0x240>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00e      	beq.n	8003432 <HAL_TIM_IC_Start_IT+0x1f6>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a19      	ldr	r2, [pc, #100]	@ (8003480 <HAL_TIM_IC_Start_IT+0x244>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d009      	beq.n	8003432 <HAL_TIM_IC_Start_IT+0x1f6>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a18      	ldr	r2, [pc, #96]	@ (8003484 <HAL_TIM_IC_Start_IT+0x248>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d004      	beq.n	8003432 <HAL_TIM_IC_Start_IT+0x1f6>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a16      	ldr	r2, [pc, #88]	@ (8003488 <HAL_TIM_IC_Start_IT+0x24c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d111      	bne.n	8003456 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	2b06      	cmp	r3, #6
 8003442:	d010      	beq.n	8003466 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003454:	e007      	b.n	8003466 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f042 0201 	orr.w	r2, r2, #1
 8003464:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003466:	7bfb      	ldrb	r3, [r7, #15]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40010000 	.word	0x40010000
 8003474:	40000400 	.word	0x40000400
 8003478:	40000800 	.word	0x40000800
 800347c:	40000c00 	.word	0x40000c00
 8003480:	40010400 	.word	0x40010400
 8003484:	40014000 	.word	0x40014000
 8003488:	40001800 	.word	0x40001800

0800348c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d020      	beq.n	80034f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d01b      	beq.n	80034f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f06f 0202 	mvn.w	r2, #2
 80034c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f003 0303 	and.w	r3, r3, #3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd fdee 	bl	80010b8 <HAL_TIM_IC_CaptureCallback>
 80034dc:	e005      	b.n	80034ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f9ae 	bl	8003840 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f9b5 	bl	8003854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f003 0304 	and.w	r3, r3, #4
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d020      	beq.n	800353c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d01b      	beq.n	800353c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f06f 0204 	mvn.w	r2, #4
 800350c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2202      	movs	r2, #2
 8003512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fd fdc8 	bl	80010b8 <HAL_TIM_IC_CaptureCallback>
 8003528:	e005      	b.n	8003536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f988 	bl	8003840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f98f 	bl	8003854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b00      	cmp	r3, #0
 8003544:	d020      	beq.n	8003588 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d01b      	beq.n	8003588 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0208 	mvn.w	r2, #8
 8003558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2204      	movs	r2, #4
 800355e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7fd fda2 	bl	80010b8 <HAL_TIM_IC_CaptureCallback>
 8003574:	e005      	b.n	8003582 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f962 	bl	8003840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f969 	bl	8003854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b00      	cmp	r3, #0
 8003590:	d020      	beq.n	80035d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01b      	beq.n	80035d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0210 	mvn.w	r2, #16
 80035a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2208      	movs	r2, #8
 80035aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f7fd fd7c 	bl	80010b8 <HAL_TIM_IC_CaptureCallback>
 80035c0:	e005      	b.n	80035ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f93c 	bl	8003840 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f943 	bl	8003854 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00c      	beq.n	80035f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0201 	mvn.w	r2, #1
 80035f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f91a 	bl	800382c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00c      	beq.n	800361c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003608:	2b00      	cmp	r3, #0
 800360a:	d007      	beq.n	800361c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 fbb2 	bl	8003d80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00c      	beq.n	8003640 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800362c:	2b00      	cmp	r3, #0
 800362e:	d007      	beq.n	8003640 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f914 	bl	8003868 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00c      	beq.n	8003664 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f003 0320 	and.w	r3, r3, #32
 8003650:	2b00      	cmp	r3, #0
 8003652:	d007      	beq.n	8003664 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0220 	mvn.w	r2, #32
 800365c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fb84 	bl	8003d6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003686:	2302      	movs	r3, #2
 8003688:	e088      	b.n	800379c <HAL_TIM_IC_ConfigChannel+0x130>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d11b      	bne.n	80036d0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80036a8:	f000 f994 	bl	80039d4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	699a      	ldr	r2, [r3, #24]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 020c 	bic.w	r2, r2, #12
 80036ba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6999      	ldr	r1, [r3, #24]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	619a      	str	r2, [r3, #24]
 80036ce:	e060      	b.n	8003792 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d11c      	bne.n	8003710 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80036e6:	f000 f9e9 	bl	8003abc <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	699a      	ldr	r2, [r3, #24]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80036f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6999      	ldr	r1, [r3, #24]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	021a      	lsls	r2, r3, #8
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	619a      	str	r2, [r3, #24]
 800370e:	e040      	b.n	8003792 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b08      	cmp	r3, #8
 8003714:	d11b      	bne.n	800374e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003726:	f000 fa06 	bl	8003b36 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	69da      	ldr	r2, [r3, #28]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f022 020c 	bic.w	r2, r2, #12
 8003738:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69d9      	ldr	r1, [r3, #28]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	61da      	str	r2, [r3, #28]
 800374c:	e021      	b.n	8003792 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b0c      	cmp	r3, #12
 8003752:	d11c      	bne.n	800378e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003764:	f000 fa23 	bl	8003bae <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69da      	ldr	r2, [r3, #28]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003776:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69d9      	ldr	r1, [r3, #28]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	021a      	lsls	r2, r3, #8
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	430a      	orrs	r2, r1
 800378a:	61da      	str	r2, [r3, #28]
 800378c:	e001      	b.n	8003792 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800379a:	7dfb      	ldrb	r3, [r7, #23]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b0c      	cmp	r3, #12
 80037b6:	d831      	bhi.n	800381c <HAL_TIM_ReadCapturedValue+0x78>
 80037b8:	a201      	add	r2, pc, #4	@ (adr r2, 80037c0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80037ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037be:	bf00      	nop
 80037c0:	080037f5 	.word	0x080037f5
 80037c4:	0800381d 	.word	0x0800381d
 80037c8:	0800381d 	.word	0x0800381d
 80037cc:	0800381d 	.word	0x0800381d
 80037d0:	080037ff 	.word	0x080037ff
 80037d4:	0800381d 	.word	0x0800381d
 80037d8:	0800381d 	.word	0x0800381d
 80037dc:	0800381d 	.word	0x0800381d
 80037e0:	08003809 	.word	0x08003809
 80037e4:	0800381d 	.word	0x0800381d
 80037e8:	0800381d 	.word	0x0800381d
 80037ec:	0800381d 	.word	0x0800381d
 80037f0:	08003813 	.word	0x08003813
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037fa:	60fb      	str	r3, [r7, #12]

      break;
 80037fc:	e00f      	b.n	800381e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003804:	60fb      	str	r3, [r7, #12]

      break;
 8003806:	e00a      	b.n	800381e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800380e:	60fb      	str	r3, [r7, #12]

      break;
 8003810:	e005      	b.n	800381e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003818:	60fb      	str	r3, [r7, #12]

      break;
 800381a:	e000      	b.n	800381e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800381c:	bf00      	nop
  }

  return tmpreg;
 800381e:	68fb      	ldr	r3, [r7, #12]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3714      	adds	r7, #20
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a46      	ldr	r2, [pc, #280]	@ (80039a8 <TIM_Base_SetConfig+0x12c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d013      	beq.n	80038bc <TIM_Base_SetConfig+0x40>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800389a:	d00f      	beq.n	80038bc <TIM_Base_SetConfig+0x40>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a43      	ldr	r2, [pc, #268]	@ (80039ac <TIM_Base_SetConfig+0x130>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00b      	beq.n	80038bc <TIM_Base_SetConfig+0x40>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a42      	ldr	r2, [pc, #264]	@ (80039b0 <TIM_Base_SetConfig+0x134>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d007      	beq.n	80038bc <TIM_Base_SetConfig+0x40>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a41      	ldr	r2, [pc, #260]	@ (80039b4 <TIM_Base_SetConfig+0x138>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d003      	beq.n	80038bc <TIM_Base_SetConfig+0x40>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a40      	ldr	r2, [pc, #256]	@ (80039b8 <TIM_Base_SetConfig+0x13c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d108      	bne.n	80038ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a35      	ldr	r2, [pc, #212]	@ (80039a8 <TIM_Base_SetConfig+0x12c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d02b      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038dc:	d027      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a32      	ldr	r2, [pc, #200]	@ (80039ac <TIM_Base_SetConfig+0x130>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d023      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a31      	ldr	r2, [pc, #196]	@ (80039b0 <TIM_Base_SetConfig+0x134>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d01f      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a30      	ldr	r2, [pc, #192]	@ (80039b4 <TIM_Base_SetConfig+0x138>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d01b      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a2f      	ldr	r2, [pc, #188]	@ (80039b8 <TIM_Base_SetConfig+0x13c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d017      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a2e      	ldr	r2, [pc, #184]	@ (80039bc <TIM_Base_SetConfig+0x140>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d013      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a2d      	ldr	r2, [pc, #180]	@ (80039c0 <TIM_Base_SetConfig+0x144>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d00f      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a2c      	ldr	r2, [pc, #176]	@ (80039c4 <TIM_Base_SetConfig+0x148>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00b      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a2b      	ldr	r2, [pc, #172]	@ (80039c8 <TIM_Base_SetConfig+0x14c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d007      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a2a      	ldr	r2, [pc, #168]	@ (80039cc <TIM_Base_SetConfig+0x150>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d003      	beq.n	800392e <TIM_Base_SetConfig+0xb2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a29      	ldr	r2, [pc, #164]	@ (80039d0 <TIM_Base_SetConfig+0x154>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d108      	bne.n	8003940 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a10      	ldr	r2, [pc, #64]	@ (80039a8 <TIM_Base_SetConfig+0x12c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_Base_SetConfig+0xf8>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a12      	ldr	r2, [pc, #72]	@ (80039b8 <TIM_Base_SetConfig+0x13c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d103      	bne.n	800397c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	691a      	ldr	r2, [r3, #16]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	2b01      	cmp	r3, #1
 800398c:	d105      	bne.n	800399a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f023 0201 	bic.w	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	611a      	str	r2, [r3, #16]
  }
}
 800399a:	bf00      	nop
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40010000 	.word	0x40010000
 80039ac:	40000400 	.word	0x40000400
 80039b0:	40000800 	.word	0x40000800
 80039b4:	40000c00 	.word	0x40000c00
 80039b8:	40010400 	.word	0x40010400
 80039bc:	40014000 	.word	0x40014000
 80039c0:	40014400 	.word	0x40014400
 80039c4:	40014800 	.word	0x40014800
 80039c8:	40001800 	.word	0x40001800
 80039cc:	40001c00 	.word	0x40001c00
 80039d0:	40002000 	.word	0x40002000

080039d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b087      	sub	sp, #28
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
 80039e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a1b      	ldr	r3, [r3, #32]
 80039e6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	f023 0201 	bic.w	r2, r3, #1
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4a28      	ldr	r2, [pc, #160]	@ (8003aa0 <TIM_TI1_SetConfig+0xcc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d01b      	beq.n	8003a3a <TIM_TI1_SetConfig+0x66>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a08:	d017      	beq.n	8003a3a <TIM_TI1_SetConfig+0x66>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4a25      	ldr	r2, [pc, #148]	@ (8003aa4 <TIM_TI1_SetConfig+0xd0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d013      	beq.n	8003a3a <TIM_TI1_SetConfig+0x66>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4a24      	ldr	r2, [pc, #144]	@ (8003aa8 <TIM_TI1_SetConfig+0xd4>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00f      	beq.n	8003a3a <TIM_TI1_SetConfig+0x66>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	4a23      	ldr	r2, [pc, #140]	@ (8003aac <TIM_TI1_SetConfig+0xd8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d00b      	beq.n	8003a3a <TIM_TI1_SetConfig+0x66>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4a22      	ldr	r2, [pc, #136]	@ (8003ab0 <TIM_TI1_SetConfig+0xdc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d007      	beq.n	8003a3a <TIM_TI1_SetConfig+0x66>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4a21      	ldr	r2, [pc, #132]	@ (8003ab4 <TIM_TI1_SetConfig+0xe0>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d003      	beq.n	8003a3a <TIM_TI1_SetConfig+0x66>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4a20      	ldr	r2, [pc, #128]	@ (8003ab8 <TIM_TI1_SetConfig+0xe4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <TIM_TI1_SetConfig+0x6a>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <TIM_TI1_SetConfig+0x6c>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f023 0303 	bic.w	r3, r3, #3
 8003a4a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	e003      	b.n	8003a5e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	f023 030a 	bic.w	r3, r3, #10
 8003a78:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f003 030a 	and.w	r3, r3, #10
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	697a      	ldr	r2, [r7, #20]
 8003a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	621a      	str	r2, [r3, #32]
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40010000 	.word	0x40010000
 8003aa4:	40000400 	.word	0x40000400
 8003aa8:	40000800 	.word	0x40000800
 8003aac:	40000c00 	.word	0x40000c00
 8003ab0:	40010400 	.word	0x40010400
 8003ab4:	40014000 	.word	0x40014000
 8003ab8:	40001800 	.word	0x40001800

08003abc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b087      	sub	sp, #28
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
 8003ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	f023 0210 	bic.w	r2, r3, #16
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ae8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	021b      	lsls	r3, r3, #8
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	031b      	lsls	r3, r3, #12
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003b0e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003b18:	697a      	ldr	r2, [r7, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	621a      	str	r2, [r3, #32]
}
 8003b2a:	bf00      	nop
 8003b2c:	371c      	adds	r7, #28
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr

08003b36 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b087      	sub	sp, #28
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	60f8      	str	r0, [r7, #12]
 8003b3e:	60b9      	str	r1, [r7, #8]
 8003b40:	607a      	str	r2, [r7, #4]
 8003b42:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f023 0303 	bic.w	r3, r3, #3
 8003b62:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b72:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003b86:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	621a      	str	r2, [r3, #32]
}
 8003ba2:	bf00      	nop
 8003ba4:	371c      	adds	r7, #28
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b087      	sub	sp, #28
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
 8003bba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bda:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003bec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	031b      	lsls	r3, r3, #12
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003c00:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	031b      	lsls	r3, r3, #12
 8003c06:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003c0a:	697a      	ldr	r2, [r7, #20]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	697a      	ldr	r2, [r7, #20]
 8003c1a:	621a      	str	r2, [r3, #32]
}
 8003c1c:	bf00      	nop
 8003c1e:	371c      	adds	r7, #28
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a1a      	ldr	r2, [r3, #32]
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	401a      	ands	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a1a      	ldr	r2, [r3, #32]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f003 031f 	and.w	r3, r3, #31
 8003c5a:	6879      	ldr	r1, [r7, #4]
 8003c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c60:	431a      	orrs	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	621a      	str	r2, [r3, #32]
}
 8003c66:	bf00      	nop
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
	...

08003c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d101      	bne.n	8003c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e05a      	b.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cb2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a21      	ldr	r2, [pc, #132]	@ (8003d50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d022      	beq.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd8:	d01d      	beq.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a1d      	ldr	r2, [pc, #116]	@ (8003d54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d018      	beq.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a1b      	ldr	r2, [pc, #108]	@ (8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d013      	beq.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a1a      	ldr	r2, [pc, #104]	@ (8003d5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00e      	beq.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a18      	ldr	r2, [pc, #96]	@ (8003d60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d009      	beq.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a17      	ldr	r2, [pc, #92]	@ (8003d64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d004      	beq.n	8003d16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a15      	ldr	r2, [pc, #84]	@ (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d10c      	bne.n	8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40010000 	.word	0x40010000
 8003d54:	40000400 	.word	0x40000400
 8003d58:	40000800 	.word	0x40000800
 8003d5c:	40000c00 	.word	0x40000c00
 8003d60:	40010400 	.word	0x40010400
 8003d64:	40014000 	.word	0x40014000
 8003d68:	40001800 	.word	0x40001800

08003d6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <__cvt>:
 8003d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d98:	ec57 6b10 	vmov	r6, r7, d0
 8003d9c:	2f00      	cmp	r7, #0
 8003d9e:	460c      	mov	r4, r1
 8003da0:	4619      	mov	r1, r3
 8003da2:	463b      	mov	r3, r7
 8003da4:	bfbb      	ittet	lt
 8003da6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003daa:	461f      	movlt	r7, r3
 8003dac:	2300      	movge	r3, #0
 8003dae:	232d      	movlt	r3, #45	@ 0x2d
 8003db0:	700b      	strb	r3, [r1, #0]
 8003db2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003db4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003db8:	4691      	mov	r9, r2
 8003dba:	f023 0820 	bic.w	r8, r3, #32
 8003dbe:	bfbc      	itt	lt
 8003dc0:	4632      	movlt	r2, r6
 8003dc2:	4616      	movlt	r6, r2
 8003dc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003dc8:	d005      	beq.n	8003dd6 <__cvt+0x42>
 8003dca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003dce:	d100      	bne.n	8003dd2 <__cvt+0x3e>
 8003dd0:	3401      	adds	r4, #1
 8003dd2:	2102      	movs	r1, #2
 8003dd4:	e000      	b.n	8003dd8 <__cvt+0x44>
 8003dd6:	2103      	movs	r1, #3
 8003dd8:	ab03      	add	r3, sp, #12
 8003dda:	9301      	str	r3, [sp, #4]
 8003ddc:	ab02      	add	r3, sp, #8
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	ec47 6b10 	vmov	d0, r6, r7
 8003de4:	4653      	mov	r3, sl
 8003de6:	4622      	mov	r2, r4
 8003de8:	f000 fe5a 	bl	8004aa0 <_dtoa_r>
 8003dec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003df0:	4605      	mov	r5, r0
 8003df2:	d119      	bne.n	8003e28 <__cvt+0x94>
 8003df4:	f019 0f01 	tst.w	r9, #1
 8003df8:	d00e      	beq.n	8003e18 <__cvt+0x84>
 8003dfa:	eb00 0904 	add.w	r9, r0, r4
 8003dfe:	2200      	movs	r2, #0
 8003e00:	2300      	movs	r3, #0
 8003e02:	4630      	mov	r0, r6
 8003e04:	4639      	mov	r1, r7
 8003e06:	f7fc fe5f 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e0a:	b108      	cbz	r0, 8003e10 <__cvt+0x7c>
 8003e0c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e10:	2230      	movs	r2, #48	@ 0x30
 8003e12:	9b03      	ldr	r3, [sp, #12]
 8003e14:	454b      	cmp	r3, r9
 8003e16:	d31e      	bcc.n	8003e56 <__cvt+0xc2>
 8003e18:	9b03      	ldr	r3, [sp, #12]
 8003e1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003e1c:	1b5b      	subs	r3, r3, r5
 8003e1e:	4628      	mov	r0, r5
 8003e20:	6013      	str	r3, [r2, #0]
 8003e22:	b004      	add	sp, #16
 8003e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e2c:	eb00 0904 	add.w	r9, r0, r4
 8003e30:	d1e5      	bne.n	8003dfe <__cvt+0x6a>
 8003e32:	7803      	ldrb	r3, [r0, #0]
 8003e34:	2b30      	cmp	r3, #48	@ 0x30
 8003e36:	d10a      	bne.n	8003e4e <__cvt+0xba>
 8003e38:	2200      	movs	r2, #0
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	4630      	mov	r0, r6
 8003e3e:	4639      	mov	r1, r7
 8003e40:	f7fc fe42 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e44:	b918      	cbnz	r0, 8003e4e <__cvt+0xba>
 8003e46:	f1c4 0401 	rsb	r4, r4, #1
 8003e4a:	f8ca 4000 	str.w	r4, [sl]
 8003e4e:	f8da 3000 	ldr.w	r3, [sl]
 8003e52:	4499      	add	r9, r3
 8003e54:	e7d3      	b.n	8003dfe <__cvt+0x6a>
 8003e56:	1c59      	adds	r1, r3, #1
 8003e58:	9103      	str	r1, [sp, #12]
 8003e5a:	701a      	strb	r2, [r3, #0]
 8003e5c:	e7d9      	b.n	8003e12 <__cvt+0x7e>

08003e5e <__exponent>:
 8003e5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e60:	2900      	cmp	r1, #0
 8003e62:	bfba      	itte	lt
 8003e64:	4249      	neglt	r1, r1
 8003e66:	232d      	movlt	r3, #45	@ 0x2d
 8003e68:	232b      	movge	r3, #43	@ 0x2b
 8003e6a:	2909      	cmp	r1, #9
 8003e6c:	7002      	strb	r2, [r0, #0]
 8003e6e:	7043      	strb	r3, [r0, #1]
 8003e70:	dd29      	ble.n	8003ec6 <__exponent+0x68>
 8003e72:	f10d 0307 	add.w	r3, sp, #7
 8003e76:	461d      	mov	r5, r3
 8003e78:	270a      	movs	r7, #10
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	fbb1 f6f7 	udiv	r6, r1, r7
 8003e80:	fb07 1416 	mls	r4, r7, r6, r1
 8003e84:	3430      	adds	r4, #48	@ 0x30
 8003e86:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003e8a:	460c      	mov	r4, r1
 8003e8c:	2c63      	cmp	r4, #99	@ 0x63
 8003e8e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8003e92:	4631      	mov	r1, r6
 8003e94:	dcf1      	bgt.n	8003e7a <__exponent+0x1c>
 8003e96:	3130      	adds	r1, #48	@ 0x30
 8003e98:	1e94      	subs	r4, r2, #2
 8003e9a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003e9e:	1c41      	adds	r1, r0, #1
 8003ea0:	4623      	mov	r3, r4
 8003ea2:	42ab      	cmp	r3, r5
 8003ea4:	d30a      	bcc.n	8003ebc <__exponent+0x5e>
 8003ea6:	f10d 0309 	add.w	r3, sp, #9
 8003eaa:	1a9b      	subs	r3, r3, r2
 8003eac:	42ac      	cmp	r4, r5
 8003eae:	bf88      	it	hi
 8003eb0:	2300      	movhi	r3, #0
 8003eb2:	3302      	adds	r3, #2
 8003eb4:	4403      	add	r3, r0
 8003eb6:	1a18      	subs	r0, r3, r0
 8003eb8:	b003      	add	sp, #12
 8003eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ebc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003ec0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003ec4:	e7ed      	b.n	8003ea2 <__exponent+0x44>
 8003ec6:	2330      	movs	r3, #48	@ 0x30
 8003ec8:	3130      	adds	r1, #48	@ 0x30
 8003eca:	7083      	strb	r3, [r0, #2]
 8003ecc:	70c1      	strb	r1, [r0, #3]
 8003ece:	1d03      	adds	r3, r0, #4
 8003ed0:	e7f1      	b.n	8003eb6 <__exponent+0x58>
	...

08003ed4 <_printf_float>:
 8003ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed8:	b08d      	sub	sp, #52	@ 0x34
 8003eda:	460c      	mov	r4, r1
 8003edc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003ee0:	4616      	mov	r6, r2
 8003ee2:	461f      	mov	r7, r3
 8003ee4:	4605      	mov	r5, r0
 8003ee6:	f000 fcdb 	bl	80048a0 <_localeconv_r>
 8003eea:	6803      	ldr	r3, [r0, #0]
 8003eec:	9304      	str	r3, [sp, #16]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fc f9be 	bl	8000270 <strlen>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ef8:	f8d8 3000 	ldr.w	r3, [r8]
 8003efc:	9005      	str	r0, [sp, #20]
 8003efe:	3307      	adds	r3, #7
 8003f00:	f023 0307 	bic.w	r3, r3, #7
 8003f04:	f103 0208 	add.w	r2, r3, #8
 8003f08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003f0c:	f8d4 b000 	ldr.w	fp, [r4]
 8003f10:	f8c8 2000 	str.w	r2, [r8]
 8003f14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003f1c:	9307      	str	r3, [sp, #28]
 8003f1e:	f8cd 8018 	str.w	r8, [sp, #24]
 8003f22:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003f26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f2a:	4b9c      	ldr	r3, [pc, #624]	@ (800419c <_printf_float+0x2c8>)
 8003f2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f30:	f7fc fdfc 	bl	8000b2c <__aeabi_dcmpun>
 8003f34:	bb70      	cbnz	r0, 8003f94 <_printf_float+0xc0>
 8003f36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f3a:	4b98      	ldr	r3, [pc, #608]	@ (800419c <_printf_float+0x2c8>)
 8003f3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f40:	f7fc fdd6 	bl	8000af0 <__aeabi_dcmple>
 8003f44:	bb30      	cbnz	r0, 8003f94 <_printf_float+0xc0>
 8003f46:	2200      	movs	r2, #0
 8003f48:	2300      	movs	r3, #0
 8003f4a:	4640      	mov	r0, r8
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	f7fc fdc5 	bl	8000adc <__aeabi_dcmplt>
 8003f52:	b110      	cbz	r0, 8003f5a <_printf_float+0x86>
 8003f54:	232d      	movs	r3, #45	@ 0x2d
 8003f56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f5a:	4a91      	ldr	r2, [pc, #580]	@ (80041a0 <_printf_float+0x2cc>)
 8003f5c:	4b91      	ldr	r3, [pc, #580]	@ (80041a4 <_printf_float+0x2d0>)
 8003f5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003f62:	bf8c      	ite	hi
 8003f64:	4690      	movhi	r8, r2
 8003f66:	4698      	movls	r8, r3
 8003f68:	2303      	movs	r3, #3
 8003f6a:	6123      	str	r3, [r4, #16]
 8003f6c:	f02b 0304 	bic.w	r3, fp, #4
 8003f70:	6023      	str	r3, [r4, #0]
 8003f72:	f04f 0900 	mov.w	r9, #0
 8003f76:	9700      	str	r7, [sp, #0]
 8003f78:	4633      	mov	r3, r6
 8003f7a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f000 f9d2 	bl	8004328 <_printf_common>
 8003f84:	3001      	adds	r0, #1
 8003f86:	f040 808d 	bne.w	80040a4 <_printf_float+0x1d0>
 8003f8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f8e:	b00d      	add	sp, #52	@ 0x34
 8003f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f94:	4642      	mov	r2, r8
 8003f96:	464b      	mov	r3, r9
 8003f98:	4640      	mov	r0, r8
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	f7fc fdc6 	bl	8000b2c <__aeabi_dcmpun>
 8003fa0:	b140      	cbz	r0, 8003fb4 <_printf_float+0xe0>
 8003fa2:	464b      	mov	r3, r9
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bfbc      	itt	lt
 8003fa8:	232d      	movlt	r3, #45	@ 0x2d
 8003faa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003fae:	4a7e      	ldr	r2, [pc, #504]	@ (80041a8 <_printf_float+0x2d4>)
 8003fb0:	4b7e      	ldr	r3, [pc, #504]	@ (80041ac <_printf_float+0x2d8>)
 8003fb2:	e7d4      	b.n	8003f5e <_printf_float+0x8a>
 8003fb4:	6863      	ldr	r3, [r4, #4]
 8003fb6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003fba:	9206      	str	r2, [sp, #24]
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	d13b      	bne.n	8004038 <_printf_float+0x164>
 8003fc0:	2306      	movs	r3, #6
 8003fc2:	6063      	str	r3, [r4, #4]
 8003fc4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003fc8:	2300      	movs	r3, #0
 8003fca:	6022      	str	r2, [r4, #0]
 8003fcc:	9303      	str	r3, [sp, #12]
 8003fce:	ab0a      	add	r3, sp, #40	@ 0x28
 8003fd0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003fd4:	ab09      	add	r3, sp, #36	@ 0x24
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	6861      	ldr	r1, [r4, #4]
 8003fda:	ec49 8b10 	vmov	d0, r8, r9
 8003fde:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	f7ff fed6 	bl	8003d94 <__cvt>
 8003fe8:	9b06      	ldr	r3, [sp, #24]
 8003fea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003fec:	2b47      	cmp	r3, #71	@ 0x47
 8003fee:	4680      	mov	r8, r0
 8003ff0:	d129      	bne.n	8004046 <_printf_float+0x172>
 8003ff2:	1cc8      	adds	r0, r1, #3
 8003ff4:	db02      	blt.n	8003ffc <_printf_float+0x128>
 8003ff6:	6863      	ldr	r3, [r4, #4]
 8003ff8:	4299      	cmp	r1, r3
 8003ffa:	dd41      	ble.n	8004080 <_printf_float+0x1ac>
 8003ffc:	f1aa 0a02 	sub.w	sl, sl, #2
 8004000:	fa5f fa8a 	uxtb.w	sl, sl
 8004004:	3901      	subs	r1, #1
 8004006:	4652      	mov	r2, sl
 8004008:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800400c:	9109      	str	r1, [sp, #36]	@ 0x24
 800400e:	f7ff ff26 	bl	8003e5e <__exponent>
 8004012:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004014:	1813      	adds	r3, r2, r0
 8004016:	2a01      	cmp	r2, #1
 8004018:	4681      	mov	r9, r0
 800401a:	6123      	str	r3, [r4, #16]
 800401c:	dc02      	bgt.n	8004024 <_printf_float+0x150>
 800401e:	6822      	ldr	r2, [r4, #0]
 8004020:	07d2      	lsls	r2, r2, #31
 8004022:	d501      	bpl.n	8004028 <_printf_float+0x154>
 8004024:	3301      	adds	r3, #1
 8004026:	6123      	str	r3, [r4, #16]
 8004028:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0a2      	beq.n	8003f76 <_printf_float+0xa2>
 8004030:	232d      	movs	r3, #45	@ 0x2d
 8004032:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004036:	e79e      	b.n	8003f76 <_printf_float+0xa2>
 8004038:	9a06      	ldr	r2, [sp, #24]
 800403a:	2a47      	cmp	r2, #71	@ 0x47
 800403c:	d1c2      	bne.n	8003fc4 <_printf_float+0xf0>
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1c0      	bne.n	8003fc4 <_printf_float+0xf0>
 8004042:	2301      	movs	r3, #1
 8004044:	e7bd      	b.n	8003fc2 <_printf_float+0xee>
 8004046:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800404a:	d9db      	bls.n	8004004 <_printf_float+0x130>
 800404c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004050:	d118      	bne.n	8004084 <_printf_float+0x1b0>
 8004052:	2900      	cmp	r1, #0
 8004054:	6863      	ldr	r3, [r4, #4]
 8004056:	dd0b      	ble.n	8004070 <_printf_float+0x19c>
 8004058:	6121      	str	r1, [r4, #16]
 800405a:	b913      	cbnz	r3, 8004062 <_printf_float+0x18e>
 800405c:	6822      	ldr	r2, [r4, #0]
 800405e:	07d0      	lsls	r0, r2, #31
 8004060:	d502      	bpl.n	8004068 <_printf_float+0x194>
 8004062:	3301      	adds	r3, #1
 8004064:	440b      	add	r3, r1
 8004066:	6123      	str	r3, [r4, #16]
 8004068:	65a1      	str	r1, [r4, #88]	@ 0x58
 800406a:	f04f 0900 	mov.w	r9, #0
 800406e:	e7db      	b.n	8004028 <_printf_float+0x154>
 8004070:	b913      	cbnz	r3, 8004078 <_printf_float+0x1a4>
 8004072:	6822      	ldr	r2, [r4, #0]
 8004074:	07d2      	lsls	r2, r2, #31
 8004076:	d501      	bpl.n	800407c <_printf_float+0x1a8>
 8004078:	3302      	adds	r3, #2
 800407a:	e7f4      	b.n	8004066 <_printf_float+0x192>
 800407c:	2301      	movs	r3, #1
 800407e:	e7f2      	b.n	8004066 <_printf_float+0x192>
 8004080:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004086:	4299      	cmp	r1, r3
 8004088:	db05      	blt.n	8004096 <_printf_float+0x1c2>
 800408a:	6823      	ldr	r3, [r4, #0]
 800408c:	6121      	str	r1, [r4, #16]
 800408e:	07d8      	lsls	r0, r3, #31
 8004090:	d5ea      	bpl.n	8004068 <_printf_float+0x194>
 8004092:	1c4b      	adds	r3, r1, #1
 8004094:	e7e7      	b.n	8004066 <_printf_float+0x192>
 8004096:	2900      	cmp	r1, #0
 8004098:	bfd4      	ite	le
 800409a:	f1c1 0202 	rsble	r2, r1, #2
 800409e:	2201      	movgt	r2, #1
 80040a0:	4413      	add	r3, r2
 80040a2:	e7e0      	b.n	8004066 <_printf_float+0x192>
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	055a      	lsls	r2, r3, #21
 80040a8:	d407      	bmi.n	80040ba <_printf_float+0x1e6>
 80040aa:	6923      	ldr	r3, [r4, #16]
 80040ac:	4642      	mov	r2, r8
 80040ae:	4631      	mov	r1, r6
 80040b0:	4628      	mov	r0, r5
 80040b2:	47b8      	blx	r7
 80040b4:	3001      	adds	r0, #1
 80040b6:	d12b      	bne.n	8004110 <_printf_float+0x23c>
 80040b8:	e767      	b.n	8003f8a <_printf_float+0xb6>
 80040ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80040be:	f240 80dd 	bls.w	800427c <_printf_float+0x3a8>
 80040c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80040c6:	2200      	movs	r2, #0
 80040c8:	2300      	movs	r3, #0
 80040ca:	f7fc fcfd 	bl	8000ac8 <__aeabi_dcmpeq>
 80040ce:	2800      	cmp	r0, #0
 80040d0:	d033      	beq.n	800413a <_printf_float+0x266>
 80040d2:	4a37      	ldr	r2, [pc, #220]	@ (80041b0 <_printf_float+0x2dc>)
 80040d4:	2301      	movs	r3, #1
 80040d6:	4631      	mov	r1, r6
 80040d8:	4628      	mov	r0, r5
 80040da:	47b8      	blx	r7
 80040dc:	3001      	adds	r0, #1
 80040de:	f43f af54 	beq.w	8003f8a <_printf_float+0xb6>
 80040e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80040e6:	4543      	cmp	r3, r8
 80040e8:	db02      	blt.n	80040f0 <_printf_float+0x21c>
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	07d8      	lsls	r0, r3, #31
 80040ee:	d50f      	bpl.n	8004110 <_printf_float+0x23c>
 80040f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040f4:	4631      	mov	r1, r6
 80040f6:	4628      	mov	r0, r5
 80040f8:	47b8      	blx	r7
 80040fa:	3001      	adds	r0, #1
 80040fc:	f43f af45 	beq.w	8003f8a <_printf_float+0xb6>
 8004100:	f04f 0900 	mov.w	r9, #0
 8004104:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004108:	f104 0a1a 	add.w	sl, r4, #26
 800410c:	45c8      	cmp	r8, r9
 800410e:	dc09      	bgt.n	8004124 <_printf_float+0x250>
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	079b      	lsls	r3, r3, #30
 8004114:	f100 8103 	bmi.w	800431e <_printf_float+0x44a>
 8004118:	68e0      	ldr	r0, [r4, #12]
 800411a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800411c:	4298      	cmp	r0, r3
 800411e:	bfb8      	it	lt
 8004120:	4618      	movlt	r0, r3
 8004122:	e734      	b.n	8003f8e <_printf_float+0xba>
 8004124:	2301      	movs	r3, #1
 8004126:	4652      	mov	r2, sl
 8004128:	4631      	mov	r1, r6
 800412a:	4628      	mov	r0, r5
 800412c:	47b8      	blx	r7
 800412e:	3001      	adds	r0, #1
 8004130:	f43f af2b 	beq.w	8003f8a <_printf_float+0xb6>
 8004134:	f109 0901 	add.w	r9, r9, #1
 8004138:	e7e8      	b.n	800410c <_printf_float+0x238>
 800413a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800413c:	2b00      	cmp	r3, #0
 800413e:	dc39      	bgt.n	80041b4 <_printf_float+0x2e0>
 8004140:	4a1b      	ldr	r2, [pc, #108]	@ (80041b0 <_printf_float+0x2dc>)
 8004142:	2301      	movs	r3, #1
 8004144:	4631      	mov	r1, r6
 8004146:	4628      	mov	r0, r5
 8004148:	47b8      	blx	r7
 800414a:	3001      	adds	r0, #1
 800414c:	f43f af1d 	beq.w	8003f8a <_printf_float+0xb6>
 8004150:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004154:	ea59 0303 	orrs.w	r3, r9, r3
 8004158:	d102      	bne.n	8004160 <_printf_float+0x28c>
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	07d9      	lsls	r1, r3, #31
 800415e:	d5d7      	bpl.n	8004110 <_printf_float+0x23c>
 8004160:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004164:	4631      	mov	r1, r6
 8004166:	4628      	mov	r0, r5
 8004168:	47b8      	blx	r7
 800416a:	3001      	adds	r0, #1
 800416c:	f43f af0d 	beq.w	8003f8a <_printf_float+0xb6>
 8004170:	f04f 0a00 	mov.w	sl, #0
 8004174:	f104 0b1a 	add.w	fp, r4, #26
 8004178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800417a:	425b      	negs	r3, r3
 800417c:	4553      	cmp	r3, sl
 800417e:	dc01      	bgt.n	8004184 <_printf_float+0x2b0>
 8004180:	464b      	mov	r3, r9
 8004182:	e793      	b.n	80040ac <_printf_float+0x1d8>
 8004184:	2301      	movs	r3, #1
 8004186:	465a      	mov	r2, fp
 8004188:	4631      	mov	r1, r6
 800418a:	4628      	mov	r0, r5
 800418c:	47b8      	blx	r7
 800418e:	3001      	adds	r0, #1
 8004190:	f43f aefb 	beq.w	8003f8a <_printf_float+0xb6>
 8004194:	f10a 0a01 	add.w	sl, sl, #1
 8004198:	e7ee      	b.n	8004178 <_printf_float+0x2a4>
 800419a:	bf00      	nop
 800419c:	7fefffff 	.word	0x7fefffff
 80041a0:	08006aa0 	.word	0x08006aa0
 80041a4:	08006a9c 	.word	0x08006a9c
 80041a8:	08006aa8 	.word	0x08006aa8
 80041ac:	08006aa4 	.word	0x08006aa4
 80041b0:	08006aac 	.word	0x08006aac
 80041b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80041ba:	4553      	cmp	r3, sl
 80041bc:	bfa8      	it	ge
 80041be:	4653      	movge	r3, sl
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	4699      	mov	r9, r3
 80041c4:	dc36      	bgt.n	8004234 <_printf_float+0x360>
 80041c6:	f04f 0b00 	mov.w	fp, #0
 80041ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041ce:	f104 021a 	add.w	r2, r4, #26
 80041d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80041d4:	9306      	str	r3, [sp, #24]
 80041d6:	eba3 0309 	sub.w	r3, r3, r9
 80041da:	455b      	cmp	r3, fp
 80041dc:	dc31      	bgt.n	8004242 <_printf_float+0x36e>
 80041de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041e0:	459a      	cmp	sl, r3
 80041e2:	dc3a      	bgt.n	800425a <_printf_float+0x386>
 80041e4:	6823      	ldr	r3, [r4, #0]
 80041e6:	07da      	lsls	r2, r3, #31
 80041e8:	d437      	bmi.n	800425a <_printf_float+0x386>
 80041ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041ec:	ebaa 0903 	sub.w	r9, sl, r3
 80041f0:	9b06      	ldr	r3, [sp, #24]
 80041f2:	ebaa 0303 	sub.w	r3, sl, r3
 80041f6:	4599      	cmp	r9, r3
 80041f8:	bfa8      	it	ge
 80041fa:	4699      	movge	r9, r3
 80041fc:	f1b9 0f00 	cmp.w	r9, #0
 8004200:	dc33      	bgt.n	800426a <_printf_float+0x396>
 8004202:	f04f 0800 	mov.w	r8, #0
 8004206:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800420a:	f104 0b1a 	add.w	fp, r4, #26
 800420e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004210:	ebaa 0303 	sub.w	r3, sl, r3
 8004214:	eba3 0309 	sub.w	r3, r3, r9
 8004218:	4543      	cmp	r3, r8
 800421a:	f77f af79 	ble.w	8004110 <_printf_float+0x23c>
 800421e:	2301      	movs	r3, #1
 8004220:	465a      	mov	r2, fp
 8004222:	4631      	mov	r1, r6
 8004224:	4628      	mov	r0, r5
 8004226:	47b8      	blx	r7
 8004228:	3001      	adds	r0, #1
 800422a:	f43f aeae 	beq.w	8003f8a <_printf_float+0xb6>
 800422e:	f108 0801 	add.w	r8, r8, #1
 8004232:	e7ec      	b.n	800420e <_printf_float+0x33a>
 8004234:	4642      	mov	r2, r8
 8004236:	4631      	mov	r1, r6
 8004238:	4628      	mov	r0, r5
 800423a:	47b8      	blx	r7
 800423c:	3001      	adds	r0, #1
 800423e:	d1c2      	bne.n	80041c6 <_printf_float+0x2f2>
 8004240:	e6a3      	b.n	8003f8a <_printf_float+0xb6>
 8004242:	2301      	movs	r3, #1
 8004244:	4631      	mov	r1, r6
 8004246:	4628      	mov	r0, r5
 8004248:	9206      	str	r2, [sp, #24]
 800424a:	47b8      	blx	r7
 800424c:	3001      	adds	r0, #1
 800424e:	f43f ae9c 	beq.w	8003f8a <_printf_float+0xb6>
 8004252:	9a06      	ldr	r2, [sp, #24]
 8004254:	f10b 0b01 	add.w	fp, fp, #1
 8004258:	e7bb      	b.n	80041d2 <_printf_float+0x2fe>
 800425a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800425e:	4631      	mov	r1, r6
 8004260:	4628      	mov	r0, r5
 8004262:	47b8      	blx	r7
 8004264:	3001      	adds	r0, #1
 8004266:	d1c0      	bne.n	80041ea <_printf_float+0x316>
 8004268:	e68f      	b.n	8003f8a <_printf_float+0xb6>
 800426a:	9a06      	ldr	r2, [sp, #24]
 800426c:	464b      	mov	r3, r9
 800426e:	4442      	add	r2, r8
 8004270:	4631      	mov	r1, r6
 8004272:	4628      	mov	r0, r5
 8004274:	47b8      	blx	r7
 8004276:	3001      	adds	r0, #1
 8004278:	d1c3      	bne.n	8004202 <_printf_float+0x32e>
 800427a:	e686      	b.n	8003f8a <_printf_float+0xb6>
 800427c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004280:	f1ba 0f01 	cmp.w	sl, #1
 8004284:	dc01      	bgt.n	800428a <_printf_float+0x3b6>
 8004286:	07db      	lsls	r3, r3, #31
 8004288:	d536      	bpl.n	80042f8 <_printf_float+0x424>
 800428a:	2301      	movs	r3, #1
 800428c:	4642      	mov	r2, r8
 800428e:	4631      	mov	r1, r6
 8004290:	4628      	mov	r0, r5
 8004292:	47b8      	blx	r7
 8004294:	3001      	adds	r0, #1
 8004296:	f43f ae78 	beq.w	8003f8a <_printf_float+0xb6>
 800429a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800429e:	4631      	mov	r1, r6
 80042a0:	4628      	mov	r0, r5
 80042a2:	47b8      	blx	r7
 80042a4:	3001      	adds	r0, #1
 80042a6:	f43f ae70 	beq.w	8003f8a <_printf_float+0xb6>
 80042aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80042ae:	2200      	movs	r2, #0
 80042b0:	2300      	movs	r3, #0
 80042b2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80042b6:	f7fc fc07 	bl	8000ac8 <__aeabi_dcmpeq>
 80042ba:	b9c0      	cbnz	r0, 80042ee <_printf_float+0x41a>
 80042bc:	4653      	mov	r3, sl
 80042be:	f108 0201 	add.w	r2, r8, #1
 80042c2:	4631      	mov	r1, r6
 80042c4:	4628      	mov	r0, r5
 80042c6:	47b8      	blx	r7
 80042c8:	3001      	adds	r0, #1
 80042ca:	d10c      	bne.n	80042e6 <_printf_float+0x412>
 80042cc:	e65d      	b.n	8003f8a <_printf_float+0xb6>
 80042ce:	2301      	movs	r3, #1
 80042d0:	465a      	mov	r2, fp
 80042d2:	4631      	mov	r1, r6
 80042d4:	4628      	mov	r0, r5
 80042d6:	47b8      	blx	r7
 80042d8:	3001      	adds	r0, #1
 80042da:	f43f ae56 	beq.w	8003f8a <_printf_float+0xb6>
 80042de:	f108 0801 	add.w	r8, r8, #1
 80042e2:	45d0      	cmp	r8, sl
 80042e4:	dbf3      	blt.n	80042ce <_printf_float+0x3fa>
 80042e6:	464b      	mov	r3, r9
 80042e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80042ec:	e6df      	b.n	80040ae <_printf_float+0x1da>
 80042ee:	f04f 0800 	mov.w	r8, #0
 80042f2:	f104 0b1a 	add.w	fp, r4, #26
 80042f6:	e7f4      	b.n	80042e2 <_printf_float+0x40e>
 80042f8:	2301      	movs	r3, #1
 80042fa:	4642      	mov	r2, r8
 80042fc:	e7e1      	b.n	80042c2 <_printf_float+0x3ee>
 80042fe:	2301      	movs	r3, #1
 8004300:	464a      	mov	r2, r9
 8004302:	4631      	mov	r1, r6
 8004304:	4628      	mov	r0, r5
 8004306:	47b8      	blx	r7
 8004308:	3001      	adds	r0, #1
 800430a:	f43f ae3e 	beq.w	8003f8a <_printf_float+0xb6>
 800430e:	f108 0801 	add.w	r8, r8, #1
 8004312:	68e3      	ldr	r3, [r4, #12]
 8004314:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004316:	1a5b      	subs	r3, r3, r1
 8004318:	4543      	cmp	r3, r8
 800431a:	dcf0      	bgt.n	80042fe <_printf_float+0x42a>
 800431c:	e6fc      	b.n	8004118 <_printf_float+0x244>
 800431e:	f04f 0800 	mov.w	r8, #0
 8004322:	f104 0919 	add.w	r9, r4, #25
 8004326:	e7f4      	b.n	8004312 <_printf_float+0x43e>

08004328 <_printf_common>:
 8004328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800432c:	4616      	mov	r6, r2
 800432e:	4698      	mov	r8, r3
 8004330:	688a      	ldr	r2, [r1, #8]
 8004332:	690b      	ldr	r3, [r1, #16]
 8004334:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004338:	4293      	cmp	r3, r2
 800433a:	bfb8      	it	lt
 800433c:	4613      	movlt	r3, r2
 800433e:	6033      	str	r3, [r6, #0]
 8004340:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004344:	4607      	mov	r7, r0
 8004346:	460c      	mov	r4, r1
 8004348:	b10a      	cbz	r2, 800434e <_printf_common+0x26>
 800434a:	3301      	adds	r3, #1
 800434c:	6033      	str	r3, [r6, #0]
 800434e:	6823      	ldr	r3, [r4, #0]
 8004350:	0699      	lsls	r1, r3, #26
 8004352:	bf42      	ittt	mi
 8004354:	6833      	ldrmi	r3, [r6, #0]
 8004356:	3302      	addmi	r3, #2
 8004358:	6033      	strmi	r3, [r6, #0]
 800435a:	6825      	ldr	r5, [r4, #0]
 800435c:	f015 0506 	ands.w	r5, r5, #6
 8004360:	d106      	bne.n	8004370 <_printf_common+0x48>
 8004362:	f104 0a19 	add.w	sl, r4, #25
 8004366:	68e3      	ldr	r3, [r4, #12]
 8004368:	6832      	ldr	r2, [r6, #0]
 800436a:	1a9b      	subs	r3, r3, r2
 800436c:	42ab      	cmp	r3, r5
 800436e:	dc26      	bgt.n	80043be <_printf_common+0x96>
 8004370:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004374:	6822      	ldr	r2, [r4, #0]
 8004376:	3b00      	subs	r3, #0
 8004378:	bf18      	it	ne
 800437a:	2301      	movne	r3, #1
 800437c:	0692      	lsls	r2, r2, #26
 800437e:	d42b      	bmi.n	80043d8 <_printf_common+0xb0>
 8004380:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004384:	4641      	mov	r1, r8
 8004386:	4638      	mov	r0, r7
 8004388:	47c8      	blx	r9
 800438a:	3001      	adds	r0, #1
 800438c:	d01e      	beq.n	80043cc <_printf_common+0xa4>
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	6922      	ldr	r2, [r4, #16]
 8004392:	f003 0306 	and.w	r3, r3, #6
 8004396:	2b04      	cmp	r3, #4
 8004398:	bf02      	ittt	eq
 800439a:	68e5      	ldreq	r5, [r4, #12]
 800439c:	6833      	ldreq	r3, [r6, #0]
 800439e:	1aed      	subeq	r5, r5, r3
 80043a0:	68a3      	ldr	r3, [r4, #8]
 80043a2:	bf0c      	ite	eq
 80043a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043a8:	2500      	movne	r5, #0
 80043aa:	4293      	cmp	r3, r2
 80043ac:	bfc4      	itt	gt
 80043ae:	1a9b      	subgt	r3, r3, r2
 80043b0:	18ed      	addgt	r5, r5, r3
 80043b2:	2600      	movs	r6, #0
 80043b4:	341a      	adds	r4, #26
 80043b6:	42b5      	cmp	r5, r6
 80043b8:	d11a      	bne.n	80043f0 <_printf_common+0xc8>
 80043ba:	2000      	movs	r0, #0
 80043bc:	e008      	b.n	80043d0 <_printf_common+0xa8>
 80043be:	2301      	movs	r3, #1
 80043c0:	4652      	mov	r2, sl
 80043c2:	4641      	mov	r1, r8
 80043c4:	4638      	mov	r0, r7
 80043c6:	47c8      	blx	r9
 80043c8:	3001      	adds	r0, #1
 80043ca:	d103      	bne.n	80043d4 <_printf_common+0xac>
 80043cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d4:	3501      	adds	r5, #1
 80043d6:	e7c6      	b.n	8004366 <_printf_common+0x3e>
 80043d8:	18e1      	adds	r1, r4, r3
 80043da:	1c5a      	adds	r2, r3, #1
 80043dc:	2030      	movs	r0, #48	@ 0x30
 80043de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80043e2:	4422      	add	r2, r4
 80043e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80043e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80043ec:	3302      	adds	r3, #2
 80043ee:	e7c7      	b.n	8004380 <_printf_common+0x58>
 80043f0:	2301      	movs	r3, #1
 80043f2:	4622      	mov	r2, r4
 80043f4:	4641      	mov	r1, r8
 80043f6:	4638      	mov	r0, r7
 80043f8:	47c8      	blx	r9
 80043fa:	3001      	adds	r0, #1
 80043fc:	d0e6      	beq.n	80043cc <_printf_common+0xa4>
 80043fe:	3601      	adds	r6, #1
 8004400:	e7d9      	b.n	80043b6 <_printf_common+0x8e>
	...

08004404 <_printf_i>:
 8004404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004408:	7e0f      	ldrb	r7, [r1, #24]
 800440a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800440c:	2f78      	cmp	r7, #120	@ 0x78
 800440e:	4691      	mov	r9, r2
 8004410:	4680      	mov	r8, r0
 8004412:	460c      	mov	r4, r1
 8004414:	469a      	mov	sl, r3
 8004416:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800441a:	d807      	bhi.n	800442c <_printf_i+0x28>
 800441c:	2f62      	cmp	r7, #98	@ 0x62
 800441e:	d80a      	bhi.n	8004436 <_printf_i+0x32>
 8004420:	2f00      	cmp	r7, #0
 8004422:	f000 80d1 	beq.w	80045c8 <_printf_i+0x1c4>
 8004426:	2f58      	cmp	r7, #88	@ 0x58
 8004428:	f000 80b8 	beq.w	800459c <_printf_i+0x198>
 800442c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004430:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004434:	e03a      	b.n	80044ac <_printf_i+0xa8>
 8004436:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800443a:	2b15      	cmp	r3, #21
 800443c:	d8f6      	bhi.n	800442c <_printf_i+0x28>
 800443e:	a101      	add	r1, pc, #4	@ (adr r1, 8004444 <_printf_i+0x40>)
 8004440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004444:	0800449d 	.word	0x0800449d
 8004448:	080044b1 	.word	0x080044b1
 800444c:	0800442d 	.word	0x0800442d
 8004450:	0800442d 	.word	0x0800442d
 8004454:	0800442d 	.word	0x0800442d
 8004458:	0800442d 	.word	0x0800442d
 800445c:	080044b1 	.word	0x080044b1
 8004460:	0800442d 	.word	0x0800442d
 8004464:	0800442d 	.word	0x0800442d
 8004468:	0800442d 	.word	0x0800442d
 800446c:	0800442d 	.word	0x0800442d
 8004470:	080045af 	.word	0x080045af
 8004474:	080044db 	.word	0x080044db
 8004478:	08004569 	.word	0x08004569
 800447c:	0800442d 	.word	0x0800442d
 8004480:	0800442d 	.word	0x0800442d
 8004484:	080045d1 	.word	0x080045d1
 8004488:	0800442d 	.word	0x0800442d
 800448c:	080044db 	.word	0x080044db
 8004490:	0800442d 	.word	0x0800442d
 8004494:	0800442d 	.word	0x0800442d
 8004498:	08004571 	.word	0x08004571
 800449c:	6833      	ldr	r3, [r6, #0]
 800449e:	1d1a      	adds	r2, r3, #4
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6032      	str	r2, [r6, #0]
 80044a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80044ac:	2301      	movs	r3, #1
 80044ae:	e09c      	b.n	80045ea <_printf_i+0x1e6>
 80044b0:	6833      	ldr	r3, [r6, #0]
 80044b2:	6820      	ldr	r0, [r4, #0]
 80044b4:	1d19      	adds	r1, r3, #4
 80044b6:	6031      	str	r1, [r6, #0]
 80044b8:	0606      	lsls	r6, r0, #24
 80044ba:	d501      	bpl.n	80044c0 <_printf_i+0xbc>
 80044bc:	681d      	ldr	r5, [r3, #0]
 80044be:	e003      	b.n	80044c8 <_printf_i+0xc4>
 80044c0:	0645      	lsls	r5, r0, #25
 80044c2:	d5fb      	bpl.n	80044bc <_printf_i+0xb8>
 80044c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80044c8:	2d00      	cmp	r5, #0
 80044ca:	da03      	bge.n	80044d4 <_printf_i+0xd0>
 80044cc:	232d      	movs	r3, #45	@ 0x2d
 80044ce:	426d      	negs	r5, r5
 80044d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044d4:	4858      	ldr	r0, [pc, #352]	@ (8004638 <_printf_i+0x234>)
 80044d6:	230a      	movs	r3, #10
 80044d8:	e011      	b.n	80044fe <_printf_i+0xfa>
 80044da:	6821      	ldr	r1, [r4, #0]
 80044dc:	6833      	ldr	r3, [r6, #0]
 80044de:	0608      	lsls	r0, r1, #24
 80044e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80044e4:	d402      	bmi.n	80044ec <_printf_i+0xe8>
 80044e6:	0649      	lsls	r1, r1, #25
 80044e8:	bf48      	it	mi
 80044ea:	b2ad      	uxthmi	r5, r5
 80044ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80044ee:	4852      	ldr	r0, [pc, #328]	@ (8004638 <_printf_i+0x234>)
 80044f0:	6033      	str	r3, [r6, #0]
 80044f2:	bf14      	ite	ne
 80044f4:	230a      	movne	r3, #10
 80044f6:	2308      	moveq	r3, #8
 80044f8:	2100      	movs	r1, #0
 80044fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80044fe:	6866      	ldr	r6, [r4, #4]
 8004500:	60a6      	str	r6, [r4, #8]
 8004502:	2e00      	cmp	r6, #0
 8004504:	db05      	blt.n	8004512 <_printf_i+0x10e>
 8004506:	6821      	ldr	r1, [r4, #0]
 8004508:	432e      	orrs	r6, r5
 800450a:	f021 0104 	bic.w	r1, r1, #4
 800450e:	6021      	str	r1, [r4, #0]
 8004510:	d04b      	beq.n	80045aa <_printf_i+0x1a6>
 8004512:	4616      	mov	r6, r2
 8004514:	fbb5 f1f3 	udiv	r1, r5, r3
 8004518:	fb03 5711 	mls	r7, r3, r1, r5
 800451c:	5dc7      	ldrb	r7, [r0, r7]
 800451e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004522:	462f      	mov	r7, r5
 8004524:	42bb      	cmp	r3, r7
 8004526:	460d      	mov	r5, r1
 8004528:	d9f4      	bls.n	8004514 <_printf_i+0x110>
 800452a:	2b08      	cmp	r3, #8
 800452c:	d10b      	bne.n	8004546 <_printf_i+0x142>
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	07df      	lsls	r7, r3, #31
 8004532:	d508      	bpl.n	8004546 <_printf_i+0x142>
 8004534:	6923      	ldr	r3, [r4, #16]
 8004536:	6861      	ldr	r1, [r4, #4]
 8004538:	4299      	cmp	r1, r3
 800453a:	bfde      	ittt	le
 800453c:	2330      	movle	r3, #48	@ 0x30
 800453e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004542:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004546:	1b92      	subs	r2, r2, r6
 8004548:	6122      	str	r2, [r4, #16]
 800454a:	f8cd a000 	str.w	sl, [sp]
 800454e:	464b      	mov	r3, r9
 8004550:	aa03      	add	r2, sp, #12
 8004552:	4621      	mov	r1, r4
 8004554:	4640      	mov	r0, r8
 8004556:	f7ff fee7 	bl	8004328 <_printf_common>
 800455a:	3001      	adds	r0, #1
 800455c:	d14a      	bne.n	80045f4 <_printf_i+0x1f0>
 800455e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004562:	b004      	add	sp, #16
 8004564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	f043 0320 	orr.w	r3, r3, #32
 800456e:	6023      	str	r3, [r4, #0]
 8004570:	4832      	ldr	r0, [pc, #200]	@ (800463c <_printf_i+0x238>)
 8004572:	2778      	movs	r7, #120	@ 0x78
 8004574:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	6831      	ldr	r1, [r6, #0]
 800457c:	061f      	lsls	r7, r3, #24
 800457e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004582:	d402      	bmi.n	800458a <_printf_i+0x186>
 8004584:	065f      	lsls	r7, r3, #25
 8004586:	bf48      	it	mi
 8004588:	b2ad      	uxthmi	r5, r5
 800458a:	6031      	str	r1, [r6, #0]
 800458c:	07d9      	lsls	r1, r3, #31
 800458e:	bf44      	itt	mi
 8004590:	f043 0320 	orrmi.w	r3, r3, #32
 8004594:	6023      	strmi	r3, [r4, #0]
 8004596:	b11d      	cbz	r5, 80045a0 <_printf_i+0x19c>
 8004598:	2310      	movs	r3, #16
 800459a:	e7ad      	b.n	80044f8 <_printf_i+0xf4>
 800459c:	4826      	ldr	r0, [pc, #152]	@ (8004638 <_printf_i+0x234>)
 800459e:	e7e9      	b.n	8004574 <_printf_i+0x170>
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	f023 0320 	bic.w	r3, r3, #32
 80045a6:	6023      	str	r3, [r4, #0]
 80045a8:	e7f6      	b.n	8004598 <_printf_i+0x194>
 80045aa:	4616      	mov	r6, r2
 80045ac:	e7bd      	b.n	800452a <_printf_i+0x126>
 80045ae:	6833      	ldr	r3, [r6, #0]
 80045b0:	6825      	ldr	r5, [r4, #0]
 80045b2:	6961      	ldr	r1, [r4, #20]
 80045b4:	1d18      	adds	r0, r3, #4
 80045b6:	6030      	str	r0, [r6, #0]
 80045b8:	062e      	lsls	r6, r5, #24
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	d501      	bpl.n	80045c2 <_printf_i+0x1be>
 80045be:	6019      	str	r1, [r3, #0]
 80045c0:	e002      	b.n	80045c8 <_printf_i+0x1c4>
 80045c2:	0668      	lsls	r0, r5, #25
 80045c4:	d5fb      	bpl.n	80045be <_printf_i+0x1ba>
 80045c6:	8019      	strh	r1, [r3, #0]
 80045c8:	2300      	movs	r3, #0
 80045ca:	6123      	str	r3, [r4, #16]
 80045cc:	4616      	mov	r6, r2
 80045ce:	e7bc      	b.n	800454a <_printf_i+0x146>
 80045d0:	6833      	ldr	r3, [r6, #0]
 80045d2:	1d1a      	adds	r2, r3, #4
 80045d4:	6032      	str	r2, [r6, #0]
 80045d6:	681e      	ldr	r6, [r3, #0]
 80045d8:	6862      	ldr	r2, [r4, #4]
 80045da:	2100      	movs	r1, #0
 80045dc:	4630      	mov	r0, r6
 80045de:	f7fb fdf7 	bl	80001d0 <memchr>
 80045e2:	b108      	cbz	r0, 80045e8 <_printf_i+0x1e4>
 80045e4:	1b80      	subs	r0, r0, r6
 80045e6:	6060      	str	r0, [r4, #4]
 80045e8:	6863      	ldr	r3, [r4, #4]
 80045ea:	6123      	str	r3, [r4, #16]
 80045ec:	2300      	movs	r3, #0
 80045ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045f2:	e7aa      	b.n	800454a <_printf_i+0x146>
 80045f4:	6923      	ldr	r3, [r4, #16]
 80045f6:	4632      	mov	r2, r6
 80045f8:	4649      	mov	r1, r9
 80045fa:	4640      	mov	r0, r8
 80045fc:	47d0      	blx	sl
 80045fe:	3001      	adds	r0, #1
 8004600:	d0ad      	beq.n	800455e <_printf_i+0x15a>
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	079b      	lsls	r3, r3, #30
 8004606:	d413      	bmi.n	8004630 <_printf_i+0x22c>
 8004608:	68e0      	ldr	r0, [r4, #12]
 800460a:	9b03      	ldr	r3, [sp, #12]
 800460c:	4298      	cmp	r0, r3
 800460e:	bfb8      	it	lt
 8004610:	4618      	movlt	r0, r3
 8004612:	e7a6      	b.n	8004562 <_printf_i+0x15e>
 8004614:	2301      	movs	r3, #1
 8004616:	4632      	mov	r2, r6
 8004618:	4649      	mov	r1, r9
 800461a:	4640      	mov	r0, r8
 800461c:	47d0      	blx	sl
 800461e:	3001      	adds	r0, #1
 8004620:	d09d      	beq.n	800455e <_printf_i+0x15a>
 8004622:	3501      	adds	r5, #1
 8004624:	68e3      	ldr	r3, [r4, #12]
 8004626:	9903      	ldr	r1, [sp, #12]
 8004628:	1a5b      	subs	r3, r3, r1
 800462a:	42ab      	cmp	r3, r5
 800462c:	dcf2      	bgt.n	8004614 <_printf_i+0x210>
 800462e:	e7eb      	b.n	8004608 <_printf_i+0x204>
 8004630:	2500      	movs	r5, #0
 8004632:	f104 0619 	add.w	r6, r4, #25
 8004636:	e7f5      	b.n	8004624 <_printf_i+0x220>
 8004638:	08006aae 	.word	0x08006aae
 800463c:	08006abf 	.word	0x08006abf

08004640 <std>:
 8004640:	2300      	movs	r3, #0
 8004642:	b510      	push	{r4, lr}
 8004644:	4604      	mov	r4, r0
 8004646:	e9c0 3300 	strd	r3, r3, [r0]
 800464a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800464e:	6083      	str	r3, [r0, #8]
 8004650:	8181      	strh	r1, [r0, #12]
 8004652:	6643      	str	r3, [r0, #100]	@ 0x64
 8004654:	81c2      	strh	r2, [r0, #14]
 8004656:	6183      	str	r3, [r0, #24]
 8004658:	4619      	mov	r1, r3
 800465a:	2208      	movs	r2, #8
 800465c:	305c      	adds	r0, #92	@ 0x5c
 800465e:	f000 f916 	bl	800488e <memset>
 8004662:	4b0d      	ldr	r3, [pc, #52]	@ (8004698 <std+0x58>)
 8004664:	6263      	str	r3, [r4, #36]	@ 0x24
 8004666:	4b0d      	ldr	r3, [pc, #52]	@ (800469c <std+0x5c>)
 8004668:	62a3      	str	r3, [r4, #40]	@ 0x28
 800466a:	4b0d      	ldr	r3, [pc, #52]	@ (80046a0 <std+0x60>)
 800466c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800466e:	4b0d      	ldr	r3, [pc, #52]	@ (80046a4 <std+0x64>)
 8004670:	6323      	str	r3, [r4, #48]	@ 0x30
 8004672:	4b0d      	ldr	r3, [pc, #52]	@ (80046a8 <std+0x68>)
 8004674:	6224      	str	r4, [r4, #32]
 8004676:	429c      	cmp	r4, r3
 8004678:	d006      	beq.n	8004688 <std+0x48>
 800467a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800467e:	4294      	cmp	r4, r2
 8004680:	d002      	beq.n	8004688 <std+0x48>
 8004682:	33d0      	adds	r3, #208	@ 0xd0
 8004684:	429c      	cmp	r4, r3
 8004686:	d105      	bne.n	8004694 <std+0x54>
 8004688:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800468c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004690:	f000 b97a 	b.w	8004988 <__retarget_lock_init_recursive>
 8004694:	bd10      	pop	{r4, pc}
 8004696:	bf00      	nop
 8004698:	08004809 	.word	0x08004809
 800469c:	0800482b 	.word	0x0800482b
 80046a0:	08004863 	.word	0x08004863
 80046a4:	08004887 	.word	0x08004887
 80046a8:	200002a4 	.word	0x200002a4

080046ac <stdio_exit_handler>:
 80046ac:	4a02      	ldr	r2, [pc, #8]	@ (80046b8 <stdio_exit_handler+0xc>)
 80046ae:	4903      	ldr	r1, [pc, #12]	@ (80046bc <stdio_exit_handler+0x10>)
 80046b0:	4803      	ldr	r0, [pc, #12]	@ (80046c0 <stdio_exit_handler+0x14>)
 80046b2:	f000 b869 	b.w	8004788 <_fwalk_sglue>
 80046b6:	bf00      	nop
 80046b8:	2000000c 	.word	0x2000000c
 80046bc:	080062ed 	.word	0x080062ed
 80046c0:	2000001c 	.word	0x2000001c

080046c4 <cleanup_stdio>:
 80046c4:	6841      	ldr	r1, [r0, #4]
 80046c6:	4b0c      	ldr	r3, [pc, #48]	@ (80046f8 <cleanup_stdio+0x34>)
 80046c8:	4299      	cmp	r1, r3
 80046ca:	b510      	push	{r4, lr}
 80046cc:	4604      	mov	r4, r0
 80046ce:	d001      	beq.n	80046d4 <cleanup_stdio+0x10>
 80046d0:	f001 fe0c 	bl	80062ec <_fflush_r>
 80046d4:	68a1      	ldr	r1, [r4, #8]
 80046d6:	4b09      	ldr	r3, [pc, #36]	@ (80046fc <cleanup_stdio+0x38>)
 80046d8:	4299      	cmp	r1, r3
 80046da:	d002      	beq.n	80046e2 <cleanup_stdio+0x1e>
 80046dc:	4620      	mov	r0, r4
 80046de:	f001 fe05 	bl	80062ec <_fflush_r>
 80046e2:	68e1      	ldr	r1, [r4, #12]
 80046e4:	4b06      	ldr	r3, [pc, #24]	@ (8004700 <cleanup_stdio+0x3c>)
 80046e6:	4299      	cmp	r1, r3
 80046e8:	d004      	beq.n	80046f4 <cleanup_stdio+0x30>
 80046ea:	4620      	mov	r0, r4
 80046ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046f0:	f001 bdfc 	b.w	80062ec <_fflush_r>
 80046f4:	bd10      	pop	{r4, pc}
 80046f6:	bf00      	nop
 80046f8:	200002a4 	.word	0x200002a4
 80046fc:	2000030c 	.word	0x2000030c
 8004700:	20000374 	.word	0x20000374

08004704 <global_stdio_init.part.0>:
 8004704:	b510      	push	{r4, lr}
 8004706:	4b0b      	ldr	r3, [pc, #44]	@ (8004734 <global_stdio_init.part.0+0x30>)
 8004708:	4c0b      	ldr	r4, [pc, #44]	@ (8004738 <global_stdio_init.part.0+0x34>)
 800470a:	4a0c      	ldr	r2, [pc, #48]	@ (800473c <global_stdio_init.part.0+0x38>)
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	4620      	mov	r0, r4
 8004710:	2200      	movs	r2, #0
 8004712:	2104      	movs	r1, #4
 8004714:	f7ff ff94 	bl	8004640 <std>
 8004718:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800471c:	2201      	movs	r2, #1
 800471e:	2109      	movs	r1, #9
 8004720:	f7ff ff8e 	bl	8004640 <std>
 8004724:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004728:	2202      	movs	r2, #2
 800472a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800472e:	2112      	movs	r1, #18
 8004730:	f7ff bf86 	b.w	8004640 <std>
 8004734:	200003dc 	.word	0x200003dc
 8004738:	200002a4 	.word	0x200002a4
 800473c:	080046ad 	.word	0x080046ad

08004740 <__sfp_lock_acquire>:
 8004740:	4801      	ldr	r0, [pc, #4]	@ (8004748 <__sfp_lock_acquire+0x8>)
 8004742:	f000 b922 	b.w	800498a <__retarget_lock_acquire_recursive>
 8004746:	bf00      	nop
 8004748:	200003e5 	.word	0x200003e5

0800474c <__sfp_lock_release>:
 800474c:	4801      	ldr	r0, [pc, #4]	@ (8004754 <__sfp_lock_release+0x8>)
 800474e:	f000 b91d 	b.w	800498c <__retarget_lock_release_recursive>
 8004752:	bf00      	nop
 8004754:	200003e5 	.word	0x200003e5

08004758 <__sinit>:
 8004758:	b510      	push	{r4, lr}
 800475a:	4604      	mov	r4, r0
 800475c:	f7ff fff0 	bl	8004740 <__sfp_lock_acquire>
 8004760:	6a23      	ldr	r3, [r4, #32]
 8004762:	b11b      	cbz	r3, 800476c <__sinit+0x14>
 8004764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004768:	f7ff bff0 	b.w	800474c <__sfp_lock_release>
 800476c:	4b04      	ldr	r3, [pc, #16]	@ (8004780 <__sinit+0x28>)
 800476e:	6223      	str	r3, [r4, #32]
 8004770:	4b04      	ldr	r3, [pc, #16]	@ (8004784 <__sinit+0x2c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1f5      	bne.n	8004764 <__sinit+0xc>
 8004778:	f7ff ffc4 	bl	8004704 <global_stdio_init.part.0>
 800477c:	e7f2      	b.n	8004764 <__sinit+0xc>
 800477e:	bf00      	nop
 8004780:	080046c5 	.word	0x080046c5
 8004784:	200003dc 	.word	0x200003dc

08004788 <_fwalk_sglue>:
 8004788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800478c:	4607      	mov	r7, r0
 800478e:	4688      	mov	r8, r1
 8004790:	4614      	mov	r4, r2
 8004792:	2600      	movs	r6, #0
 8004794:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004798:	f1b9 0901 	subs.w	r9, r9, #1
 800479c:	d505      	bpl.n	80047aa <_fwalk_sglue+0x22>
 800479e:	6824      	ldr	r4, [r4, #0]
 80047a0:	2c00      	cmp	r4, #0
 80047a2:	d1f7      	bne.n	8004794 <_fwalk_sglue+0xc>
 80047a4:	4630      	mov	r0, r6
 80047a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047aa:	89ab      	ldrh	r3, [r5, #12]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d907      	bls.n	80047c0 <_fwalk_sglue+0x38>
 80047b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047b4:	3301      	adds	r3, #1
 80047b6:	d003      	beq.n	80047c0 <_fwalk_sglue+0x38>
 80047b8:	4629      	mov	r1, r5
 80047ba:	4638      	mov	r0, r7
 80047bc:	47c0      	blx	r8
 80047be:	4306      	orrs	r6, r0
 80047c0:	3568      	adds	r5, #104	@ 0x68
 80047c2:	e7e9      	b.n	8004798 <_fwalk_sglue+0x10>

080047c4 <siprintf>:
 80047c4:	b40e      	push	{r1, r2, r3}
 80047c6:	b510      	push	{r4, lr}
 80047c8:	b09d      	sub	sp, #116	@ 0x74
 80047ca:	ab1f      	add	r3, sp, #124	@ 0x7c
 80047cc:	9002      	str	r0, [sp, #8]
 80047ce:	9006      	str	r0, [sp, #24]
 80047d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80047d4:	480a      	ldr	r0, [pc, #40]	@ (8004800 <siprintf+0x3c>)
 80047d6:	9107      	str	r1, [sp, #28]
 80047d8:	9104      	str	r1, [sp, #16]
 80047da:	490a      	ldr	r1, [pc, #40]	@ (8004804 <siprintf+0x40>)
 80047dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80047e0:	9105      	str	r1, [sp, #20]
 80047e2:	2400      	movs	r4, #0
 80047e4:	a902      	add	r1, sp, #8
 80047e6:	6800      	ldr	r0, [r0, #0]
 80047e8:	9301      	str	r3, [sp, #4]
 80047ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80047ec:	f001 fbfe 	bl	8005fec <_svfiprintf_r>
 80047f0:	9b02      	ldr	r3, [sp, #8]
 80047f2:	701c      	strb	r4, [r3, #0]
 80047f4:	b01d      	add	sp, #116	@ 0x74
 80047f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047fa:	b003      	add	sp, #12
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	20000018 	.word	0x20000018
 8004804:	ffff0208 	.word	0xffff0208

08004808 <__sread>:
 8004808:	b510      	push	{r4, lr}
 800480a:	460c      	mov	r4, r1
 800480c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004810:	f000 f86c 	bl	80048ec <_read_r>
 8004814:	2800      	cmp	r0, #0
 8004816:	bfab      	itete	ge
 8004818:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800481a:	89a3      	ldrhlt	r3, [r4, #12]
 800481c:	181b      	addge	r3, r3, r0
 800481e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004822:	bfac      	ite	ge
 8004824:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004826:	81a3      	strhlt	r3, [r4, #12]
 8004828:	bd10      	pop	{r4, pc}

0800482a <__swrite>:
 800482a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800482e:	461f      	mov	r7, r3
 8004830:	898b      	ldrh	r3, [r1, #12]
 8004832:	05db      	lsls	r3, r3, #23
 8004834:	4605      	mov	r5, r0
 8004836:	460c      	mov	r4, r1
 8004838:	4616      	mov	r6, r2
 800483a:	d505      	bpl.n	8004848 <__swrite+0x1e>
 800483c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004840:	2302      	movs	r3, #2
 8004842:	2200      	movs	r2, #0
 8004844:	f000 f840 	bl	80048c8 <_lseek_r>
 8004848:	89a3      	ldrh	r3, [r4, #12]
 800484a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800484e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004852:	81a3      	strh	r3, [r4, #12]
 8004854:	4632      	mov	r2, r6
 8004856:	463b      	mov	r3, r7
 8004858:	4628      	mov	r0, r5
 800485a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800485e:	f000 b857 	b.w	8004910 <_write_r>

08004862 <__sseek>:
 8004862:	b510      	push	{r4, lr}
 8004864:	460c      	mov	r4, r1
 8004866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800486a:	f000 f82d 	bl	80048c8 <_lseek_r>
 800486e:	1c43      	adds	r3, r0, #1
 8004870:	89a3      	ldrh	r3, [r4, #12]
 8004872:	bf15      	itete	ne
 8004874:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004876:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800487a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800487e:	81a3      	strheq	r3, [r4, #12]
 8004880:	bf18      	it	ne
 8004882:	81a3      	strhne	r3, [r4, #12]
 8004884:	bd10      	pop	{r4, pc}

08004886 <__sclose>:
 8004886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800488a:	f000 b80d 	b.w	80048a8 <_close_r>

0800488e <memset>:
 800488e:	4402      	add	r2, r0
 8004890:	4603      	mov	r3, r0
 8004892:	4293      	cmp	r3, r2
 8004894:	d100      	bne.n	8004898 <memset+0xa>
 8004896:	4770      	bx	lr
 8004898:	f803 1b01 	strb.w	r1, [r3], #1
 800489c:	e7f9      	b.n	8004892 <memset+0x4>
	...

080048a0 <_localeconv_r>:
 80048a0:	4800      	ldr	r0, [pc, #0]	@ (80048a4 <_localeconv_r+0x4>)
 80048a2:	4770      	bx	lr
 80048a4:	20000158 	.word	0x20000158

080048a8 <_close_r>:
 80048a8:	b538      	push	{r3, r4, r5, lr}
 80048aa:	4d06      	ldr	r5, [pc, #24]	@ (80048c4 <_close_r+0x1c>)
 80048ac:	2300      	movs	r3, #0
 80048ae:	4604      	mov	r4, r0
 80048b0:	4608      	mov	r0, r1
 80048b2:	602b      	str	r3, [r5, #0]
 80048b4:	f7fc ff4c 	bl	8001750 <_close>
 80048b8:	1c43      	adds	r3, r0, #1
 80048ba:	d102      	bne.n	80048c2 <_close_r+0x1a>
 80048bc:	682b      	ldr	r3, [r5, #0]
 80048be:	b103      	cbz	r3, 80048c2 <_close_r+0x1a>
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	bd38      	pop	{r3, r4, r5, pc}
 80048c4:	200003e0 	.word	0x200003e0

080048c8 <_lseek_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	4d07      	ldr	r5, [pc, #28]	@ (80048e8 <_lseek_r+0x20>)
 80048cc:	4604      	mov	r4, r0
 80048ce:	4608      	mov	r0, r1
 80048d0:	4611      	mov	r1, r2
 80048d2:	2200      	movs	r2, #0
 80048d4:	602a      	str	r2, [r5, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	f7fc ff61 	bl	800179e <_lseek>
 80048dc:	1c43      	adds	r3, r0, #1
 80048de:	d102      	bne.n	80048e6 <_lseek_r+0x1e>
 80048e0:	682b      	ldr	r3, [r5, #0]
 80048e2:	b103      	cbz	r3, 80048e6 <_lseek_r+0x1e>
 80048e4:	6023      	str	r3, [r4, #0]
 80048e6:	bd38      	pop	{r3, r4, r5, pc}
 80048e8:	200003e0 	.word	0x200003e0

080048ec <_read_r>:
 80048ec:	b538      	push	{r3, r4, r5, lr}
 80048ee:	4d07      	ldr	r5, [pc, #28]	@ (800490c <_read_r+0x20>)
 80048f0:	4604      	mov	r4, r0
 80048f2:	4608      	mov	r0, r1
 80048f4:	4611      	mov	r1, r2
 80048f6:	2200      	movs	r2, #0
 80048f8:	602a      	str	r2, [r5, #0]
 80048fa:	461a      	mov	r2, r3
 80048fc:	f7fc feef 	bl	80016de <_read>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	d102      	bne.n	800490a <_read_r+0x1e>
 8004904:	682b      	ldr	r3, [r5, #0]
 8004906:	b103      	cbz	r3, 800490a <_read_r+0x1e>
 8004908:	6023      	str	r3, [r4, #0]
 800490a:	bd38      	pop	{r3, r4, r5, pc}
 800490c:	200003e0 	.word	0x200003e0

08004910 <_write_r>:
 8004910:	b538      	push	{r3, r4, r5, lr}
 8004912:	4d07      	ldr	r5, [pc, #28]	@ (8004930 <_write_r+0x20>)
 8004914:	4604      	mov	r4, r0
 8004916:	4608      	mov	r0, r1
 8004918:	4611      	mov	r1, r2
 800491a:	2200      	movs	r2, #0
 800491c:	602a      	str	r2, [r5, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	f7fc fefa 	bl	8001718 <_write>
 8004924:	1c43      	adds	r3, r0, #1
 8004926:	d102      	bne.n	800492e <_write_r+0x1e>
 8004928:	682b      	ldr	r3, [r5, #0]
 800492a:	b103      	cbz	r3, 800492e <_write_r+0x1e>
 800492c:	6023      	str	r3, [r4, #0]
 800492e:	bd38      	pop	{r3, r4, r5, pc}
 8004930:	200003e0 	.word	0x200003e0

08004934 <__errno>:
 8004934:	4b01      	ldr	r3, [pc, #4]	@ (800493c <__errno+0x8>)
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	20000018 	.word	0x20000018

08004940 <__libc_init_array>:
 8004940:	b570      	push	{r4, r5, r6, lr}
 8004942:	4d0d      	ldr	r5, [pc, #52]	@ (8004978 <__libc_init_array+0x38>)
 8004944:	4c0d      	ldr	r4, [pc, #52]	@ (800497c <__libc_init_array+0x3c>)
 8004946:	1b64      	subs	r4, r4, r5
 8004948:	10a4      	asrs	r4, r4, #2
 800494a:	2600      	movs	r6, #0
 800494c:	42a6      	cmp	r6, r4
 800494e:	d109      	bne.n	8004964 <__libc_init_array+0x24>
 8004950:	4d0b      	ldr	r5, [pc, #44]	@ (8004980 <__libc_init_array+0x40>)
 8004952:	4c0c      	ldr	r4, [pc, #48]	@ (8004984 <__libc_init_array+0x44>)
 8004954:	f002 f868 	bl	8006a28 <_init>
 8004958:	1b64      	subs	r4, r4, r5
 800495a:	10a4      	asrs	r4, r4, #2
 800495c:	2600      	movs	r6, #0
 800495e:	42a6      	cmp	r6, r4
 8004960:	d105      	bne.n	800496e <__libc_init_array+0x2e>
 8004962:	bd70      	pop	{r4, r5, r6, pc}
 8004964:	f855 3b04 	ldr.w	r3, [r5], #4
 8004968:	4798      	blx	r3
 800496a:	3601      	adds	r6, #1
 800496c:	e7ee      	b.n	800494c <__libc_init_array+0xc>
 800496e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004972:	4798      	blx	r3
 8004974:	3601      	adds	r6, #1
 8004976:	e7f2      	b.n	800495e <__libc_init_array+0x1e>
 8004978:	08006e1c 	.word	0x08006e1c
 800497c:	08006e1c 	.word	0x08006e1c
 8004980:	08006e1c 	.word	0x08006e1c
 8004984:	08006e20 	.word	0x08006e20

08004988 <__retarget_lock_init_recursive>:
 8004988:	4770      	bx	lr

0800498a <__retarget_lock_acquire_recursive>:
 800498a:	4770      	bx	lr

0800498c <__retarget_lock_release_recursive>:
 800498c:	4770      	bx	lr

0800498e <quorem>:
 800498e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004992:	6903      	ldr	r3, [r0, #16]
 8004994:	690c      	ldr	r4, [r1, #16]
 8004996:	42a3      	cmp	r3, r4
 8004998:	4607      	mov	r7, r0
 800499a:	db7e      	blt.n	8004a9a <quorem+0x10c>
 800499c:	3c01      	subs	r4, #1
 800499e:	f101 0814 	add.w	r8, r1, #20
 80049a2:	00a3      	lsls	r3, r4, #2
 80049a4:	f100 0514 	add.w	r5, r0, #20
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049ae:	9301      	str	r3, [sp, #4]
 80049b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049b8:	3301      	adds	r3, #1
 80049ba:	429a      	cmp	r2, r3
 80049bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80049c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80049c4:	d32e      	bcc.n	8004a24 <quorem+0x96>
 80049c6:	f04f 0a00 	mov.w	sl, #0
 80049ca:	46c4      	mov	ip, r8
 80049cc:	46ae      	mov	lr, r5
 80049ce:	46d3      	mov	fp, sl
 80049d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80049d4:	b298      	uxth	r0, r3
 80049d6:	fb06 a000 	mla	r0, r6, r0, sl
 80049da:	0c02      	lsrs	r2, r0, #16
 80049dc:	0c1b      	lsrs	r3, r3, #16
 80049de:	fb06 2303 	mla	r3, r6, r3, r2
 80049e2:	f8de 2000 	ldr.w	r2, [lr]
 80049e6:	b280      	uxth	r0, r0
 80049e8:	b292      	uxth	r2, r2
 80049ea:	1a12      	subs	r2, r2, r0
 80049ec:	445a      	add	r2, fp
 80049ee:	f8de 0000 	ldr.w	r0, [lr]
 80049f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80049fc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004a00:	b292      	uxth	r2, r2
 8004a02:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004a06:	45e1      	cmp	r9, ip
 8004a08:	f84e 2b04 	str.w	r2, [lr], #4
 8004a0c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004a10:	d2de      	bcs.n	80049d0 <quorem+0x42>
 8004a12:	9b00      	ldr	r3, [sp, #0]
 8004a14:	58eb      	ldr	r3, [r5, r3]
 8004a16:	b92b      	cbnz	r3, 8004a24 <quorem+0x96>
 8004a18:	9b01      	ldr	r3, [sp, #4]
 8004a1a:	3b04      	subs	r3, #4
 8004a1c:	429d      	cmp	r5, r3
 8004a1e:	461a      	mov	r2, r3
 8004a20:	d32f      	bcc.n	8004a82 <quorem+0xf4>
 8004a22:	613c      	str	r4, [r7, #16]
 8004a24:	4638      	mov	r0, r7
 8004a26:	f001 f97d 	bl	8005d24 <__mcmp>
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	db25      	blt.n	8004a7a <quorem+0xec>
 8004a2e:	4629      	mov	r1, r5
 8004a30:	2000      	movs	r0, #0
 8004a32:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a36:	f8d1 c000 	ldr.w	ip, [r1]
 8004a3a:	fa1f fe82 	uxth.w	lr, r2
 8004a3e:	fa1f f38c 	uxth.w	r3, ip
 8004a42:	eba3 030e 	sub.w	r3, r3, lr
 8004a46:	4403      	add	r3, r0
 8004a48:	0c12      	lsrs	r2, r2, #16
 8004a4a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004a4e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a58:	45c1      	cmp	r9, r8
 8004a5a:	f841 3b04 	str.w	r3, [r1], #4
 8004a5e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004a62:	d2e6      	bcs.n	8004a32 <quorem+0xa4>
 8004a64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a6c:	b922      	cbnz	r2, 8004a78 <quorem+0xea>
 8004a6e:	3b04      	subs	r3, #4
 8004a70:	429d      	cmp	r5, r3
 8004a72:	461a      	mov	r2, r3
 8004a74:	d30b      	bcc.n	8004a8e <quorem+0x100>
 8004a76:	613c      	str	r4, [r7, #16]
 8004a78:	3601      	adds	r6, #1
 8004a7a:	4630      	mov	r0, r6
 8004a7c:	b003      	add	sp, #12
 8004a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a82:	6812      	ldr	r2, [r2, #0]
 8004a84:	3b04      	subs	r3, #4
 8004a86:	2a00      	cmp	r2, #0
 8004a88:	d1cb      	bne.n	8004a22 <quorem+0x94>
 8004a8a:	3c01      	subs	r4, #1
 8004a8c:	e7c6      	b.n	8004a1c <quorem+0x8e>
 8004a8e:	6812      	ldr	r2, [r2, #0]
 8004a90:	3b04      	subs	r3, #4
 8004a92:	2a00      	cmp	r2, #0
 8004a94:	d1ef      	bne.n	8004a76 <quorem+0xe8>
 8004a96:	3c01      	subs	r4, #1
 8004a98:	e7ea      	b.n	8004a70 <quorem+0xe2>
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	e7ee      	b.n	8004a7c <quorem+0xee>
	...

08004aa0 <_dtoa_r>:
 8004aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aa4:	69c7      	ldr	r7, [r0, #28]
 8004aa6:	b097      	sub	sp, #92	@ 0x5c
 8004aa8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004aac:	ec55 4b10 	vmov	r4, r5, d0
 8004ab0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004ab2:	9107      	str	r1, [sp, #28]
 8004ab4:	4681      	mov	r9, r0
 8004ab6:	920c      	str	r2, [sp, #48]	@ 0x30
 8004ab8:	9311      	str	r3, [sp, #68]	@ 0x44
 8004aba:	b97f      	cbnz	r7, 8004adc <_dtoa_r+0x3c>
 8004abc:	2010      	movs	r0, #16
 8004abe:	f000 fe09 	bl	80056d4 <malloc>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	f8c9 001c 	str.w	r0, [r9, #28]
 8004ac8:	b920      	cbnz	r0, 8004ad4 <_dtoa_r+0x34>
 8004aca:	4ba9      	ldr	r3, [pc, #676]	@ (8004d70 <_dtoa_r+0x2d0>)
 8004acc:	21ef      	movs	r1, #239	@ 0xef
 8004ace:	48a9      	ldr	r0, [pc, #676]	@ (8004d74 <_dtoa_r+0x2d4>)
 8004ad0:	f001 fc6c 	bl	80063ac <__assert_func>
 8004ad4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004ad8:	6007      	str	r7, [r0, #0]
 8004ada:	60c7      	str	r7, [r0, #12]
 8004adc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004ae0:	6819      	ldr	r1, [r3, #0]
 8004ae2:	b159      	cbz	r1, 8004afc <_dtoa_r+0x5c>
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	604a      	str	r2, [r1, #4]
 8004ae8:	2301      	movs	r3, #1
 8004aea:	4093      	lsls	r3, r2
 8004aec:	608b      	str	r3, [r1, #8]
 8004aee:	4648      	mov	r0, r9
 8004af0:	f000 fee6 	bl	80058c0 <_Bfree>
 8004af4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	1e2b      	subs	r3, r5, #0
 8004afe:	bfb9      	ittee	lt
 8004b00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004b04:	9305      	strlt	r3, [sp, #20]
 8004b06:	2300      	movge	r3, #0
 8004b08:	6033      	strge	r3, [r6, #0]
 8004b0a:	9f05      	ldr	r7, [sp, #20]
 8004b0c:	4b9a      	ldr	r3, [pc, #616]	@ (8004d78 <_dtoa_r+0x2d8>)
 8004b0e:	bfbc      	itt	lt
 8004b10:	2201      	movlt	r2, #1
 8004b12:	6032      	strlt	r2, [r6, #0]
 8004b14:	43bb      	bics	r3, r7
 8004b16:	d112      	bne.n	8004b3e <_dtoa_r+0x9e>
 8004b18:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004b1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004b24:	4323      	orrs	r3, r4
 8004b26:	f000 855a 	beq.w	80055de <_dtoa_r+0xb3e>
 8004b2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b2c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8004d8c <_dtoa_r+0x2ec>
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 855c 	beq.w	80055ee <_dtoa_r+0xb4e>
 8004b36:	f10a 0303 	add.w	r3, sl, #3
 8004b3a:	f000 bd56 	b.w	80055ea <_dtoa_r+0xb4a>
 8004b3e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004b42:	2200      	movs	r2, #0
 8004b44:	ec51 0b17 	vmov	r0, r1, d7
 8004b48:	2300      	movs	r3, #0
 8004b4a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004b4e:	f7fb ffbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b52:	4680      	mov	r8, r0
 8004b54:	b158      	cbz	r0, 8004b6e <_dtoa_r+0xce>
 8004b56:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004b58:	2301      	movs	r3, #1
 8004b5a:	6013      	str	r3, [r2, #0]
 8004b5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b5e:	b113      	cbz	r3, 8004b66 <_dtoa_r+0xc6>
 8004b60:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004b62:	4b86      	ldr	r3, [pc, #536]	@ (8004d7c <_dtoa_r+0x2dc>)
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004d90 <_dtoa_r+0x2f0>
 8004b6a:	f000 bd40 	b.w	80055ee <_dtoa_r+0xb4e>
 8004b6e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8004b72:	aa14      	add	r2, sp, #80	@ 0x50
 8004b74:	a915      	add	r1, sp, #84	@ 0x54
 8004b76:	4648      	mov	r0, r9
 8004b78:	f001 f984 	bl	8005e84 <__d2b>
 8004b7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004b80:	9002      	str	r0, [sp, #8]
 8004b82:	2e00      	cmp	r6, #0
 8004b84:	d078      	beq.n	8004c78 <_dtoa_r+0x1d8>
 8004b86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004b88:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8004b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004b94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004b98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004b9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	4b76      	ldr	r3, [pc, #472]	@ (8004d80 <_dtoa_r+0x2e0>)
 8004ba6:	f7fb fb6f 	bl	8000288 <__aeabi_dsub>
 8004baa:	a36b      	add	r3, pc, #428	@ (adr r3, 8004d58 <_dtoa_r+0x2b8>)
 8004bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb0:	f7fb fd22 	bl	80005f8 <__aeabi_dmul>
 8004bb4:	a36a      	add	r3, pc, #424	@ (adr r3, 8004d60 <_dtoa_r+0x2c0>)
 8004bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bba:	f7fb fb67 	bl	800028c <__adddf3>
 8004bbe:	4604      	mov	r4, r0
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	460d      	mov	r5, r1
 8004bc4:	f7fb fcae 	bl	8000524 <__aeabi_i2d>
 8004bc8:	a367      	add	r3, pc, #412	@ (adr r3, 8004d68 <_dtoa_r+0x2c8>)
 8004bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bce:	f7fb fd13 	bl	80005f8 <__aeabi_dmul>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	4629      	mov	r1, r5
 8004bda:	f7fb fb57 	bl	800028c <__adddf3>
 8004bde:	4604      	mov	r4, r0
 8004be0:	460d      	mov	r5, r1
 8004be2:	f7fb ffb9 	bl	8000b58 <__aeabi_d2iz>
 8004be6:	2200      	movs	r2, #0
 8004be8:	4607      	mov	r7, r0
 8004bea:	2300      	movs	r3, #0
 8004bec:	4620      	mov	r0, r4
 8004bee:	4629      	mov	r1, r5
 8004bf0:	f7fb ff74 	bl	8000adc <__aeabi_dcmplt>
 8004bf4:	b140      	cbz	r0, 8004c08 <_dtoa_r+0x168>
 8004bf6:	4638      	mov	r0, r7
 8004bf8:	f7fb fc94 	bl	8000524 <__aeabi_i2d>
 8004bfc:	4622      	mov	r2, r4
 8004bfe:	462b      	mov	r3, r5
 8004c00:	f7fb ff62 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c04:	b900      	cbnz	r0, 8004c08 <_dtoa_r+0x168>
 8004c06:	3f01      	subs	r7, #1
 8004c08:	2f16      	cmp	r7, #22
 8004c0a:	d852      	bhi.n	8004cb2 <_dtoa_r+0x212>
 8004c0c:	4b5d      	ldr	r3, [pc, #372]	@ (8004d84 <_dtoa_r+0x2e4>)
 8004c0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004c1a:	f7fb ff5f 	bl	8000adc <__aeabi_dcmplt>
 8004c1e:	2800      	cmp	r0, #0
 8004c20:	d049      	beq.n	8004cb6 <_dtoa_r+0x216>
 8004c22:	3f01      	subs	r7, #1
 8004c24:	2300      	movs	r3, #0
 8004c26:	9310      	str	r3, [sp, #64]	@ 0x40
 8004c28:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004c2a:	1b9b      	subs	r3, r3, r6
 8004c2c:	1e5a      	subs	r2, r3, #1
 8004c2e:	bf45      	ittet	mi
 8004c30:	f1c3 0301 	rsbmi	r3, r3, #1
 8004c34:	9300      	strmi	r3, [sp, #0]
 8004c36:	2300      	movpl	r3, #0
 8004c38:	2300      	movmi	r3, #0
 8004c3a:	9206      	str	r2, [sp, #24]
 8004c3c:	bf54      	ite	pl
 8004c3e:	9300      	strpl	r3, [sp, #0]
 8004c40:	9306      	strmi	r3, [sp, #24]
 8004c42:	2f00      	cmp	r7, #0
 8004c44:	db39      	blt.n	8004cba <_dtoa_r+0x21a>
 8004c46:	9b06      	ldr	r3, [sp, #24]
 8004c48:	970d      	str	r7, [sp, #52]	@ 0x34
 8004c4a:	443b      	add	r3, r7
 8004c4c:	9306      	str	r3, [sp, #24]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	9308      	str	r3, [sp, #32]
 8004c52:	9b07      	ldr	r3, [sp, #28]
 8004c54:	2b09      	cmp	r3, #9
 8004c56:	d863      	bhi.n	8004d20 <_dtoa_r+0x280>
 8004c58:	2b05      	cmp	r3, #5
 8004c5a:	bfc4      	itt	gt
 8004c5c:	3b04      	subgt	r3, #4
 8004c5e:	9307      	strgt	r3, [sp, #28]
 8004c60:	9b07      	ldr	r3, [sp, #28]
 8004c62:	f1a3 0302 	sub.w	r3, r3, #2
 8004c66:	bfcc      	ite	gt
 8004c68:	2400      	movgt	r4, #0
 8004c6a:	2401      	movle	r4, #1
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d863      	bhi.n	8004d38 <_dtoa_r+0x298>
 8004c70:	e8df f003 	tbb	[pc, r3]
 8004c74:	2b375452 	.word	0x2b375452
 8004c78:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004c7c:	441e      	add	r6, r3
 8004c7e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004c82:	2b20      	cmp	r3, #32
 8004c84:	bfc1      	itttt	gt
 8004c86:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004c8a:	409f      	lslgt	r7, r3
 8004c8c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004c90:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004c94:	bfd6      	itet	le
 8004c96:	f1c3 0320 	rsble	r3, r3, #32
 8004c9a:	ea47 0003 	orrgt.w	r0, r7, r3
 8004c9e:	fa04 f003 	lslle.w	r0, r4, r3
 8004ca2:	f7fb fc2f 	bl	8000504 <__aeabi_ui2d>
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004cac:	3e01      	subs	r6, #1
 8004cae:	9212      	str	r2, [sp, #72]	@ 0x48
 8004cb0:	e776      	b.n	8004ba0 <_dtoa_r+0x100>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e7b7      	b.n	8004c26 <_dtoa_r+0x186>
 8004cb6:	9010      	str	r0, [sp, #64]	@ 0x40
 8004cb8:	e7b6      	b.n	8004c28 <_dtoa_r+0x188>
 8004cba:	9b00      	ldr	r3, [sp, #0]
 8004cbc:	1bdb      	subs	r3, r3, r7
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	427b      	negs	r3, r7
 8004cc2:	9308      	str	r3, [sp, #32]
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	930d      	str	r3, [sp, #52]	@ 0x34
 8004cc8:	e7c3      	b.n	8004c52 <_dtoa_r+0x1b2>
 8004cca:	2301      	movs	r3, #1
 8004ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004cd0:	eb07 0b03 	add.w	fp, r7, r3
 8004cd4:	f10b 0301 	add.w	r3, fp, #1
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	9303      	str	r3, [sp, #12]
 8004cdc:	bfb8      	it	lt
 8004cde:	2301      	movlt	r3, #1
 8004ce0:	e006      	b.n	8004cf0 <_dtoa_r+0x250>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ce6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	dd28      	ble.n	8004d3e <_dtoa_r+0x29e>
 8004cec:	469b      	mov	fp, r3
 8004cee:	9303      	str	r3, [sp, #12]
 8004cf0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	2204      	movs	r2, #4
 8004cf8:	f102 0514 	add.w	r5, r2, #20
 8004cfc:	429d      	cmp	r5, r3
 8004cfe:	d926      	bls.n	8004d4e <_dtoa_r+0x2ae>
 8004d00:	6041      	str	r1, [r0, #4]
 8004d02:	4648      	mov	r0, r9
 8004d04:	f000 fd9c 	bl	8005840 <_Balloc>
 8004d08:	4682      	mov	sl, r0
 8004d0a:	2800      	cmp	r0, #0
 8004d0c:	d142      	bne.n	8004d94 <_dtoa_r+0x2f4>
 8004d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004d88 <_dtoa_r+0x2e8>)
 8004d10:	4602      	mov	r2, r0
 8004d12:	f240 11af 	movw	r1, #431	@ 0x1af
 8004d16:	e6da      	b.n	8004ace <_dtoa_r+0x2e>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	e7e3      	b.n	8004ce4 <_dtoa_r+0x244>
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	e7d5      	b.n	8004ccc <_dtoa_r+0x22c>
 8004d20:	2401      	movs	r4, #1
 8004d22:	2300      	movs	r3, #0
 8004d24:	9307      	str	r3, [sp, #28]
 8004d26:	9409      	str	r4, [sp, #36]	@ 0x24
 8004d28:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f8cd b00c 	str.w	fp, [sp, #12]
 8004d32:	2312      	movs	r3, #18
 8004d34:	920c      	str	r2, [sp, #48]	@ 0x30
 8004d36:	e7db      	b.n	8004cf0 <_dtoa_r+0x250>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d3c:	e7f4      	b.n	8004d28 <_dtoa_r+0x288>
 8004d3e:	f04f 0b01 	mov.w	fp, #1
 8004d42:	f8cd b00c 	str.w	fp, [sp, #12]
 8004d46:	465b      	mov	r3, fp
 8004d48:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8004d4c:	e7d0      	b.n	8004cf0 <_dtoa_r+0x250>
 8004d4e:	3101      	adds	r1, #1
 8004d50:	0052      	lsls	r2, r2, #1
 8004d52:	e7d1      	b.n	8004cf8 <_dtoa_r+0x258>
 8004d54:	f3af 8000 	nop.w
 8004d58:	636f4361 	.word	0x636f4361
 8004d5c:	3fd287a7 	.word	0x3fd287a7
 8004d60:	8b60c8b3 	.word	0x8b60c8b3
 8004d64:	3fc68a28 	.word	0x3fc68a28
 8004d68:	509f79fb 	.word	0x509f79fb
 8004d6c:	3fd34413 	.word	0x3fd34413
 8004d70:	08006add 	.word	0x08006add
 8004d74:	08006af4 	.word	0x08006af4
 8004d78:	7ff00000 	.word	0x7ff00000
 8004d7c:	08006aad 	.word	0x08006aad
 8004d80:	3ff80000 	.word	0x3ff80000
 8004d84:	08006c48 	.word	0x08006c48
 8004d88:	08006b4c 	.word	0x08006b4c
 8004d8c:	08006ad9 	.word	0x08006ad9
 8004d90:	08006aac 	.word	0x08006aac
 8004d94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004d98:	6018      	str	r0, [r3, #0]
 8004d9a:	9b03      	ldr	r3, [sp, #12]
 8004d9c:	2b0e      	cmp	r3, #14
 8004d9e:	f200 80a1 	bhi.w	8004ee4 <_dtoa_r+0x444>
 8004da2:	2c00      	cmp	r4, #0
 8004da4:	f000 809e 	beq.w	8004ee4 <_dtoa_r+0x444>
 8004da8:	2f00      	cmp	r7, #0
 8004daa:	dd33      	ble.n	8004e14 <_dtoa_r+0x374>
 8004dac:	4b9c      	ldr	r3, [pc, #624]	@ (8005020 <_dtoa_r+0x580>)
 8004dae:	f007 020f 	and.w	r2, r7, #15
 8004db2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004db6:	ed93 7b00 	vldr	d7, [r3]
 8004dba:	05f8      	lsls	r0, r7, #23
 8004dbc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004dc0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004dc4:	d516      	bpl.n	8004df4 <_dtoa_r+0x354>
 8004dc6:	4b97      	ldr	r3, [pc, #604]	@ (8005024 <_dtoa_r+0x584>)
 8004dc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004dcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004dd0:	f7fb fd3c 	bl	800084c <__aeabi_ddiv>
 8004dd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004dd8:	f004 040f 	and.w	r4, r4, #15
 8004ddc:	2603      	movs	r6, #3
 8004dde:	4d91      	ldr	r5, [pc, #580]	@ (8005024 <_dtoa_r+0x584>)
 8004de0:	b954      	cbnz	r4, 8004df8 <_dtoa_r+0x358>
 8004de2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004de6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dea:	f7fb fd2f 	bl	800084c <__aeabi_ddiv>
 8004dee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004df2:	e028      	b.n	8004e46 <_dtoa_r+0x3a6>
 8004df4:	2602      	movs	r6, #2
 8004df6:	e7f2      	b.n	8004dde <_dtoa_r+0x33e>
 8004df8:	07e1      	lsls	r1, r4, #31
 8004dfa:	d508      	bpl.n	8004e0e <_dtoa_r+0x36e>
 8004dfc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004e00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e04:	f7fb fbf8 	bl	80005f8 <__aeabi_dmul>
 8004e08:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004e0c:	3601      	adds	r6, #1
 8004e0e:	1064      	asrs	r4, r4, #1
 8004e10:	3508      	adds	r5, #8
 8004e12:	e7e5      	b.n	8004de0 <_dtoa_r+0x340>
 8004e14:	f000 80af 	beq.w	8004f76 <_dtoa_r+0x4d6>
 8004e18:	427c      	negs	r4, r7
 8004e1a:	4b81      	ldr	r3, [pc, #516]	@ (8005020 <_dtoa_r+0x580>)
 8004e1c:	4d81      	ldr	r5, [pc, #516]	@ (8005024 <_dtoa_r+0x584>)
 8004e1e:	f004 020f 	and.w	r2, r4, #15
 8004e22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004e2e:	f7fb fbe3 	bl	80005f8 <__aeabi_dmul>
 8004e32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e36:	1124      	asrs	r4, r4, #4
 8004e38:	2300      	movs	r3, #0
 8004e3a:	2602      	movs	r6, #2
 8004e3c:	2c00      	cmp	r4, #0
 8004e3e:	f040 808f 	bne.w	8004f60 <_dtoa_r+0x4c0>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1d3      	bne.n	8004dee <_dtoa_r+0x34e>
 8004e46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004e48:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 8094 	beq.w	8004f7a <_dtoa_r+0x4da>
 8004e52:	4b75      	ldr	r3, [pc, #468]	@ (8005028 <_dtoa_r+0x588>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	4620      	mov	r0, r4
 8004e58:	4629      	mov	r1, r5
 8004e5a:	f7fb fe3f 	bl	8000adc <__aeabi_dcmplt>
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	f000 808b 	beq.w	8004f7a <_dtoa_r+0x4da>
 8004e64:	9b03      	ldr	r3, [sp, #12]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 8087 	beq.w	8004f7a <_dtoa_r+0x4da>
 8004e6c:	f1bb 0f00 	cmp.w	fp, #0
 8004e70:	dd34      	ble.n	8004edc <_dtoa_r+0x43c>
 8004e72:	4620      	mov	r0, r4
 8004e74:	4b6d      	ldr	r3, [pc, #436]	@ (800502c <_dtoa_r+0x58c>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	4629      	mov	r1, r5
 8004e7a:	f7fb fbbd 	bl	80005f8 <__aeabi_dmul>
 8004e7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e82:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8004e86:	3601      	adds	r6, #1
 8004e88:	465c      	mov	r4, fp
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	f7fb fb4a 	bl	8000524 <__aeabi_i2d>
 8004e90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e94:	f7fb fbb0 	bl	80005f8 <__aeabi_dmul>
 8004e98:	4b65      	ldr	r3, [pc, #404]	@ (8005030 <_dtoa_r+0x590>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f7fb f9f6 	bl	800028c <__adddf3>
 8004ea0:	4605      	mov	r5, r0
 8004ea2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004ea6:	2c00      	cmp	r4, #0
 8004ea8:	d16a      	bne.n	8004f80 <_dtoa_r+0x4e0>
 8004eaa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004eae:	4b61      	ldr	r3, [pc, #388]	@ (8005034 <_dtoa_r+0x594>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f7fb f9e9 	bl	8000288 <__aeabi_dsub>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	460b      	mov	r3, r1
 8004eba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ebe:	462a      	mov	r2, r5
 8004ec0:	4633      	mov	r3, r6
 8004ec2:	f7fb fe29 	bl	8000b18 <__aeabi_dcmpgt>
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	f040 8298 	bne.w	80053fc <_dtoa_r+0x95c>
 8004ecc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ed0:	462a      	mov	r2, r5
 8004ed2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004ed6:	f7fb fe01 	bl	8000adc <__aeabi_dcmplt>
 8004eda:	bb38      	cbnz	r0, 8004f2c <_dtoa_r+0x48c>
 8004edc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004ee0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004ee4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f2c0 8157 	blt.w	800519a <_dtoa_r+0x6fa>
 8004eec:	2f0e      	cmp	r7, #14
 8004eee:	f300 8154 	bgt.w	800519a <_dtoa_r+0x6fa>
 8004ef2:	4b4b      	ldr	r3, [pc, #300]	@ (8005020 <_dtoa_r+0x580>)
 8004ef4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004ef8:	ed93 7b00 	vldr	d7, [r3]
 8004efc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	ed8d 7b00 	vstr	d7, [sp]
 8004f04:	f280 80e5 	bge.w	80050d2 <_dtoa_r+0x632>
 8004f08:	9b03      	ldr	r3, [sp, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f300 80e1 	bgt.w	80050d2 <_dtoa_r+0x632>
 8004f10:	d10c      	bne.n	8004f2c <_dtoa_r+0x48c>
 8004f12:	4b48      	ldr	r3, [pc, #288]	@ (8005034 <_dtoa_r+0x594>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	ec51 0b17 	vmov	r0, r1, d7
 8004f1a:	f7fb fb6d 	bl	80005f8 <__aeabi_dmul>
 8004f1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f22:	f7fb fdef 	bl	8000b04 <__aeabi_dcmpge>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	f000 8266 	beq.w	80053f8 <_dtoa_r+0x958>
 8004f2c:	2400      	movs	r4, #0
 8004f2e:	4625      	mov	r5, r4
 8004f30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f32:	4656      	mov	r6, sl
 8004f34:	ea6f 0803 	mvn.w	r8, r3
 8004f38:	2700      	movs	r7, #0
 8004f3a:	4621      	mov	r1, r4
 8004f3c:	4648      	mov	r0, r9
 8004f3e:	f000 fcbf 	bl	80058c0 <_Bfree>
 8004f42:	2d00      	cmp	r5, #0
 8004f44:	f000 80bd 	beq.w	80050c2 <_dtoa_r+0x622>
 8004f48:	b12f      	cbz	r7, 8004f56 <_dtoa_r+0x4b6>
 8004f4a:	42af      	cmp	r7, r5
 8004f4c:	d003      	beq.n	8004f56 <_dtoa_r+0x4b6>
 8004f4e:	4639      	mov	r1, r7
 8004f50:	4648      	mov	r0, r9
 8004f52:	f000 fcb5 	bl	80058c0 <_Bfree>
 8004f56:	4629      	mov	r1, r5
 8004f58:	4648      	mov	r0, r9
 8004f5a:	f000 fcb1 	bl	80058c0 <_Bfree>
 8004f5e:	e0b0      	b.n	80050c2 <_dtoa_r+0x622>
 8004f60:	07e2      	lsls	r2, r4, #31
 8004f62:	d505      	bpl.n	8004f70 <_dtoa_r+0x4d0>
 8004f64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f68:	f7fb fb46 	bl	80005f8 <__aeabi_dmul>
 8004f6c:	3601      	adds	r6, #1
 8004f6e:	2301      	movs	r3, #1
 8004f70:	1064      	asrs	r4, r4, #1
 8004f72:	3508      	adds	r5, #8
 8004f74:	e762      	b.n	8004e3c <_dtoa_r+0x39c>
 8004f76:	2602      	movs	r6, #2
 8004f78:	e765      	b.n	8004e46 <_dtoa_r+0x3a6>
 8004f7a:	9c03      	ldr	r4, [sp, #12]
 8004f7c:	46b8      	mov	r8, r7
 8004f7e:	e784      	b.n	8004e8a <_dtoa_r+0x3ea>
 8004f80:	4b27      	ldr	r3, [pc, #156]	@ (8005020 <_dtoa_r+0x580>)
 8004f82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004f84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f8c:	4454      	add	r4, sl
 8004f8e:	2900      	cmp	r1, #0
 8004f90:	d054      	beq.n	800503c <_dtoa_r+0x59c>
 8004f92:	4929      	ldr	r1, [pc, #164]	@ (8005038 <_dtoa_r+0x598>)
 8004f94:	2000      	movs	r0, #0
 8004f96:	f7fb fc59 	bl	800084c <__aeabi_ddiv>
 8004f9a:	4633      	mov	r3, r6
 8004f9c:	462a      	mov	r2, r5
 8004f9e:	f7fb f973 	bl	8000288 <__aeabi_dsub>
 8004fa2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004fa6:	4656      	mov	r6, sl
 8004fa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fac:	f7fb fdd4 	bl	8000b58 <__aeabi_d2iz>
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	f7fb fab7 	bl	8000524 <__aeabi_i2d>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fbe:	f7fb f963 	bl	8000288 <__aeabi_dsub>
 8004fc2:	3530      	adds	r5, #48	@ 0x30
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004fcc:	f806 5b01 	strb.w	r5, [r6], #1
 8004fd0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004fd4:	f7fb fd82 	bl	8000adc <__aeabi_dcmplt>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d172      	bne.n	80050c2 <_dtoa_r+0x622>
 8004fdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fe0:	4911      	ldr	r1, [pc, #68]	@ (8005028 <_dtoa_r+0x588>)
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	f7fb f950 	bl	8000288 <__aeabi_dsub>
 8004fe8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004fec:	f7fb fd76 	bl	8000adc <__aeabi_dcmplt>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	f040 80b4 	bne.w	800515e <_dtoa_r+0x6be>
 8004ff6:	42a6      	cmp	r6, r4
 8004ff8:	f43f af70 	beq.w	8004edc <_dtoa_r+0x43c>
 8004ffc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005000:	4b0a      	ldr	r3, [pc, #40]	@ (800502c <_dtoa_r+0x58c>)
 8005002:	2200      	movs	r2, #0
 8005004:	f7fb faf8 	bl	80005f8 <__aeabi_dmul>
 8005008:	4b08      	ldr	r3, [pc, #32]	@ (800502c <_dtoa_r+0x58c>)
 800500a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800500e:	2200      	movs	r2, #0
 8005010:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005014:	f7fb faf0 	bl	80005f8 <__aeabi_dmul>
 8005018:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800501c:	e7c4      	b.n	8004fa8 <_dtoa_r+0x508>
 800501e:	bf00      	nop
 8005020:	08006c48 	.word	0x08006c48
 8005024:	08006c20 	.word	0x08006c20
 8005028:	3ff00000 	.word	0x3ff00000
 800502c:	40240000 	.word	0x40240000
 8005030:	401c0000 	.word	0x401c0000
 8005034:	40140000 	.word	0x40140000
 8005038:	3fe00000 	.word	0x3fe00000
 800503c:	4631      	mov	r1, r6
 800503e:	4628      	mov	r0, r5
 8005040:	f7fb fada 	bl	80005f8 <__aeabi_dmul>
 8005044:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005048:	9413      	str	r4, [sp, #76]	@ 0x4c
 800504a:	4656      	mov	r6, sl
 800504c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005050:	f7fb fd82 	bl	8000b58 <__aeabi_d2iz>
 8005054:	4605      	mov	r5, r0
 8005056:	f7fb fa65 	bl	8000524 <__aeabi_i2d>
 800505a:	4602      	mov	r2, r0
 800505c:	460b      	mov	r3, r1
 800505e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005062:	f7fb f911 	bl	8000288 <__aeabi_dsub>
 8005066:	3530      	adds	r5, #48	@ 0x30
 8005068:	f806 5b01 	strb.w	r5, [r6], #1
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	42a6      	cmp	r6, r4
 8005072:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	d124      	bne.n	80050c6 <_dtoa_r+0x626>
 800507c:	4baf      	ldr	r3, [pc, #700]	@ (800533c <_dtoa_r+0x89c>)
 800507e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005082:	f7fb f903 	bl	800028c <__adddf3>
 8005086:	4602      	mov	r2, r0
 8005088:	460b      	mov	r3, r1
 800508a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800508e:	f7fb fd43 	bl	8000b18 <__aeabi_dcmpgt>
 8005092:	2800      	cmp	r0, #0
 8005094:	d163      	bne.n	800515e <_dtoa_r+0x6be>
 8005096:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800509a:	49a8      	ldr	r1, [pc, #672]	@ (800533c <_dtoa_r+0x89c>)
 800509c:	2000      	movs	r0, #0
 800509e:	f7fb f8f3 	bl	8000288 <__aeabi_dsub>
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050aa:	f7fb fd17 	bl	8000adc <__aeabi_dcmplt>
 80050ae:	2800      	cmp	r0, #0
 80050b0:	f43f af14 	beq.w	8004edc <_dtoa_r+0x43c>
 80050b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80050b6:	1e73      	subs	r3, r6, #1
 80050b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80050ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80050be:	2b30      	cmp	r3, #48	@ 0x30
 80050c0:	d0f8      	beq.n	80050b4 <_dtoa_r+0x614>
 80050c2:	4647      	mov	r7, r8
 80050c4:	e03b      	b.n	800513e <_dtoa_r+0x69e>
 80050c6:	4b9e      	ldr	r3, [pc, #632]	@ (8005340 <_dtoa_r+0x8a0>)
 80050c8:	f7fb fa96 	bl	80005f8 <__aeabi_dmul>
 80050cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050d0:	e7bc      	b.n	800504c <_dtoa_r+0x5ac>
 80050d2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80050d6:	4656      	mov	r6, sl
 80050d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050dc:	4620      	mov	r0, r4
 80050de:	4629      	mov	r1, r5
 80050e0:	f7fb fbb4 	bl	800084c <__aeabi_ddiv>
 80050e4:	f7fb fd38 	bl	8000b58 <__aeabi_d2iz>
 80050e8:	4680      	mov	r8, r0
 80050ea:	f7fb fa1b 	bl	8000524 <__aeabi_i2d>
 80050ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050f2:	f7fb fa81 	bl	80005f8 <__aeabi_dmul>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4620      	mov	r0, r4
 80050fc:	4629      	mov	r1, r5
 80050fe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005102:	f7fb f8c1 	bl	8000288 <__aeabi_dsub>
 8005106:	f806 4b01 	strb.w	r4, [r6], #1
 800510a:	9d03      	ldr	r5, [sp, #12]
 800510c:	eba6 040a 	sub.w	r4, r6, sl
 8005110:	42a5      	cmp	r5, r4
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	d133      	bne.n	8005180 <_dtoa_r+0x6e0>
 8005118:	f7fb f8b8 	bl	800028c <__adddf3>
 800511c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005120:	4604      	mov	r4, r0
 8005122:	460d      	mov	r5, r1
 8005124:	f7fb fcf8 	bl	8000b18 <__aeabi_dcmpgt>
 8005128:	b9c0      	cbnz	r0, 800515c <_dtoa_r+0x6bc>
 800512a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800512e:	4620      	mov	r0, r4
 8005130:	4629      	mov	r1, r5
 8005132:	f7fb fcc9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005136:	b110      	cbz	r0, 800513e <_dtoa_r+0x69e>
 8005138:	f018 0f01 	tst.w	r8, #1
 800513c:	d10e      	bne.n	800515c <_dtoa_r+0x6bc>
 800513e:	9902      	ldr	r1, [sp, #8]
 8005140:	4648      	mov	r0, r9
 8005142:	f000 fbbd 	bl	80058c0 <_Bfree>
 8005146:	2300      	movs	r3, #0
 8005148:	7033      	strb	r3, [r6, #0]
 800514a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800514c:	3701      	adds	r7, #1
 800514e:	601f      	str	r7, [r3, #0]
 8005150:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 824b 	beq.w	80055ee <_dtoa_r+0xb4e>
 8005158:	601e      	str	r6, [r3, #0]
 800515a:	e248      	b.n	80055ee <_dtoa_r+0xb4e>
 800515c:	46b8      	mov	r8, r7
 800515e:	4633      	mov	r3, r6
 8005160:	461e      	mov	r6, r3
 8005162:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005166:	2a39      	cmp	r2, #57	@ 0x39
 8005168:	d106      	bne.n	8005178 <_dtoa_r+0x6d8>
 800516a:	459a      	cmp	sl, r3
 800516c:	d1f8      	bne.n	8005160 <_dtoa_r+0x6c0>
 800516e:	2230      	movs	r2, #48	@ 0x30
 8005170:	f108 0801 	add.w	r8, r8, #1
 8005174:	f88a 2000 	strb.w	r2, [sl]
 8005178:	781a      	ldrb	r2, [r3, #0]
 800517a:	3201      	adds	r2, #1
 800517c:	701a      	strb	r2, [r3, #0]
 800517e:	e7a0      	b.n	80050c2 <_dtoa_r+0x622>
 8005180:	4b6f      	ldr	r3, [pc, #444]	@ (8005340 <_dtoa_r+0x8a0>)
 8005182:	2200      	movs	r2, #0
 8005184:	f7fb fa38 	bl	80005f8 <__aeabi_dmul>
 8005188:	2200      	movs	r2, #0
 800518a:	2300      	movs	r3, #0
 800518c:	4604      	mov	r4, r0
 800518e:	460d      	mov	r5, r1
 8005190:	f7fb fc9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005194:	2800      	cmp	r0, #0
 8005196:	d09f      	beq.n	80050d8 <_dtoa_r+0x638>
 8005198:	e7d1      	b.n	800513e <_dtoa_r+0x69e>
 800519a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800519c:	2a00      	cmp	r2, #0
 800519e:	f000 80ea 	beq.w	8005376 <_dtoa_r+0x8d6>
 80051a2:	9a07      	ldr	r2, [sp, #28]
 80051a4:	2a01      	cmp	r2, #1
 80051a6:	f300 80cd 	bgt.w	8005344 <_dtoa_r+0x8a4>
 80051aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80051ac:	2a00      	cmp	r2, #0
 80051ae:	f000 80c1 	beq.w	8005334 <_dtoa_r+0x894>
 80051b2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80051b6:	9c08      	ldr	r4, [sp, #32]
 80051b8:	9e00      	ldr	r6, [sp, #0]
 80051ba:	9a00      	ldr	r2, [sp, #0]
 80051bc:	441a      	add	r2, r3
 80051be:	9200      	str	r2, [sp, #0]
 80051c0:	9a06      	ldr	r2, [sp, #24]
 80051c2:	2101      	movs	r1, #1
 80051c4:	441a      	add	r2, r3
 80051c6:	4648      	mov	r0, r9
 80051c8:	9206      	str	r2, [sp, #24]
 80051ca:	f000 fc2d 	bl	8005a28 <__i2b>
 80051ce:	4605      	mov	r5, r0
 80051d0:	b166      	cbz	r6, 80051ec <_dtoa_r+0x74c>
 80051d2:	9b06      	ldr	r3, [sp, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	dd09      	ble.n	80051ec <_dtoa_r+0x74c>
 80051d8:	42b3      	cmp	r3, r6
 80051da:	9a00      	ldr	r2, [sp, #0]
 80051dc:	bfa8      	it	ge
 80051de:	4633      	movge	r3, r6
 80051e0:	1ad2      	subs	r2, r2, r3
 80051e2:	9200      	str	r2, [sp, #0]
 80051e4:	9a06      	ldr	r2, [sp, #24]
 80051e6:	1af6      	subs	r6, r6, r3
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	9306      	str	r3, [sp, #24]
 80051ec:	9b08      	ldr	r3, [sp, #32]
 80051ee:	b30b      	cbz	r3, 8005234 <_dtoa_r+0x794>
 80051f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 80c6 	beq.w	8005384 <_dtoa_r+0x8e4>
 80051f8:	2c00      	cmp	r4, #0
 80051fa:	f000 80c0 	beq.w	800537e <_dtoa_r+0x8de>
 80051fe:	4629      	mov	r1, r5
 8005200:	4622      	mov	r2, r4
 8005202:	4648      	mov	r0, r9
 8005204:	f000 fcc8 	bl	8005b98 <__pow5mult>
 8005208:	9a02      	ldr	r2, [sp, #8]
 800520a:	4601      	mov	r1, r0
 800520c:	4605      	mov	r5, r0
 800520e:	4648      	mov	r0, r9
 8005210:	f000 fc20 	bl	8005a54 <__multiply>
 8005214:	9902      	ldr	r1, [sp, #8]
 8005216:	4680      	mov	r8, r0
 8005218:	4648      	mov	r0, r9
 800521a:	f000 fb51 	bl	80058c0 <_Bfree>
 800521e:	9b08      	ldr	r3, [sp, #32]
 8005220:	1b1b      	subs	r3, r3, r4
 8005222:	9308      	str	r3, [sp, #32]
 8005224:	f000 80b1 	beq.w	800538a <_dtoa_r+0x8ea>
 8005228:	9a08      	ldr	r2, [sp, #32]
 800522a:	4641      	mov	r1, r8
 800522c:	4648      	mov	r0, r9
 800522e:	f000 fcb3 	bl	8005b98 <__pow5mult>
 8005232:	9002      	str	r0, [sp, #8]
 8005234:	2101      	movs	r1, #1
 8005236:	4648      	mov	r0, r9
 8005238:	f000 fbf6 	bl	8005a28 <__i2b>
 800523c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800523e:	4604      	mov	r4, r0
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 81d8 	beq.w	80055f6 <_dtoa_r+0xb56>
 8005246:	461a      	mov	r2, r3
 8005248:	4601      	mov	r1, r0
 800524a:	4648      	mov	r0, r9
 800524c:	f000 fca4 	bl	8005b98 <__pow5mult>
 8005250:	9b07      	ldr	r3, [sp, #28]
 8005252:	2b01      	cmp	r3, #1
 8005254:	4604      	mov	r4, r0
 8005256:	f300 809f 	bgt.w	8005398 <_dtoa_r+0x8f8>
 800525a:	9b04      	ldr	r3, [sp, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	f040 8097 	bne.w	8005390 <_dtoa_r+0x8f0>
 8005262:	9b05      	ldr	r3, [sp, #20]
 8005264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005268:	2b00      	cmp	r3, #0
 800526a:	f040 8093 	bne.w	8005394 <_dtoa_r+0x8f4>
 800526e:	9b05      	ldr	r3, [sp, #20]
 8005270:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005274:	0d1b      	lsrs	r3, r3, #20
 8005276:	051b      	lsls	r3, r3, #20
 8005278:	b133      	cbz	r3, 8005288 <_dtoa_r+0x7e8>
 800527a:	9b00      	ldr	r3, [sp, #0]
 800527c:	3301      	adds	r3, #1
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	9b06      	ldr	r3, [sp, #24]
 8005282:	3301      	adds	r3, #1
 8005284:	9306      	str	r3, [sp, #24]
 8005286:	2301      	movs	r3, #1
 8005288:	9308      	str	r3, [sp, #32]
 800528a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800528c:	2b00      	cmp	r3, #0
 800528e:	f000 81b8 	beq.w	8005602 <_dtoa_r+0xb62>
 8005292:	6923      	ldr	r3, [r4, #16]
 8005294:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005298:	6918      	ldr	r0, [r3, #16]
 800529a:	f000 fb79 	bl	8005990 <__hi0bits>
 800529e:	f1c0 0020 	rsb	r0, r0, #32
 80052a2:	9b06      	ldr	r3, [sp, #24]
 80052a4:	4418      	add	r0, r3
 80052a6:	f010 001f 	ands.w	r0, r0, #31
 80052aa:	f000 8082 	beq.w	80053b2 <_dtoa_r+0x912>
 80052ae:	f1c0 0320 	rsb	r3, r0, #32
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	dd73      	ble.n	800539e <_dtoa_r+0x8fe>
 80052b6:	9b00      	ldr	r3, [sp, #0]
 80052b8:	f1c0 001c 	rsb	r0, r0, #28
 80052bc:	4403      	add	r3, r0
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	9b06      	ldr	r3, [sp, #24]
 80052c2:	4403      	add	r3, r0
 80052c4:	4406      	add	r6, r0
 80052c6:	9306      	str	r3, [sp, #24]
 80052c8:	9b00      	ldr	r3, [sp, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	dd05      	ble.n	80052da <_dtoa_r+0x83a>
 80052ce:	9902      	ldr	r1, [sp, #8]
 80052d0:	461a      	mov	r2, r3
 80052d2:	4648      	mov	r0, r9
 80052d4:	f000 fcba 	bl	8005c4c <__lshift>
 80052d8:	9002      	str	r0, [sp, #8]
 80052da:	9b06      	ldr	r3, [sp, #24]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	dd05      	ble.n	80052ec <_dtoa_r+0x84c>
 80052e0:	4621      	mov	r1, r4
 80052e2:	461a      	mov	r2, r3
 80052e4:	4648      	mov	r0, r9
 80052e6:	f000 fcb1 	bl	8005c4c <__lshift>
 80052ea:	4604      	mov	r4, r0
 80052ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d061      	beq.n	80053b6 <_dtoa_r+0x916>
 80052f2:	9802      	ldr	r0, [sp, #8]
 80052f4:	4621      	mov	r1, r4
 80052f6:	f000 fd15 	bl	8005d24 <__mcmp>
 80052fa:	2800      	cmp	r0, #0
 80052fc:	da5b      	bge.n	80053b6 <_dtoa_r+0x916>
 80052fe:	2300      	movs	r3, #0
 8005300:	9902      	ldr	r1, [sp, #8]
 8005302:	220a      	movs	r2, #10
 8005304:	4648      	mov	r0, r9
 8005306:	f000 fafd 	bl	8005904 <__multadd>
 800530a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800530c:	9002      	str	r0, [sp, #8]
 800530e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8005312:	2b00      	cmp	r3, #0
 8005314:	f000 8177 	beq.w	8005606 <_dtoa_r+0xb66>
 8005318:	4629      	mov	r1, r5
 800531a:	2300      	movs	r3, #0
 800531c:	220a      	movs	r2, #10
 800531e:	4648      	mov	r0, r9
 8005320:	f000 faf0 	bl	8005904 <__multadd>
 8005324:	f1bb 0f00 	cmp.w	fp, #0
 8005328:	4605      	mov	r5, r0
 800532a:	dc6f      	bgt.n	800540c <_dtoa_r+0x96c>
 800532c:	9b07      	ldr	r3, [sp, #28]
 800532e:	2b02      	cmp	r3, #2
 8005330:	dc49      	bgt.n	80053c6 <_dtoa_r+0x926>
 8005332:	e06b      	b.n	800540c <_dtoa_r+0x96c>
 8005334:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005336:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800533a:	e73c      	b.n	80051b6 <_dtoa_r+0x716>
 800533c:	3fe00000 	.word	0x3fe00000
 8005340:	40240000 	.word	0x40240000
 8005344:	9b03      	ldr	r3, [sp, #12]
 8005346:	1e5c      	subs	r4, r3, #1
 8005348:	9b08      	ldr	r3, [sp, #32]
 800534a:	42a3      	cmp	r3, r4
 800534c:	db09      	blt.n	8005362 <_dtoa_r+0x8c2>
 800534e:	1b1c      	subs	r4, r3, r4
 8005350:	9b03      	ldr	r3, [sp, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	f6bf af30 	bge.w	80051b8 <_dtoa_r+0x718>
 8005358:	9b00      	ldr	r3, [sp, #0]
 800535a:	9a03      	ldr	r2, [sp, #12]
 800535c:	1a9e      	subs	r6, r3, r2
 800535e:	2300      	movs	r3, #0
 8005360:	e72b      	b.n	80051ba <_dtoa_r+0x71a>
 8005362:	9b08      	ldr	r3, [sp, #32]
 8005364:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005366:	9408      	str	r4, [sp, #32]
 8005368:	1ae3      	subs	r3, r4, r3
 800536a:	441a      	add	r2, r3
 800536c:	9e00      	ldr	r6, [sp, #0]
 800536e:	9b03      	ldr	r3, [sp, #12]
 8005370:	920d      	str	r2, [sp, #52]	@ 0x34
 8005372:	2400      	movs	r4, #0
 8005374:	e721      	b.n	80051ba <_dtoa_r+0x71a>
 8005376:	9c08      	ldr	r4, [sp, #32]
 8005378:	9e00      	ldr	r6, [sp, #0]
 800537a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800537c:	e728      	b.n	80051d0 <_dtoa_r+0x730>
 800537e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005382:	e751      	b.n	8005228 <_dtoa_r+0x788>
 8005384:	9a08      	ldr	r2, [sp, #32]
 8005386:	9902      	ldr	r1, [sp, #8]
 8005388:	e750      	b.n	800522c <_dtoa_r+0x78c>
 800538a:	f8cd 8008 	str.w	r8, [sp, #8]
 800538e:	e751      	b.n	8005234 <_dtoa_r+0x794>
 8005390:	2300      	movs	r3, #0
 8005392:	e779      	b.n	8005288 <_dtoa_r+0x7e8>
 8005394:	9b04      	ldr	r3, [sp, #16]
 8005396:	e777      	b.n	8005288 <_dtoa_r+0x7e8>
 8005398:	2300      	movs	r3, #0
 800539a:	9308      	str	r3, [sp, #32]
 800539c:	e779      	b.n	8005292 <_dtoa_r+0x7f2>
 800539e:	d093      	beq.n	80052c8 <_dtoa_r+0x828>
 80053a0:	9a00      	ldr	r2, [sp, #0]
 80053a2:	331c      	adds	r3, #28
 80053a4:	441a      	add	r2, r3
 80053a6:	9200      	str	r2, [sp, #0]
 80053a8:	9a06      	ldr	r2, [sp, #24]
 80053aa:	441a      	add	r2, r3
 80053ac:	441e      	add	r6, r3
 80053ae:	9206      	str	r2, [sp, #24]
 80053b0:	e78a      	b.n	80052c8 <_dtoa_r+0x828>
 80053b2:	4603      	mov	r3, r0
 80053b4:	e7f4      	b.n	80053a0 <_dtoa_r+0x900>
 80053b6:	9b03      	ldr	r3, [sp, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	46b8      	mov	r8, r7
 80053bc:	dc20      	bgt.n	8005400 <_dtoa_r+0x960>
 80053be:	469b      	mov	fp, r3
 80053c0:	9b07      	ldr	r3, [sp, #28]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	dd1e      	ble.n	8005404 <_dtoa_r+0x964>
 80053c6:	f1bb 0f00 	cmp.w	fp, #0
 80053ca:	f47f adb1 	bne.w	8004f30 <_dtoa_r+0x490>
 80053ce:	4621      	mov	r1, r4
 80053d0:	465b      	mov	r3, fp
 80053d2:	2205      	movs	r2, #5
 80053d4:	4648      	mov	r0, r9
 80053d6:	f000 fa95 	bl	8005904 <__multadd>
 80053da:	4601      	mov	r1, r0
 80053dc:	4604      	mov	r4, r0
 80053de:	9802      	ldr	r0, [sp, #8]
 80053e0:	f000 fca0 	bl	8005d24 <__mcmp>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	f77f ada3 	ble.w	8004f30 <_dtoa_r+0x490>
 80053ea:	4656      	mov	r6, sl
 80053ec:	2331      	movs	r3, #49	@ 0x31
 80053ee:	f806 3b01 	strb.w	r3, [r6], #1
 80053f2:	f108 0801 	add.w	r8, r8, #1
 80053f6:	e59f      	b.n	8004f38 <_dtoa_r+0x498>
 80053f8:	9c03      	ldr	r4, [sp, #12]
 80053fa:	46b8      	mov	r8, r7
 80053fc:	4625      	mov	r5, r4
 80053fe:	e7f4      	b.n	80053ea <_dtoa_r+0x94a>
 8005400:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005404:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 8101 	beq.w	800560e <_dtoa_r+0xb6e>
 800540c:	2e00      	cmp	r6, #0
 800540e:	dd05      	ble.n	800541c <_dtoa_r+0x97c>
 8005410:	4629      	mov	r1, r5
 8005412:	4632      	mov	r2, r6
 8005414:	4648      	mov	r0, r9
 8005416:	f000 fc19 	bl	8005c4c <__lshift>
 800541a:	4605      	mov	r5, r0
 800541c:	9b08      	ldr	r3, [sp, #32]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d05c      	beq.n	80054dc <_dtoa_r+0xa3c>
 8005422:	6869      	ldr	r1, [r5, #4]
 8005424:	4648      	mov	r0, r9
 8005426:	f000 fa0b 	bl	8005840 <_Balloc>
 800542a:	4606      	mov	r6, r0
 800542c:	b928      	cbnz	r0, 800543a <_dtoa_r+0x99a>
 800542e:	4b82      	ldr	r3, [pc, #520]	@ (8005638 <_dtoa_r+0xb98>)
 8005430:	4602      	mov	r2, r0
 8005432:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005436:	f7ff bb4a 	b.w	8004ace <_dtoa_r+0x2e>
 800543a:	692a      	ldr	r2, [r5, #16]
 800543c:	3202      	adds	r2, #2
 800543e:	0092      	lsls	r2, r2, #2
 8005440:	f105 010c 	add.w	r1, r5, #12
 8005444:	300c      	adds	r0, #12
 8005446:	f000 ffa3 	bl	8006390 <memcpy>
 800544a:	2201      	movs	r2, #1
 800544c:	4631      	mov	r1, r6
 800544e:	4648      	mov	r0, r9
 8005450:	f000 fbfc 	bl	8005c4c <__lshift>
 8005454:	f10a 0301 	add.w	r3, sl, #1
 8005458:	9300      	str	r3, [sp, #0]
 800545a:	eb0a 030b 	add.w	r3, sl, fp
 800545e:	9308      	str	r3, [sp, #32]
 8005460:	9b04      	ldr	r3, [sp, #16]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	462f      	mov	r7, r5
 8005468:	9306      	str	r3, [sp, #24]
 800546a:	4605      	mov	r5, r0
 800546c:	9b00      	ldr	r3, [sp, #0]
 800546e:	9802      	ldr	r0, [sp, #8]
 8005470:	4621      	mov	r1, r4
 8005472:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8005476:	f7ff fa8a 	bl	800498e <quorem>
 800547a:	4603      	mov	r3, r0
 800547c:	3330      	adds	r3, #48	@ 0x30
 800547e:	9003      	str	r0, [sp, #12]
 8005480:	4639      	mov	r1, r7
 8005482:	9802      	ldr	r0, [sp, #8]
 8005484:	9309      	str	r3, [sp, #36]	@ 0x24
 8005486:	f000 fc4d 	bl	8005d24 <__mcmp>
 800548a:	462a      	mov	r2, r5
 800548c:	9004      	str	r0, [sp, #16]
 800548e:	4621      	mov	r1, r4
 8005490:	4648      	mov	r0, r9
 8005492:	f000 fc63 	bl	8005d5c <__mdiff>
 8005496:	68c2      	ldr	r2, [r0, #12]
 8005498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800549a:	4606      	mov	r6, r0
 800549c:	bb02      	cbnz	r2, 80054e0 <_dtoa_r+0xa40>
 800549e:	4601      	mov	r1, r0
 80054a0:	9802      	ldr	r0, [sp, #8]
 80054a2:	f000 fc3f 	bl	8005d24 <__mcmp>
 80054a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054a8:	4602      	mov	r2, r0
 80054aa:	4631      	mov	r1, r6
 80054ac:	4648      	mov	r0, r9
 80054ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80054b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80054b2:	f000 fa05 	bl	80058c0 <_Bfree>
 80054b6:	9b07      	ldr	r3, [sp, #28]
 80054b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80054ba:	9e00      	ldr	r6, [sp, #0]
 80054bc:	ea42 0103 	orr.w	r1, r2, r3
 80054c0:	9b06      	ldr	r3, [sp, #24]
 80054c2:	4319      	orrs	r1, r3
 80054c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054c6:	d10d      	bne.n	80054e4 <_dtoa_r+0xa44>
 80054c8:	2b39      	cmp	r3, #57	@ 0x39
 80054ca:	d027      	beq.n	800551c <_dtoa_r+0xa7c>
 80054cc:	9a04      	ldr	r2, [sp, #16]
 80054ce:	2a00      	cmp	r2, #0
 80054d0:	dd01      	ble.n	80054d6 <_dtoa_r+0xa36>
 80054d2:	9b03      	ldr	r3, [sp, #12]
 80054d4:	3331      	adds	r3, #49	@ 0x31
 80054d6:	f88b 3000 	strb.w	r3, [fp]
 80054da:	e52e      	b.n	8004f3a <_dtoa_r+0x49a>
 80054dc:	4628      	mov	r0, r5
 80054de:	e7b9      	b.n	8005454 <_dtoa_r+0x9b4>
 80054e0:	2201      	movs	r2, #1
 80054e2:	e7e2      	b.n	80054aa <_dtoa_r+0xa0a>
 80054e4:	9904      	ldr	r1, [sp, #16]
 80054e6:	2900      	cmp	r1, #0
 80054e8:	db04      	blt.n	80054f4 <_dtoa_r+0xa54>
 80054ea:	9807      	ldr	r0, [sp, #28]
 80054ec:	4301      	orrs	r1, r0
 80054ee:	9806      	ldr	r0, [sp, #24]
 80054f0:	4301      	orrs	r1, r0
 80054f2:	d120      	bne.n	8005536 <_dtoa_r+0xa96>
 80054f4:	2a00      	cmp	r2, #0
 80054f6:	ddee      	ble.n	80054d6 <_dtoa_r+0xa36>
 80054f8:	9902      	ldr	r1, [sp, #8]
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	2201      	movs	r2, #1
 80054fe:	4648      	mov	r0, r9
 8005500:	f000 fba4 	bl	8005c4c <__lshift>
 8005504:	4621      	mov	r1, r4
 8005506:	9002      	str	r0, [sp, #8]
 8005508:	f000 fc0c 	bl	8005d24 <__mcmp>
 800550c:	2800      	cmp	r0, #0
 800550e:	9b00      	ldr	r3, [sp, #0]
 8005510:	dc02      	bgt.n	8005518 <_dtoa_r+0xa78>
 8005512:	d1e0      	bne.n	80054d6 <_dtoa_r+0xa36>
 8005514:	07da      	lsls	r2, r3, #31
 8005516:	d5de      	bpl.n	80054d6 <_dtoa_r+0xa36>
 8005518:	2b39      	cmp	r3, #57	@ 0x39
 800551a:	d1da      	bne.n	80054d2 <_dtoa_r+0xa32>
 800551c:	2339      	movs	r3, #57	@ 0x39
 800551e:	f88b 3000 	strb.w	r3, [fp]
 8005522:	4633      	mov	r3, r6
 8005524:	461e      	mov	r6, r3
 8005526:	3b01      	subs	r3, #1
 8005528:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800552c:	2a39      	cmp	r2, #57	@ 0x39
 800552e:	d04e      	beq.n	80055ce <_dtoa_r+0xb2e>
 8005530:	3201      	adds	r2, #1
 8005532:	701a      	strb	r2, [r3, #0]
 8005534:	e501      	b.n	8004f3a <_dtoa_r+0x49a>
 8005536:	2a00      	cmp	r2, #0
 8005538:	dd03      	ble.n	8005542 <_dtoa_r+0xaa2>
 800553a:	2b39      	cmp	r3, #57	@ 0x39
 800553c:	d0ee      	beq.n	800551c <_dtoa_r+0xa7c>
 800553e:	3301      	adds	r3, #1
 8005540:	e7c9      	b.n	80054d6 <_dtoa_r+0xa36>
 8005542:	9a00      	ldr	r2, [sp, #0]
 8005544:	9908      	ldr	r1, [sp, #32]
 8005546:	f802 3c01 	strb.w	r3, [r2, #-1]
 800554a:	428a      	cmp	r2, r1
 800554c:	d028      	beq.n	80055a0 <_dtoa_r+0xb00>
 800554e:	9902      	ldr	r1, [sp, #8]
 8005550:	2300      	movs	r3, #0
 8005552:	220a      	movs	r2, #10
 8005554:	4648      	mov	r0, r9
 8005556:	f000 f9d5 	bl	8005904 <__multadd>
 800555a:	42af      	cmp	r7, r5
 800555c:	9002      	str	r0, [sp, #8]
 800555e:	f04f 0300 	mov.w	r3, #0
 8005562:	f04f 020a 	mov.w	r2, #10
 8005566:	4639      	mov	r1, r7
 8005568:	4648      	mov	r0, r9
 800556a:	d107      	bne.n	800557c <_dtoa_r+0xadc>
 800556c:	f000 f9ca 	bl	8005904 <__multadd>
 8005570:	4607      	mov	r7, r0
 8005572:	4605      	mov	r5, r0
 8005574:	9b00      	ldr	r3, [sp, #0]
 8005576:	3301      	adds	r3, #1
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	e777      	b.n	800546c <_dtoa_r+0x9cc>
 800557c:	f000 f9c2 	bl	8005904 <__multadd>
 8005580:	4629      	mov	r1, r5
 8005582:	4607      	mov	r7, r0
 8005584:	2300      	movs	r3, #0
 8005586:	220a      	movs	r2, #10
 8005588:	4648      	mov	r0, r9
 800558a:	f000 f9bb 	bl	8005904 <__multadd>
 800558e:	4605      	mov	r5, r0
 8005590:	e7f0      	b.n	8005574 <_dtoa_r+0xad4>
 8005592:	f1bb 0f00 	cmp.w	fp, #0
 8005596:	bfcc      	ite	gt
 8005598:	465e      	movgt	r6, fp
 800559a:	2601      	movle	r6, #1
 800559c:	4456      	add	r6, sl
 800559e:	2700      	movs	r7, #0
 80055a0:	9902      	ldr	r1, [sp, #8]
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	2201      	movs	r2, #1
 80055a6:	4648      	mov	r0, r9
 80055a8:	f000 fb50 	bl	8005c4c <__lshift>
 80055ac:	4621      	mov	r1, r4
 80055ae:	9002      	str	r0, [sp, #8]
 80055b0:	f000 fbb8 	bl	8005d24 <__mcmp>
 80055b4:	2800      	cmp	r0, #0
 80055b6:	dcb4      	bgt.n	8005522 <_dtoa_r+0xa82>
 80055b8:	d102      	bne.n	80055c0 <_dtoa_r+0xb20>
 80055ba:	9b00      	ldr	r3, [sp, #0]
 80055bc:	07db      	lsls	r3, r3, #31
 80055be:	d4b0      	bmi.n	8005522 <_dtoa_r+0xa82>
 80055c0:	4633      	mov	r3, r6
 80055c2:	461e      	mov	r6, r3
 80055c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055c8:	2a30      	cmp	r2, #48	@ 0x30
 80055ca:	d0fa      	beq.n	80055c2 <_dtoa_r+0xb22>
 80055cc:	e4b5      	b.n	8004f3a <_dtoa_r+0x49a>
 80055ce:	459a      	cmp	sl, r3
 80055d0:	d1a8      	bne.n	8005524 <_dtoa_r+0xa84>
 80055d2:	2331      	movs	r3, #49	@ 0x31
 80055d4:	f108 0801 	add.w	r8, r8, #1
 80055d8:	f88a 3000 	strb.w	r3, [sl]
 80055dc:	e4ad      	b.n	8004f3a <_dtoa_r+0x49a>
 80055de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80055e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800563c <_dtoa_r+0xb9c>
 80055e4:	b11b      	cbz	r3, 80055ee <_dtoa_r+0xb4e>
 80055e6:	f10a 0308 	add.w	r3, sl, #8
 80055ea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80055ec:	6013      	str	r3, [r2, #0]
 80055ee:	4650      	mov	r0, sl
 80055f0:	b017      	add	sp, #92	@ 0x5c
 80055f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055f6:	9b07      	ldr	r3, [sp, #28]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	f77f ae2e 	ble.w	800525a <_dtoa_r+0x7ba>
 80055fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005600:	9308      	str	r3, [sp, #32]
 8005602:	2001      	movs	r0, #1
 8005604:	e64d      	b.n	80052a2 <_dtoa_r+0x802>
 8005606:	f1bb 0f00 	cmp.w	fp, #0
 800560a:	f77f aed9 	ble.w	80053c0 <_dtoa_r+0x920>
 800560e:	4656      	mov	r6, sl
 8005610:	9802      	ldr	r0, [sp, #8]
 8005612:	4621      	mov	r1, r4
 8005614:	f7ff f9bb 	bl	800498e <quorem>
 8005618:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800561c:	f806 3b01 	strb.w	r3, [r6], #1
 8005620:	eba6 020a 	sub.w	r2, r6, sl
 8005624:	4593      	cmp	fp, r2
 8005626:	ddb4      	ble.n	8005592 <_dtoa_r+0xaf2>
 8005628:	9902      	ldr	r1, [sp, #8]
 800562a:	2300      	movs	r3, #0
 800562c:	220a      	movs	r2, #10
 800562e:	4648      	mov	r0, r9
 8005630:	f000 f968 	bl	8005904 <__multadd>
 8005634:	9002      	str	r0, [sp, #8]
 8005636:	e7eb      	b.n	8005610 <_dtoa_r+0xb70>
 8005638:	08006b4c 	.word	0x08006b4c
 800563c:	08006ad0 	.word	0x08006ad0

08005640 <_free_r>:
 8005640:	b538      	push	{r3, r4, r5, lr}
 8005642:	4605      	mov	r5, r0
 8005644:	2900      	cmp	r1, #0
 8005646:	d041      	beq.n	80056cc <_free_r+0x8c>
 8005648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800564c:	1f0c      	subs	r4, r1, #4
 800564e:	2b00      	cmp	r3, #0
 8005650:	bfb8      	it	lt
 8005652:	18e4      	addlt	r4, r4, r3
 8005654:	f000 f8e8 	bl	8005828 <__malloc_lock>
 8005658:	4a1d      	ldr	r2, [pc, #116]	@ (80056d0 <_free_r+0x90>)
 800565a:	6813      	ldr	r3, [r2, #0]
 800565c:	b933      	cbnz	r3, 800566c <_free_r+0x2c>
 800565e:	6063      	str	r3, [r4, #4]
 8005660:	6014      	str	r4, [r2, #0]
 8005662:	4628      	mov	r0, r5
 8005664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005668:	f000 b8e4 	b.w	8005834 <__malloc_unlock>
 800566c:	42a3      	cmp	r3, r4
 800566e:	d908      	bls.n	8005682 <_free_r+0x42>
 8005670:	6820      	ldr	r0, [r4, #0]
 8005672:	1821      	adds	r1, r4, r0
 8005674:	428b      	cmp	r3, r1
 8005676:	bf01      	itttt	eq
 8005678:	6819      	ldreq	r1, [r3, #0]
 800567a:	685b      	ldreq	r3, [r3, #4]
 800567c:	1809      	addeq	r1, r1, r0
 800567e:	6021      	streq	r1, [r4, #0]
 8005680:	e7ed      	b.n	800565e <_free_r+0x1e>
 8005682:	461a      	mov	r2, r3
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	b10b      	cbz	r3, 800568c <_free_r+0x4c>
 8005688:	42a3      	cmp	r3, r4
 800568a:	d9fa      	bls.n	8005682 <_free_r+0x42>
 800568c:	6811      	ldr	r1, [r2, #0]
 800568e:	1850      	adds	r0, r2, r1
 8005690:	42a0      	cmp	r0, r4
 8005692:	d10b      	bne.n	80056ac <_free_r+0x6c>
 8005694:	6820      	ldr	r0, [r4, #0]
 8005696:	4401      	add	r1, r0
 8005698:	1850      	adds	r0, r2, r1
 800569a:	4283      	cmp	r3, r0
 800569c:	6011      	str	r1, [r2, #0]
 800569e:	d1e0      	bne.n	8005662 <_free_r+0x22>
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	6053      	str	r3, [r2, #4]
 80056a6:	4408      	add	r0, r1
 80056a8:	6010      	str	r0, [r2, #0]
 80056aa:	e7da      	b.n	8005662 <_free_r+0x22>
 80056ac:	d902      	bls.n	80056b4 <_free_r+0x74>
 80056ae:	230c      	movs	r3, #12
 80056b0:	602b      	str	r3, [r5, #0]
 80056b2:	e7d6      	b.n	8005662 <_free_r+0x22>
 80056b4:	6820      	ldr	r0, [r4, #0]
 80056b6:	1821      	adds	r1, r4, r0
 80056b8:	428b      	cmp	r3, r1
 80056ba:	bf04      	itt	eq
 80056bc:	6819      	ldreq	r1, [r3, #0]
 80056be:	685b      	ldreq	r3, [r3, #4]
 80056c0:	6063      	str	r3, [r4, #4]
 80056c2:	bf04      	itt	eq
 80056c4:	1809      	addeq	r1, r1, r0
 80056c6:	6021      	streq	r1, [r4, #0]
 80056c8:	6054      	str	r4, [r2, #4]
 80056ca:	e7ca      	b.n	8005662 <_free_r+0x22>
 80056cc:	bd38      	pop	{r3, r4, r5, pc}
 80056ce:	bf00      	nop
 80056d0:	200003ec 	.word	0x200003ec

080056d4 <malloc>:
 80056d4:	4b02      	ldr	r3, [pc, #8]	@ (80056e0 <malloc+0xc>)
 80056d6:	4601      	mov	r1, r0
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	f000 b825 	b.w	8005728 <_malloc_r>
 80056de:	bf00      	nop
 80056e0:	20000018 	.word	0x20000018

080056e4 <sbrk_aligned>:
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	4e0f      	ldr	r6, [pc, #60]	@ (8005724 <sbrk_aligned+0x40>)
 80056e8:	460c      	mov	r4, r1
 80056ea:	6831      	ldr	r1, [r6, #0]
 80056ec:	4605      	mov	r5, r0
 80056ee:	b911      	cbnz	r1, 80056f6 <sbrk_aligned+0x12>
 80056f0:	f000 fe3e 	bl	8006370 <_sbrk_r>
 80056f4:	6030      	str	r0, [r6, #0]
 80056f6:	4621      	mov	r1, r4
 80056f8:	4628      	mov	r0, r5
 80056fa:	f000 fe39 	bl	8006370 <_sbrk_r>
 80056fe:	1c43      	adds	r3, r0, #1
 8005700:	d103      	bne.n	800570a <sbrk_aligned+0x26>
 8005702:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005706:	4620      	mov	r0, r4
 8005708:	bd70      	pop	{r4, r5, r6, pc}
 800570a:	1cc4      	adds	r4, r0, #3
 800570c:	f024 0403 	bic.w	r4, r4, #3
 8005710:	42a0      	cmp	r0, r4
 8005712:	d0f8      	beq.n	8005706 <sbrk_aligned+0x22>
 8005714:	1a21      	subs	r1, r4, r0
 8005716:	4628      	mov	r0, r5
 8005718:	f000 fe2a 	bl	8006370 <_sbrk_r>
 800571c:	3001      	adds	r0, #1
 800571e:	d1f2      	bne.n	8005706 <sbrk_aligned+0x22>
 8005720:	e7ef      	b.n	8005702 <sbrk_aligned+0x1e>
 8005722:	bf00      	nop
 8005724:	200003e8 	.word	0x200003e8

08005728 <_malloc_r>:
 8005728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800572c:	1ccd      	adds	r5, r1, #3
 800572e:	f025 0503 	bic.w	r5, r5, #3
 8005732:	3508      	adds	r5, #8
 8005734:	2d0c      	cmp	r5, #12
 8005736:	bf38      	it	cc
 8005738:	250c      	movcc	r5, #12
 800573a:	2d00      	cmp	r5, #0
 800573c:	4606      	mov	r6, r0
 800573e:	db01      	blt.n	8005744 <_malloc_r+0x1c>
 8005740:	42a9      	cmp	r1, r5
 8005742:	d904      	bls.n	800574e <_malloc_r+0x26>
 8005744:	230c      	movs	r3, #12
 8005746:	6033      	str	r3, [r6, #0]
 8005748:	2000      	movs	r0, #0
 800574a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800574e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005824 <_malloc_r+0xfc>
 8005752:	f000 f869 	bl	8005828 <__malloc_lock>
 8005756:	f8d8 3000 	ldr.w	r3, [r8]
 800575a:	461c      	mov	r4, r3
 800575c:	bb44      	cbnz	r4, 80057b0 <_malloc_r+0x88>
 800575e:	4629      	mov	r1, r5
 8005760:	4630      	mov	r0, r6
 8005762:	f7ff ffbf 	bl	80056e4 <sbrk_aligned>
 8005766:	1c43      	adds	r3, r0, #1
 8005768:	4604      	mov	r4, r0
 800576a:	d158      	bne.n	800581e <_malloc_r+0xf6>
 800576c:	f8d8 4000 	ldr.w	r4, [r8]
 8005770:	4627      	mov	r7, r4
 8005772:	2f00      	cmp	r7, #0
 8005774:	d143      	bne.n	80057fe <_malloc_r+0xd6>
 8005776:	2c00      	cmp	r4, #0
 8005778:	d04b      	beq.n	8005812 <_malloc_r+0xea>
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	4639      	mov	r1, r7
 800577e:	4630      	mov	r0, r6
 8005780:	eb04 0903 	add.w	r9, r4, r3
 8005784:	f000 fdf4 	bl	8006370 <_sbrk_r>
 8005788:	4581      	cmp	r9, r0
 800578a:	d142      	bne.n	8005812 <_malloc_r+0xea>
 800578c:	6821      	ldr	r1, [r4, #0]
 800578e:	1a6d      	subs	r5, r5, r1
 8005790:	4629      	mov	r1, r5
 8005792:	4630      	mov	r0, r6
 8005794:	f7ff ffa6 	bl	80056e4 <sbrk_aligned>
 8005798:	3001      	adds	r0, #1
 800579a:	d03a      	beq.n	8005812 <_malloc_r+0xea>
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	442b      	add	r3, r5
 80057a0:	6023      	str	r3, [r4, #0]
 80057a2:	f8d8 3000 	ldr.w	r3, [r8]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	bb62      	cbnz	r2, 8005804 <_malloc_r+0xdc>
 80057aa:	f8c8 7000 	str.w	r7, [r8]
 80057ae:	e00f      	b.n	80057d0 <_malloc_r+0xa8>
 80057b0:	6822      	ldr	r2, [r4, #0]
 80057b2:	1b52      	subs	r2, r2, r5
 80057b4:	d420      	bmi.n	80057f8 <_malloc_r+0xd0>
 80057b6:	2a0b      	cmp	r2, #11
 80057b8:	d917      	bls.n	80057ea <_malloc_r+0xc2>
 80057ba:	1961      	adds	r1, r4, r5
 80057bc:	42a3      	cmp	r3, r4
 80057be:	6025      	str	r5, [r4, #0]
 80057c0:	bf18      	it	ne
 80057c2:	6059      	strne	r1, [r3, #4]
 80057c4:	6863      	ldr	r3, [r4, #4]
 80057c6:	bf08      	it	eq
 80057c8:	f8c8 1000 	streq.w	r1, [r8]
 80057cc:	5162      	str	r2, [r4, r5]
 80057ce:	604b      	str	r3, [r1, #4]
 80057d0:	4630      	mov	r0, r6
 80057d2:	f000 f82f 	bl	8005834 <__malloc_unlock>
 80057d6:	f104 000b 	add.w	r0, r4, #11
 80057da:	1d23      	adds	r3, r4, #4
 80057dc:	f020 0007 	bic.w	r0, r0, #7
 80057e0:	1ac2      	subs	r2, r0, r3
 80057e2:	bf1c      	itt	ne
 80057e4:	1a1b      	subne	r3, r3, r0
 80057e6:	50a3      	strne	r3, [r4, r2]
 80057e8:	e7af      	b.n	800574a <_malloc_r+0x22>
 80057ea:	6862      	ldr	r2, [r4, #4]
 80057ec:	42a3      	cmp	r3, r4
 80057ee:	bf0c      	ite	eq
 80057f0:	f8c8 2000 	streq.w	r2, [r8]
 80057f4:	605a      	strne	r2, [r3, #4]
 80057f6:	e7eb      	b.n	80057d0 <_malloc_r+0xa8>
 80057f8:	4623      	mov	r3, r4
 80057fa:	6864      	ldr	r4, [r4, #4]
 80057fc:	e7ae      	b.n	800575c <_malloc_r+0x34>
 80057fe:	463c      	mov	r4, r7
 8005800:	687f      	ldr	r7, [r7, #4]
 8005802:	e7b6      	b.n	8005772 <_malloc_r+0x4a>
 8005804:	461a      	mov	r2, r3
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	42a3      	cmp	r3, r4
 800580a:	d1fb      	bne.n	8005804 <_malloc_r+0xdc>
 800580c:	2300      	movs	r3, #0
 800580e:	6053      	str	r3, [r2, #4]
 8005810:	e7de      	b.n	80057d0 <_malloc_r+0xa8>
 8005812:	230c      	movs	r3, #12
 8005814:	6033      	str	r3, [r6, #0]
 8005816:	4630      	mov	r0, r6
 8005818:	f000 f80c 	bl	8005834 <__malloc_unlock>
 800581c:	e794      	b.n	8005748 <_malloc_r+0x20>
 800581e:	6005      	str	r5, [r0, #0]
 8005820:	e7d6      	b.n	80057d0 <_malloc_r+0xa8>
 8005822:	bf00      	nop
 8005824:	200003ec 	.word	0x200003ec

08005828 <__malloc_lock>:
 8005828:	4801      	ldr	r0, [pc, #4]	@ (8005830 <__malloc_lock+0x8>)
 800582a:	f7ff b8ae 	b.w	800498a <__retarget_lock_acquire_recursive>
 800582e:	bf00      	nop
 8005830:	200003e4 	.word	0x200003e4

08005834 <__malloc_unlock>:
 8005834:	4801      	ldr	r0, [pc, #4]	@ (800583c <__malloc_unlock+0x8>)
 8005836:	f7ff b8a9 	b.w	800498c <__retarget_lock_release_recursive>
 800583a:	bf00      	nop
 800583c:	200003e4 	.word	0x200003e4

08005840 <_Balloc>:
 8005840:	b570      	push	{r4, r5, r6, lr}
 8005842:	69c6      	ldr	r6, [r0, #28]
 8005844:	4604      	mov	r4, r0
 8005846:	460d      	mov	r5, r1
 8005848:	b976      	cbnz	r6, 8005868 <_Balloc+0x28>
 800584a:	2010      	movs	r0, #16
 800584c:	f7ff ff42 	bl	80056d4 <malloc>
 8005850:	4602      	mov	r2, r0
 8005852:	61e0      	str	r0, [r4, #28]
 8005854:	b920      	cbnz	r0, 8005860 <_Balloc+0x20>
 8005856:	4b18      	ldr	r3, [pc, #96]	@ (80058b8 <_Balloc+0x78>)
 8005858:	4818      	ldr	r0, [pc, #96]	@ (80058bc <_Balloc+0x7c>)
 800585a:	216b      	movs	r1, #107	@ 0x6b
 800585c:	f000 fda6 	bl	80063ac <__assert_func>
 8005860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005864:	6006      	str	r6, [r0, #0]
 8005866:	60c6      	str	r6, [r0, #12]
 8005868:	69e6      	ldr	r6, [r4, #28]
 800586a:	68f3      	ldr	r3, [r6, #12]
 800586c:	b183      	cbz	r3, 8005890 <_Balloc+0x50>
 800586e:	69e3      	ldr	r3, [r4, #28]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005876:	b9b8      	cbnz	r0, 80058a8 <_Balloc+0x68>
 8005878:	2101      	movs	r1, #1
 800587a:	fa01 f605 	lsl.w	r6, r1, r5
 800587e:	1d72      	adds	r2, r6, #5
 8005880:	0092      	lsls	r2, r2, #2
 8005882:	4620      	mov	r0, r4
 8005884:	f000 fdb0 	bl	80063e8 <_calloc_r>
 8005888:	b160      	cbz	r0, 80058a4 <_Balloc+0x64>
 800588a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800588e:	e00e      	b.n	80058ae <_Balloc+0x6e>
 8005890:	2221      	movs	r2, #33	@ 0x21
 8005892:	2104      	movs	r1, #4
 8005894:	4620      	mov	r0, r4
 8005896:	f000 fda7 	bl	80063e8 <_calloc_r>
 800589a:	69e3      	ldr	r3, [r4, #28]
 800589c:	60f0      	str	r0, [r6, #12]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1e4      	bne.n	800586e <_Balloc+0x2e>
 80058a4:	2000      	movs	r0, #0
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
 80058a8:	6802      	ldr	r2, [r0, #0]
 80058aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80058ae:	2300      	movs	r3, #0
 80058b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80058b4:	e7f7      	b.n	80058a6 <_Balloc+0x66>
 80058b6:	bf00      	nop
 80058b8:	08006add 	.word	0x08006add
 80058bc:	08006b5d 	.word	0x08006b5d

080058c0 <_Bfree>:
 80058c0:	b570      	push	{r4, r5, r6, lr}
 80058c2:	69c6      	ldr	r6, [r0, #28]
 80058c4:	4605      	mov	r5, r0
 80058c6:	460c      	mov	r4, r1
 80058c8:	b976      	cbnz	r6, 80058e8 <_Bfree+0x28>
 80058ca:	2010      	movs	r0, #16
 80058cc:	f7ff ff02 	bl	80056d4 <malloc>
 80058d0:	4602      	mov	r2, r0
 80058d2:	61e8      	str	r0, [r5, #28]
 80058d4:	b920      	cbnz	r0, 80058e0 <_Bfree+0x20>
 80058d6:	4b09      	ldr	r3, [pc, #36]	@ (80058fc <_Bfree+0x3c>)
 80058d8:	4809      	ldr	r0, [pc, #36]	@ (8005900 <_Bfree+0x40>)
 80058da:	218f      	movs	r1, #143	@ 0x8f
 80058dc:	f000 fd66 	bl	80063ac <__assert_func>
 80058e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058e4:	6006      	str	r6, [r0, #0]
 80058e6:	60c6      	str	r6, [r0, #12]
 80058e8:	b13c      	cbz	r4, 80058fa <_Bfree+0x3a>
 80058ea:	69eb      	ldr	r3, [r5, #28]
 80058ec:	6862      	ldr	r2, [r4, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80058f4:	6021      	str	r1, [r4, #0]
 80058f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80058fa:	bd70      	pop	{r4, r5, r6, pc}
 80058fc:	08006add 	.word	0x08006add
 8005900:	08006b5d 	.word	0x08006b5d

08005904 <__multadd>:
 8005904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005908:	690d      	ldr	r5, [r1, #16]
 800590a:	4607      	mov	r7, r0
 800590c:	460c      	mov	r4, r1
 800590e:	461e      	mov	r6, r3
 8005910:	f101 0c14 	add.w	ip, r1, #20
 8005914:	2000      	movs	r0, #0
 8005916:	f8dc 3000 	ldr.w	r3, [ip]
 800591a:	b299      	uxth	r1, r3
 800591c:	fb02 6101 	mla	r1, r2, r1, r6
 8005920:	0c1e      	lsrs	r6, r3, #16
 8005922:	0c0b      	lsrs	r3, r1, #16
 8005924:	fb02 3306 	mla	r3, r2, r6, r3
 8005928:	b289      	uxth	r1, r1
 800592a:	3001      	adds	r0, #1
 800592c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005930:	4285      	cmp	r5, r0
 8005932:	f84c 1b04 	str.w	r1, [ip], #4
 8005936:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800593a:	dcec      	bgt.n	8005916 <__multadd+0x12>
 800593c:	b30e      	cbz	r6, 8005982 <__multadd+0x7e>
 800593e:	68a3      	ldr	r3, [r4, #8]
 8005940:	42ab      	cmp	r3, r5
 8005942:	dc19      	bgt.n	8005978 <__multadd+0x74>
 8005944:	6861      	ldr	r1, [r4, #4]
 8005946:	4638      	mov	r0, r7
 8005948:	3101      	adds	r1, #1
 800594a:	f7ff ff79 	bl	8005840 <_Balloc>
 800594e:	4680      	mov	r8, r0
 8005950:	b928      	cbnz	r0, 800595e <__multadd+0x5a>
 8005952:	4602      	mov	r2, r0
 8005954:	4b0c      	ldr	r3, [pc, #48]	@ (8005988 <__multadd+0x84>)
 8005956:	480d      	ldr	r0, [pc, #52]	@ (800598c <__multadd+0x88>)
 8005958:	21ba      	movs	r1, #186	@ 0xba
 800595a:	f000 fd27 	bl	80063ac <__assert_func>
 800595e:	6922      	ldr	r2, [r4, #16]
 8005960:	3202      	adds	r2, #2
 8005962:	f104 010c 	add.w	r1, r4, #12
 8005966:	0092      	lsls	r2, r2, #2
 8005968:	300c      	adds	r0, #12
 800596a:	f000 fd11 	bl	8006390 <memcpy>
 800596e:	4621      	mov	r1, r4
 8005970:	4638      	mov	r0, r7
 8005972:	f7ff ffa5 	bl	80058c0 <_Bfree>
 8005976:	4644      	mov	r4, r8
 8005978:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800597c:	3501      	adds	r5, #1
 800597e:	615e      	str	r6, [r3, #20]
 8005980:	6125      	str	r5, [r4, #16]
 8005982:	4620      	mov	r0, r4
 8005984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005988:	08006b4c 	.word	0x08006b4c
 800598c:	08006b5d 	.word	0x08006b5d

08005990 <__hi0bits>:
 8005990:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005994:	4603      	mov	r3, r0
 8005996:	bf36      	itet	cc
 8005998:	0403      	lslcc	r3, r0, #16
 800599a:	2000      	movcs	r0, #0
 800599c:	2010      	movcc	r0, #16
 800599e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059a2:	bf3c      	itt	cc
 80059a4:	021b      	lslcc	r3, r3, #8
 80059a6:	3008      	addcc	r0, #8
 80059a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059ac:	bf3c      	itt	cc
 80059ae:	011b      	lslcc	r3, r3, #4
 80059b0:	3004      	addcc	r0, #4
 80059b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059b6:	bf3c      	itt	cc
 80059b8:	009b      	lslcc	r3, r3, #2
 80059ba:	3002      	addcc	r0, #2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	db05      	blt.n	80059cc <__hi0bits+0x3c>
 80059c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80059c4:	f100 0001 	add.w	r0, r0, #1
 80059c8:	bf08      	it	eq
 80059ca:	2020      	moveq	r0, #32
 80059cc:	4770      	bx	lr

080059ce <__lo0bits>:
 80059ce:	6803      	ldr	r3, [r0, #0]
 80059d0:	4602      	mov	r2, r0
 80059d2:	f013 0007 	ands.w	r0, r3, #7
 80059d6:	d00b      	beq.n	80059f0 <__lo0bits+0x22>
 80059d8:	07d9      	lsls	r1, r3, #31
 80059da:	d421      	bmi.n	8005a20 <__lo0bits+0x52>
 80059dc:	0798      	lsls	r0, r3, #30
 80059de:	bf49      	itett	mi
 80059e0:	085b      	lsrmi	r3, r3, #1
 80059e2:	089b      	lsrpl	r3, r3, #2
 80059e4:	2001      	movmi	r0, #1
 80059e6:	6013      	strmi	r3, [r2, #0]
 80059e8:	bf5c      	itt	pl
 80059ea:	6013      	strpl	r3, [r2, #0]
 80059ec:	2002      	movpl	r0, #2
 80059ee:	4770      	bx	lr
 80059f0:	b299      	uxth	r1, r3
 80059f2:	b909      	cbnz	r1, 80059f8 <__lo0bits+0x2a>
 80059f4:	0c1b      	lsrs	r3, r3, #16
 80059f6:	2010      	movs	r0, #16
 80059f8:	b2d9      	uxtb	r1, r3
 80059fa:	b909      	cbnz	r1, 8005a00 <__lo0bits+0x32>
 80059fc:	3008      	adds	r0, #8
 80059fe:	0a1b      	lsrs	r3, r3, #8
 8005a00:	0719      	lsls	r1, r3, #28
 8005a02:	bf04      	itt	eq
 8005a04:	091b      	lsreq	r3, r3, #4
 8005a06:	3004      	addeq	r0, #4
 8005a08:	0799      	lsls	r1, r3, #30
 8005a0a:	bf04      	itt	eq
 8005a0c:	089b      	lsreq	r3, r3, #2
 8005a0e:	3002      	addeq	r0, #2
 8005a10:	07d9      	lsls	r1, r3, #31
 8005a12:	d403      	bmi.n	8005a1c <__lo0bits+0x4e>
 8005a14:	085b      	lsrs	r3, r3, #1
 8005a16:	f100 0001 	add.w	r0, r0, #1
 8005a1a:	d003      	beq.n	8005a24 <__lo0bits+0x56>
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	4770      	bx	lr
 8005a20:	2000      	movs	r0, #0
 8005a22:	4770      	bx	lr
 8005a24:	2020      	movs	r0, #32
 8005a26:	4770      	bx	lr

08005a28 <__i2b>:
 8005a28:	b510      	push	{r4, lr}
 8005a2a:	460c      	mov	r4, r1
 8005a2c:	2101      	movs	r1, #1
 8005a2e:	f7ff ff07 	bl	8005840 <_Balloc>
 8005a32:	4602      	mov	r2, r0
 8005a34:	b928      	cbnz	r0, 8005a42 <__i2b+0x1a>
 8005a36:	4b05      	ldr	r3, [pc, #20]	@ (8005a4c <__i2b+0x24>)
 8005a38:	4805      	ldr	r0, [pc, #20]	@ (8005a50 <__i2b+0x28>)
 8005a3a:	f240 1145 	movw	r1, #325	@ 0x145
 8005a3e:	f000 fcb5 	bl	80063ac <__assert_func>
 8005a42:	2301      	movs	r3, #1
 8005a44:	6144      	str	r4, [r0, #20]
 8005a46:	6103      	str	r3, [r0, #16]
 8005a48:	bd10      	pop	{r4, pc}
 8005a4a:	bf00      	nop
 8005a4c:	08006b4c 	.word	0x08006b4c
 8005a50:	08006b5d 	.word	0x08006b5d

08005a54 <__multiply>:
 8005a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a58:	4617      	mov	r7, r2
 8005a5a:	690a      	ldr	r2, [r1, #16]
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	bfa8      	it	ge
 8005a62:	463b      	movge	r3, r7
 8005a64:	4689      	mov	r9, r1
 8005a66:	bfa4      	itt	ge
 8005a68:	460f      	movge	r7, r1
 8005a6a:	4699      	movge	r9, r3
 8005a6c:	693d      	ldr	r5, [r7, #16]
 8005a6e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	eb05 060a 	add.w	r6, r5, sl
 8005a7a:	42b3      	cmp	r3, r6
 8005a7c:	b085      	sub	sp, #20
 8005a7e:	bfb8      	it	lt
 8005a80:	3101      	addlt	r1, #1
 8005a82:	f7ff fedd 	bl	8005840 <_Balloc>
 8005a86:	b930      	cbnz	r0, 8005a96 <__multiply+0x42>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	4b41      	ldr	r3, [pc, #260]	@ (8005b90 <__multiply+0x13c>)
 8005a8c:	4841      	ldr	r0, [pc, #260]	@ (8005b94 <__multiply+0x140>)
 8005a8e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005a92:	f000 fc8b 	bl	80063ac <__assert_func>
 8005a96:	f100 0414 	add.w	r4, r0, #20
 8005a9a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005a9e:	4623      	mov	r3, r4
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	4573      	cmp	r3, lr
 8005aa4:	d320      	bcc.n	8005ae8 <__multiply+0x94>
 8005aa6:	f107 0814 	add.w	r8, r7, #20
 8005aaa:	f109 0114 	add.w	r1, r9, #20
 8005aae:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005ab2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005ab6:	9302      	str	r3, [sp, #8]
 8005ab8:	1beb      	subs	r3, r5, r7
 8005aba:	3b15      	subs	r3, #21
 8005abc:	f023 0303 	bic.w	r3, r3, #3
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	3715      	adds	r7, #21
 8005ac4:	42bd      	cmp	r5, r7
 8005ac6:	bf38      	it	cc
 8005ac8:	2304      	movcc	r3, #4
 8005aca:	9301      	str	r3, [sp, #4]
 8005acc:	9b02      	ldr	r3, [sp, #8]
 8005ace:	9103      	str	r1, [sp, #12]
 8005ad0:	428b      	cmp	r3, r1
 8005ad2:	d80c      	bhi.n	8005aee <__multiply+0x9a>
 8005ad4:	2e00      	cmp	r6, #0
 8005ad6:	dd03      	ble.n	8005ae0 <__multiply+0x8c>
 8005ad8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d055      	beq.n	8005b8c <__multiply+0x138>
 8005ae0:	6106      	str	r6, [r0, #16]
 8005ae2:	b005      	add	sp, #20
 8005ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae8:	f843 2b04 	str.w	r2, [r3], #4
 8005aec:	e7d9      	b.n	8005aa2 <__multiply+0x4e>
 8005aee:	f8b1 a000 	ldrh.w	sl, [r1]
 8005af2:	f1ba 0f00 	cmp.w	sl, #0
 8005af6:	d01f      	beq.n	8005b38 <__multiply+0xe4>
 8005af8:	46c4      	mov	ip, r8
 8005afa:	46a1      	mov	r9, r4
 8005afc:	2700      	movs	r7, #0
 8005afe:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005b02:	f8d9 3000 	ldr.w	r3, [r9]
 8005b06:	fa1f fb82 	uxth.w	fp, r2
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	fb0a 330b 	mla	r3, sl, fp, r3
 8005b10:	443b      	add	r3, r7
 8005b12:	f8d9 7000 	ldr.w	r7, [r9]
 8005b16:	0c12      	lsrs	r2, r2, #16
 8005b18:	0c3f      	lsrs	r7, r7, #16
 8005b1a:	fb0a 7202 	mla	r2, sl, r2, r7
 8005b1e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b28:	4565      	cmp	r5, ip
 8005b2a:	f849 3b04 	str.w	r3, [r9], #4
 8005b2e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005b32:	d8e4      	bhi.n	8005afe <__multiply+0xaa>
 8005b34:	9b01      	ldr	r3, [sp, #4]
 8005b36:	50e7      	str	r7, [r4, r3]
 8005b38:	9b03      	ldr	r3, [sp, #12]
 8005b3a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005b3e:	3104      	adds	r1, #4
 8005b40:	f1b9 0f00 	cmp.w	r9, #0
 8005b44:	d020      	beq.n	8005b88 <__multiply+0x134>
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	4647      	mov	r7, r8
 8005b4a:	46a4      	mov	ip, r4
 8005b4c:	f04f 0a00 	mov.w	sl, #0
 8005b50:	f8b7 b000 	ldrh.w	fp, [r7]
 8005b54:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005b58:	fb09 220b 	mla	r2, r9, fp, r2
 8005b5c:	4452      	add	r2, sl
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b64:	f84c 3b04 	str.w	r3, [ip], #4
 8005b68:	f857 3b04 	ldr.w	r3, [r7], #4
 8005b6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b70:	f8bc 3000 	ldrh.w	r3, [ip]
 8005b74:	fb09 330a 	mla	r3, r9, sl, r3
 8005b78:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005b7c:	42bd      	cmp	r5, r7
 8005b7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005b82:	d8e5      	bhi.n	8005b50 <__multiply+0xfc>
 8005b84:	9a01      	ldr	r2, [sp, #4]
 8005b86:	50a3      	str	r3, [r4, r2]
 8005b88:	3404      	adds	r4, #4
 8005b8a:	e79f      	b.n	8005acc <__multiply+0x78>
 8005b8c:	3e01      	subs	r6, #1
 8005b8e:	e7a1      	b.n	8005ad4 <__multiply+0x80>
 8005b90:	08006b4c 	.word	0x08006b4c
 8005b94:	08006b5d 	.word	0x08006b5d

08005b98 <__pow5mult>:
 8005b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b9c:	4615      	mov	r5, r2
 8005b9e:	f012 0203 	ands.w	r2, r2, #3
 8005ba2:	4607      	mov	r7, r0
 8005ba4:	460e      	mov	r6, r1
 8005ba6:	d007      	beq.n	8005bb8 <__pow5mult+0x20>
 8005ba8:	4c25      	ldr	r4, [pc, #148]	@ (8005c40 <__pow5mult+0xa8>)
 8005baa:	3a01      	subs	r2, #1
 8005bac:	2300      	movs	r3, #0
 8005bae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005bb2:	f7ff fea7 	bl	8005904 <__multadd>
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	10ad      	asrs	r5, r5, #2
 8005bba:	d03d      	beq.n	8005c38 <__pow5mult+0xa0>
 8005bbc:	69fc      	ldr	r4, [r7, #28]
 8005bbe:	b97c      	cbnz	r4, 8005be0 <__pow5mult+0x48>
 8005bc0:	2010      	movs	r0, #16
 8005bc2:	f7ff fd87 	bl	80056d4 <malloc>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	61f8      	str	r0, [r7, #28]
 8005bca:	b928      	cbnz	r0, 8005bd8 <__pow5mult+0x40>
 8005bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8005c44 <__pow5mult+0xac>)
 8005bce:	481e      	ldr	r0, [pc, #120]	@ (8005c48 <__pow5mult+0xb0>)
 8005bd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005bd4:	f000 fbea 	bl	80063ac <__assert_func>
 8005bd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005bdc:	6004      	str	r4, [r0, #0]
 8005bde:	60c4      	str	r4, [r0, #12]
 8005be0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005be4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005be8:	b94c      	cbnz	r4, 8005bfe <__pow5mult+0x66>
 8005bea:	f240 2171 	movw	r1, #625	@ 0x271
 8005bee:	4638      	mov	r0, r7
 8005bf0:	f7ff ff1a 	bl	8005a28 <__i2b>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f8c8 0008 	str.w	r0, [r8, #8]
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	6003      	str	r3, [r0, #0]
 8005bfe:	f04f 0900 	mov.w	r9, #0
 8005c02:	07eb      	lsls	r3, r5, #31
 8005c04:	d50a      	bpl.n	8005c1c <__pow5mult+0x84>
 8005c06:	4631      	mov	r1, r6
 8005c08:	4622      	mov	r2, r4
 8005c0a:	4638      	mov	r0, r7
 8005c0c:	f7ff ff22 	bl	8005a54 <__multiply>
 8005c10:	4631      	mov	r1, r6
 8005c12:	4680      	mov	r8, r0
 8005c14:	4638      	mov	r0, r7
 8005c16:	f7ff fe53 	bl	80058c0 <_Bfree>
 8005c1a:	4646      	mov	r6, r8
 8005c1c:	106d      	asrs	r5, r5, #1
 8005c1e:	d00b      	beq.n	8005c38 <__pow5mult+0xa0>
 8005c20:	6820      	ldr	r0, [r4, #0]
 8005c22:	b938      	cbnz	r0, 8005c34 <__pow5mult+0x9c>
 8005c24:	4622      	mov	r2, r4
 8005c26:	4621      	mov	r1, r4
 8005c28:	4638      	mov	r0, r7
 8005c2a:	f7ff ff13 	bl	8005a54 <__multiply>
 8005c2e:	6020      	str	r0, [r4, #0]
 8005c30:	f8c0 9000 	str.w	r9, [r0]
 8005c34:	4604      	mov	r4, r0
 8005c36:	e7e4      	b.n	8005c02 <__pow5mult+0x6a>
 8005c38:	4630      	mov	r0, r6
 8005c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c3e:	bf00      	nop
 8005c40:	08006c10 	.word	0x08006c10
 8005c44:	08006add 	.word	0x08006add
 8005c48:	08006b5d 	.word	0x08006b5d

08005c4c <__lshift>:
 8005c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c50:	460c      	mov	r4, r1
 8005c52:	6849      	ldr	r1, [r1, #4]
 8005c54:	6923      	ldr	r3, [r4, #16]
 8005c56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005c5a:	68a3      	ldr	r3, [r4, #8]
 8005c5c:	4607      	mov	r7, r0
 8005c5e:	4691      	mov	r9, r2
 8005c60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005c64:	f108 0601 	add.w	r6, r8, #1
 8005c68:	42b3      	cmp	r3, r6
 8005c6a:	db0b      	blt.n	8005c84 <__lshift+0x38>
 8005c6c:	4638      	mov	r0, r7
 8005c6e:	f7ff fde7 	bl	8005840 <_Balloc>
 8005c72:	4605      	mov	r5, r0
 8005c74:	b948      	cbnz	r0, 8005c8a <__lshift+0x3e>
 8005c76:	4602      	mov	r2, r0
 8005c78:	4b28      	ldr	r3, [pc, #160]	@ (8005d1c <__lshift+0xd0>)
 8005c7a:	4829      	ldr	r0, [pc, #164]	@ (8005d20 <__lshift+0xd4>)
 8005c7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005c80:	f000 fb94 	bl	80063ac <__assert_func>
 8005c84:	3101      	adds	r1, #1
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	e7ee      	b.n	8005c68 <__lshift+0x1c>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	f100 0114 	add.w	r1, r0, #20
 8005c90:	f100 0210 	add.w	r2, r0, #16
 8005c94:	4618      	mov	r0, r3
 8005c96:	4553      	cmp	r3, sl
 8005c98:	db33      	blt.n	8005d02 <__lshift+0xb6>
 8005c9a:	6920      	ldr	r0, [r4, #16]
 8005c9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ca0:	f104 0314 	add.w	r3, r4, #20
 8005ca4:	f019 091f 	ands.w	r9, r9, #31
 8005ca8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005cac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005cb0:	d02b      	beq.n	8005d0a <__lshift+0xbe>
 8005cb2:	f1c9 0e20 	rsb	lr, r9, #32
 8005cb6:	468a      	mov	sl, r1
 8005cb8:	2200      	movs	r2, #0
 8005cba:	6818      	ldr	r0, [r3, #0]
 8005cbc:	fa00 f009 	lsl.w	r0, r0, r9
 8005cc0:	4310      	orrs	r0, r2
 8005cc2:	f84a 0b04 	str.w	r0, [sl], #4
 8005cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cca:	459c      	cmp	ip, r3
 8005ccc:	fa22 f20e 	lsr.w	r2, r2, lr
 8005cd0:	d8f3      	bhi.n	8005cba <__lshift+0x6e>
 8005cd2:	ebac 0304 	sub.w	r3, ip, r4
 8005cd6:	3b15      	subs	r3, #21
 8005cd8:	f023 0303 	bic.w	r3, r3, #3
 8005cdc:	3304      	adds	r3, #4
 8005cde:	f104 0015 	add.w	r0, r4, #21
 8005ce2:	4560      	cmp	r0, ip
 8005ce4:	bf88      	it	hi
 8005ce6:	2304      	movhi	r3, #4
 8005ce8:	50ca      	str	r2, [r1, r3]
 8005cea:	b10a      	cbz	r2, 8005cf0 <__lshift+0xa4>
 8005cec:	f108 0602 	add.w	r6, r8, #2
 8005cf0:	3e01      	subs	r6, #1
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	612e      	str	r6, [r5, #16]
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	f7ff fde2 	bl	80058c0 <_Bfree>
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d02:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d06:	3301      	adds	r3, #1
 8005d08:	e7c5      	b.n	8005c96 <__lshift+0x4a>
 8005d0a:	3904      	subs	r1, #4
 8005d0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d10:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d14:	459c      	cmp	ip, r3
 8005d16:	d8f9      	bhi.n	8005d0c <__lshift+0xc0>
 8005d18:	e7ea      	b.n	8005cf0 <__lshift+0xa4>
 8005d1a:	bf00      	nop
 8005d1c:	08006b4c 	.word	0x08006b4c
 8005d20:	08006b5d 	.word	0x08006b5d

08005d24 <__mcmp>:
 8005d24:	690a      	ldr	r2, [r1, #16]
 8005d26:	4603      	mov	r3, r0
 8005d28:	6900      	ldr	r0, [r0, #16]
 8005d2a:	1a80      	subs	r0, r0, r2
 8005d2c:	b530      	push	{r4, r5, lr}
 8005d2e:	d10e      	bne.n	8005d4e <__mcmp+0x2a>
 8005d30:	3314      	adds	r3, #20
 8005d32:	3114      	adds	r1, #20
 8005d34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005d38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005d3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005d40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005d44:	4295      	cmp	r5, r2
 8005d46:	d003      	beq.n	8005d50 <__mcmp+0x2c>
 8005d48:	d205      	bcs.n	8005d56 <__mcmp+0x32>
 8005d4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d4e:	bd30      	pop	{r4, r5, pc}
 8005d50:	42a3      	cmp	r3, r4
 8005d52:	d3f3      	bcc.n	8005d3c <__mcmp+0x18>
 8005d54:	e7fb      	b.n	8005d4e <__mcmp+0x2a>
 8005d56:	2001      	movs	r0, #1
 8005d58:	e7f9      	b.n	8005d4e <__mcmp+0x2a>
	...

08005d5c <__mdiff>:
 8005d5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d60:	4689      	mov	r9, r1
 8005d62:	4606      	mov	r6, r0
 8005d64:	4611      	mov	r1, r2
 8005d66:	4648      	mov	r0, r9
 8005d68:	4614      	mov	r4, r2
 8005d6a:	f7ff ffdb 	bl	8005d24 <__mcmp>
 8005d6e:	1e05      	subs	r5, r0, #0
 8005d70:	d112      	bne.n	8005d98 <__mdiff+0x3c>
 8005d72:	4629      	mov	r1, r5
 8005d74:	4630      	mov	r0, r6
 8005d76:	f7ff fd63 	bl	8005840 <_Balloc>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	b928      	cbnz	r0, 8005d8a <__mdiff+0x2e>
 8005d7e:	4b3f      	ldr	r3, [pc, #252]	@ (8005e7c <__mdiff+0x120>)
 8005d80:	f240 2137 	movw	r1, #567	@ 0x237
 8005d84:	483e      	ldr	r0, [pc, #248]	@ (8005e80 <__mdiff+0x124>)
 8005d86:	f000 fb11 	bl	80063ac <__assert_func>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005d90:	4610      	mov	r0, r2
 8005d92:	b003      	add	sp, #12
 8005d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d98:	bfbc      	itt	lt
 8005d9a:	464b      	movlt	r3, r9
 8005d9c:	46a1      	movlt	r9, r4
 8005d9e:	4630      	mov	r0, r6
 8005da0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005da4:	bfba      	itte	lt
 8005da6:	461c      	movlt	r4, r3
 8005da8:	2501      	movlt	r5, #1
 8005daa:	2500      	movge	r5, #0
 8005dac:	f7ff fd48 	bl	8005840 <_Balloc>
 8005db0:	4602      	mov	r2, r0
 8005db2:	b918      	cbnz	r0, 8005dbc <__mdiff+0x60>
 8005db4:	4b31      	ldr	r3, [pc, #196]	@ (8005e7c <__mdiff+0x120>)
 8005db6:	f240 2145 	movw	r1, #581	@ 0x245
 8005dba:	e7e3      	b.n	8005d84 <__mdiff+0x28>
 8005dbc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005dc0:	6926      	ldr	r6, [r4, #16]
 8005dc2:	60c5      	str	r5, [r0, #12]
 8005dc4:	f109 0310 	add.w	r3, r9, #16
 8005dc8:	f109 0514 	add.w	r5, r9, #20
 8005dcc:	f104 0e14 	add.w	lr, r4, #20
 8005dd0:	f100 0b14 	add.w	fp, r0, #20
 8005dd4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005dd8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005ddc:	9301      	str	r3, [sp, #4]
 8005dde:	46d9      	mov	r9, fp
 8005de0:	f04f 0c00 	mov.w	ip, #0
 8005de4:	9b01      	ldr	r3, [sp, #4]
 8005de6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005dea:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005dee:	9301      	str	r3, [sp, #4]
 8005df0:	fa1f f38a 	uxth.w	r3, sl
 8005df4:	4619      	mov	r1, r3
 8005df6:	b283      	uxth	r3, r0
 8005df8:	1acb      	subs	r3, r1, r3
 8005dfa:	0c00      	lsrs	r0, r0, #16
 8005dfc:	4463      	add	r3, ip
 8005dfe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005e02:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005e0c:	4576      	cmp	r6, lr
 8005e0e:	f849 3b04 	str.w	r3, [r9], #4
 8005e12:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005e16:	d8e5      	bhi.n	8005de4 <__mdiff+0x88>
 8005e18:	1b33      	subs	r3, r6, r4
 8005e1a:	3b15      	subs	r3, #21
 8005e1c:	f023 0303 	bic.w	r3, r3, #3
 8005e20:	3415      	adds	r4, #21
 8005e22:	3304      	adds	r3, #4
 8005e24:	42a6      	cmp	r6, r4
 8005e26:	bf38      	it	cc
 8005e28:	2304      	movcc	r3, #4
 8005e2a:	441d      	add	r5, r3
 8005e2c:	445b      	add	r3, fp
 8005e2e:	461e      	mov	r6, r3
 8005e30:	462c      	mov	r4, r5
 8005e32:	4544      	cmp	r4, r8
 8005e34:	d30e      	bcc.n	8005e54 <__mdiff+0xf8>
 8005e36:	f108 0103 	add.w	r1, r8, #3
 8005e3a:	1b49      	subs	r1, r1, r5
 8005e3c:	f021 0103 	bic.w	r1, r1, #3
 8005e40:	3d03      	subs	r5, #3
 8005e42:	45a8      	cmp	r8, r5
 8005e44:	bf38      	it	cc
 8005e46:	2100      	movcc	r1, #0
 8005e48:	440b      	add	r3, r1
 8005e4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005e4e:	b191      	cbz	r1, 8005e76 <__mdiff+0x11a>
 8005e50:	6117      	str	r7, [r2, #16]
 8005e52:	e79d      	b.n	8005d90 <__mdiff+0x34>
 8005e54:	f854 1b04 	ldr.w	r1, [r4], #4
 8005e58:	46e6      	mov	lr, ip
 8005e5a:	0c08      	lsrs	r0, r1, #16
 8005e5c:	fa1c fc81 	uxtah	ip, ip, r1
 8005e60:	4471      	add	r1, lr
 8005e62:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005e66:	b289      	uxth	r1, r1
 8005e68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005e6c:	f846 1b04 	str.w	r1, [r6], #4
 8005e70:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005e74:	e7dd      	b.n	8005e32 <__mdiff+0xd6>
 8005e76:	3f01      	subs	r7, #1
 8005e78:	e7e7      	b.n	8005e4a <__mdiff+0xee>
 8005e7a:	bf00      	nop
 8005e7c:	08006b4c 	.word	0x08006b4c
 8005e80:	08006b5d 	.word	0x08006b5d

08005e84 <__d2b>:
 8005e84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005e88:	460f      	mov	r7, r1
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	ec59 8b10 	vmov	r8, r9, d0
 8005e90:	4616      	mov	r6, r2
 8005e92:	f7ff fcd5 	bl	8005840 <_Balloc>
 8005e96:	4604      	mov	r4, r0
 8005e98:	b930      	cbnz	r0, 8005ea8 <__d2b+0x24>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	4b23      	ldr	r3, [pc, #140]	@ (8005f2c <__d2b+0xa8>)
 8005e9e:	4824      	ldr	r0, [pc, #144]	@ (8005f30 <__d2b+0xac>)
 8005ea0:	f240 310f 	movw	r1, #783	@ 0x30f
 8005ea4:	f000 fa82 	bl	80063ac <__assert_func>
 8005ea8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005eac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005eb0:	b10d      	cbz	r5, 8005eb6 <__d2b+0x32>
 8005eb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005eb6:	9301      	str	r3, [sp, #4]
 8005eb8:	f1b8 0300 	subs.w	r3, r8, #0
 8005ebc:	d023      	beq.n	8005f06 <__d2b+0x82>
 8005ebe:	4668      	mov	r0, sp
 8005ec0:	9300      	str	r3, [sp, #0]
 8005ec2:	f7ff fd84 	bl	80059ce <__lo0bits>
 8005ec6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005eca:	b1d0      	cbz	r0, 8005f02 <__d2b+0x7e>
 8005ecc:	f1c0 0320 	rsb	r3, r0, #32
 8005ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed4:	430b      	orrs	r3, r1
 8005ed6:	40c2      	lsrs	r2, r0
 8005ed8:	6163      	str	r3, [r4, #20]
 8005eda:	9201      	str	r2, [sp, #4]
 8005edc:	9b01      	ldr	r3, [sp, #4]
 8005ede:	61a3      	str	r3, [r4, #24]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	bf0c      	ite	eq
 8005ee4:	2201      	moveq	r2, #1
 8005ee6:	2202      	movne	r2, #2
 8005ee8:	6122      	str	r2, [r4, #16]
 8005eea:	b1a5      	cbz	r5, 8005f16 <__d2b+0x92>
 8005eec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005ef0:	4405      	add	r5, r0
 8005ef2:	603d      	str	r5, [r7, #0]
 8005ef4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005ef8:	6030      	str	r0, [r6, #0]
 8005efa:	4620      	mov	r0, r4
 8005efc:	b003      	add	sp, #12
 8005efe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f02:	6161      	str	r1, [r4, #20]
 8005f04:	e7ea      	b.n	8005edc <__d2b+0x58>
 8005f06:	a801      	add	r0, sp, #4
 8005f08:	f7ff fd61 	bl	80059ce <__lo0bits>
 8005f0c:	9b01      	ldr	r3, [sp, #4]
 8005f0e:	6163      	str	r3, [r4, #20]
 8005f10:	3020      	adds	r0, #32
 8005f12:	2201      	movs	r2, #1
 8005f14:	e7e8      	b.n	8005ee8 <__d2b+0x64>
 8005f16:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005f1e:	6038      	str	r0, [r7, #0]
 8005f20:	6918      	ldr	r0, [r3, #16]
 8005f22:	f7ff fd35 	bl	8005990 <__hi0bits>
 8005f26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f2a:	e7e5      	b.n	8005ef8 <__d2b+0x74>
 8005f2c:	08006b4c 	.word	0x08006b4c
 8005f30:	08006b5d 	.word	0x08006b5d

08005f34 <__ssputs_r>:
 8005f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f38:	688e      	ldr	r6, [r1, #8]
 8005f3a:	461f      	mov	r7, r3
 8005f3c:	42be      	cmp	r6, r7
 8005f3e:	680b      	ldr	r3, [r1, #0]
 8005f40:	4682      	mov	sl, r0
 8005f42:	460c      	mov	r4, r1
 8005f44:	4690      	mov	r8, r2
 8005f46:	d82d      	bhi.n	8005fa4 <__ssputs_r+0x70>
 8005f48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005f50:	d026      	beq.n	8005fa0 <__ssputs_r+0x6c>
 8005f52:	6965      	ldr	r5, [r4, #20]
 8005f54:	6909      	ldr	r1, [r1, #16]
 8005f56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f5a:	eba3 0901 	sub.w	r9, r3, r1
 8005f5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f62:	1c7b      	adds	r3, r7, #1
 8005f64:	444b      	add	r3, r9
 8005f66:	106d      	asrs	r5, r5, #1
 8005f68:	429d      	cmp	r5, r3
 8005f6a:	bf38      	it	cc
 8005f6c:	461d      	movcc	r5, r3
 8005f6e:	0553      	lsls	r3, r2, #21
 8005f70:	d527      	bpl.n	8005fc2 <__ssputs_r+0x8e>
 8005f72:	4629      	mov	r1, r5
 8005f74:	f7ff fbd8 	bl	8005728 <_malloc_r>
 8005f78:	4606      	mov	r6, r0
 8005f7a:	b360      	cbz	r0, 8005fd6 <__ssputs_r+0xa2>
 8005f7c:	6921      	ldr	r1, [r4, #16]
 8005f7e:	464a      	mov	r2, r9
 8005f80:	f000 fa06 	bl	8006390 <memcpy>
 8005f84:	89a3      	ldrh	r3, [r4, #12]
 8005f86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005f8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	6126      	str	r6, [r4, #16]
 8005f92:	6165      	str	r5, [r4, #20]
 8005f94:	444e      	add	r6, r9
 8005f96:	eba5 0509 	sub.w	r5, r5, r9
 8005f9a:	6026      	str	r6, [r4, #0]
 8005f9c:	60a5      	str	r5, [r4, #8]
 8005f9e:	463e      	mov	r6, r7
 8005fa0:	42be      	cmp	r6, r7
 8005fa2:	d900      	bls.n	8005fa6 <__ssputs_r+0x72>
 8005fa4:	463e      	mov	r6, r7
 8005fa6:	6820      	ldr	r0, [r4, #0]
 8005fa8:	4632      	mov	r2, r6
 8005faa:	4641      	mov	r1, r8
 8005fac:	f000 f9c6 	bl	800633c <memmove>
 8005fb0:	68a3      	ldr	r3, [r4, #8]
 8005fb2:	1b9b      	subs	r3, r3, r6
 8005fb4:	60a3      	str	r3, [r4, #8]
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	4433      	add	r3, r6
 8005fba:	6023      	str	r3, [r4, #0]
 8005fbc:	2000      	movs	r0, #0
 8005fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fc2:	462a      	mov	r2, r5
 8005fc4:	f000 fa36 	bl	8006434 <_realloc_r>
 8005fc8:	4606      	mov	r6, r0
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	d1e0      	bne.n	8005f90 <__ssputs_r+0x5c>
 8005fce:	6921      	ldr	r1, [r4, #16]
 8005fd0:	4650      	mov	r0, sl
 8005fd2:	f7ff fb35 	bl	8005640 <_free_r>
 8005fd6:	230c      	movs	r3, #12
 8005fd8:	f8ca 3000 	str.w	r3, [sl]
 8005fdc:	89a3      	ldrh	r3, [r4, #12]
 8005fde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fe2:	81a3      	strh	r3, [r4, #12]
 8005fe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005fe8:	e7e9      	b.n	8005fbe <__ssputs_r+0x8a>
	...

08005fec <_svfiprintf_r>:
 8005fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff0:	4698      	mov	r8, r3
 8005ff2:	898b      	ldrh	r3, [r1, #12]
 8005ff4:	061b      	lsls	r3, r3, #24
 8005ff6:	b09d      	sub	sp, #116	@ 0x74
 8005ff8:	4607      	mov	r7, r0
 8005ffa:	460d      	mov	r5, r1
 8005ffc:	4614      	mov	r4, r2
 8005ffe:	d510      	bpl.n	8006022 <_svfiprintf_r+0x36>
 8006000:	690b      	ldr	r3, [r1, #16]
 8006002:	b973      	cbnz	r3, 8006022 <_svfiprintf_r+0x36>
 8006004:	2140      	movs	r1, #64	@ 0x40
 8006006:	f7ff fb8f 	bl	8005728 <_malloc_r>
 800600a:	6028      	str	r0, [r5, #0]
 800600c:	6128      	str	r0, [r5, #16]
 800600e:	b930      	cbnz	r0, 800601e <_svfiprintf_r+0x32>
 8006010:	230c      	movs	r3, #12
 8006012:	603b      	str	r3, [r7, #0]
 8006014:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006018:	b01d      	add	sp, #116	@ 0x74
 800601a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601e:	2340      	movs	r3, #64	@ 0x40
 8006020:	616b      	str	r3, [r5, #20]
 8006022:	2300      	movs	r3, #0
 8006024:	9309      	str	r3, [sp, #36]	@ 0x24
 8006026:	2320      	movs	r3, #32
 8006028:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800602c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006030:	2330      	movs	r3, #48	@ 0x30
 8006032:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80061d0 <_svfiprintf_r+0x1e4>
 8006036:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800603a:	f04f 0901 	mov.w	r9, #1
 800603e:	4623      	mov	r3, r4
 8006040:	469a      	mov	sl, r3
 8006042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006046:	b10a      	cbz	r2, 800604c <_svfiprintf_r+0x60>
 8006048:	2a25      	cmp	r2, #37	@ 0x25
 800604a:	d1f9      	bne.n	8006040 <_svfiprintf_r+0x54>
 800604c:	ebba 0b04 	subs.w	fp, sl, r4
 8006050:	d00b      	beq.n	800606a <_svfiprintf_r+0x7e>
 8006052:	465b      	mov	r3, fp
 8006054:	4622      	mov	r2, r4
 8006056:	4629      	mov	r1, r5
 8006058:	4638      	mov	r0, r7
 800605a:	f7ff ff6b 	bl	8005f34 <__ssputs_r>
 800605e:	3001      	adds	r0, #1
 8006060:	f000 80a7 	beq.w	80061b2 <_svfiprintf_r+0x1c6>
 8006064:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006066:	445a      	add	r2, fp
 8006068:	9209      	str	r2, [sp, #36]	@ 0x24
 800606a:	f89a 3000 	ldrb.w	r3, [sl]
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 809f 	beq.w	80061b2 <_svfiprintf_r+0x1c6>
 8006074:	2300      	movs	r3, #0
 8006076:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800607a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800607e:	f10a 0a01 	add.w	sl, sl, #1
 8006082:	9304      	str	r3, [sp, #16]
 8006084:	9307      	str	r3, [sp, #28]
 8006086:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800608a:	931a      	str	r3, [sp, #104]	@ 0x68
 800608c:	4654      	mov	r4, sl
 800608e:	2205      	movs	r2, #5
 8006090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006094:	484e      	ldr	r0, [pc, #312]	@ (80061d0 <_svfiprintf_r+0x1e4>)
 8006096:	f7fa f89b 	bl	80001d0 <memchr>
 800609a:	9a04      	ldr	r2, [sp, #16]
 800609c:	b9d8      	cbnz	r0, 80060d6 <_svfiprintf_r+0xea>
 800609e:	06d0      	lsls	r0, r2, #27
 80060a0:	bf44      	itt	mi
 80060a2:	2320      	movmi	r3, #32
 80060a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060a8:	0711      	lsls	r1, r2, #28
 80060aa:	bf44      	itt	mi
 80060ac:	232b      	movmi	r3, #43	@ 0x2b
 80060ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80060b2:	f89a 3000 	ldrb.w	r3, [sl]
 80060b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80060b8:	d015      	beq.n	80060e6 <_svfiprintf_r+0xfa>
 80060ba:	9a07      	ldr	r2, [sp, #28]
 80060bc:	4654      	mov	r4, sl
 80060be:	2000      	movs	r0, #0
 80060c0:	f04f 0c0a 	mov.w	ip, #10
 80060c4:	4621      	mov	r1, r4
 80060c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060ca:	3b30      	subs	r3, #48	@ 0x30
 80060cc:	2b09      	cmp	r3, #9
 80060ce:	d94b      	bls.n	8006168 <_svfiprintf_r+0x17c>
 80060d0:	b1b0      	cbz	r0, 8006100 <_svfiprintf_r+0x114>
 80060d2:	9207      	str	r2, [sp, #28]
 80060d4:	e014      	b.n	8006100 <_svfiprintf_r+0x114>
 80060d6:	eba0 0308 	sub.w	r3, r0, r8
 80060da:	fa09 f303 	lsl.w	r3, r9, r3
 80060de:	4313      	orrs	r3, r2
 80060e0:	9304      	str	r3, [sp, #16]
 80060e2:	46a2      	mov	sl, r4
 80060e4:	e7d2      	b.n	800608c <_svfiprintf_r+0xa0>
 80060e6:	9b03      	ldr	r3, [sp, #12]
 80060e8:	1d19      	adds	r1, r3, #4
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	9103      	str	r1, [sp, #12]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	bfbb      	ittet	lt
 80060f2:	425b      	neglt	r3, r3
 80060f4:	f042 0202 	orrlt.w	r2, r2, #2
 80060f8:	9307      	strge	r3, [sp, #28]
 80060fa:	9307      	strlt	r3, [sp, #28]
 80060fc:	bfb8      	it	lt
 80060fe:	9204      	strlt	r2, [sp, #16]
 8006100:	7823      	ldrb	r3, [r4, #0]
 8006102:	2b2e      	cmp	r3, #46	@ 0x2e
 8006104:	d10a      	bne.n	800611c <_svfiprintf_r+0x130>
 8006106:	7863      	ldrb	r3, [r4, #1]
 8006108:	2b2a      	cmp	r3, #42	@ 0x2a
 800610a:	d132      	bne.n	8006172 <_svfiprintf_r+0x186>
 800610c:	9b03      	ldr	r3, [sp, #12]
 800610e:	1d1a      	adds	r2, r3, #4
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	9203      	str	r2, [sp, #12]
 8006114:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006118:	3402      	adds	r4, #2
 800611a:	9305      	str	r3, [sp, #20]
 800611c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80061e0 <_svfiprintf_r+0x1f4>
 8006120:	7821      	ldrb	r1, [r4, #0]
 8006122:	2203      	movs	r2, #3
 8006124:	4650      	mov	r0, sl
 8006126:	f7fa f853 	bl	80001d0 <memchr>
 800612a:	b138      	cbz	r0, 800613c <_svfiprintf_r+0x150>
 800612c:	9b04      	ldr	r3, [sp, #16]
 800612e:	eba0 000a 	sub.w	r0, r0, sl
 8006132:	2240      	movs	r2, #64	@ 0x40
 8006134:	4082      	lsls	r2, r0
 8006136:	4313      	orrs	r3, r2
 8006138:	3401      	adds	r4, #1
 800613a:	9304      	str	r3, [sp, #16]
 800613c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006140:	4824      	ldr	r0, [pc, #144]	@ (80061d4 <_svfiprintf_r+0x1e8>)
 8006142:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006146:	2206      	movs	r2, #6
 8006148:	f7fa f842 	bl	80001d0 <memchr>
 800614c:	2800      	cmp	r0, #0
 800614e:	d036      	beq.n	80061be <_svfiprintf_r+0x1d2>
 8006150:	4b21      	ldr	r3, [pc, #132]	@ (80061d8 <_svfiprintf_r+0x1ec>)
 8006152:	bb1b      	cbnz	r3, 800619c <_svfiprintf_r+0x1b0>
 8006154:	9b03      	ldr	r3, [sp, #12]
 8006156:	3307      	adds	r3, #7
 8006158:	f023 0307 	bic.w	r3, r3, #7
 800615c:	3308      	adds	r3, #8
 800615e:	9303      	str	r3, [sp, #12]
 8006160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006162:	4433      	add	r3, r6
 8006164:	9309      	str	r3, [sp, #36]	@ 0x24
 8006166:	e76a      	b.n	800603e <_svfiprintf_r+0x52>
 8006168:	fb0c 3202 	mla	r2, ip, r2, r3
 800616c:	460c      	mov	r4, r1
 800616e:	2001      	movs	r0, #1
 8006170:	e7a8      	b.n	80060c4 <_svfiprintf_r+0xd8>
 8006172:	2300      	movs	r3, #0
 8006174:	3401      	adds	r4, #1
 8006176:	9305      	str	r3, [sp, #20]
 8006178:	4619      	mov	r1, r3
 800617a:	f04f 0c0a 	mov.w	ip, #10
 800617e:	4620      	mov	r0, r4
 8006180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006184:	3a30      	subs	r2, #48	@ 0x30
 8006186:	2a09      	cmp	r2, #9
 8006188:	d903      	bls.n	8006192 <_svfiprintf_r+0x1a6>
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0c6      	beq.n	800611c <_svfiprintf_r+0x130>
 800618e:	9105      	str	r1, [sp, #20]
 8006190:	e7c4      	b.n	800611c <_svfiprintf_r+0x130>
 8006192:	fb0c 2101 	mla	r1, ip, r1, r2
 8006196:	4604      	mov	r4, r0
 8006198:	2301      	movs	r3, #1
 800619a:	e7f0      	b.n	800617e <_svfiprintf_r+0x192>
 800619c:	ab03      	add	r3, sp, #12
 800619e:	9300      	str	r3, [sp, #0]
 80061a0:	462a      	mov	r2, r5
 80061a2:	4b0e      	ldr	r3, [pc, #56]	@ (80061dc <_svfiprintf_r+0x1f0>)
 80061a4:	a904      	add	r1, sp, #16
 80061a6:	4638      	mov	r0, r7
 80061a8:	f7fd fe94 	bl	8003ed4 <_printf_float>
 80061ac:	1c42      	adds	r2, r0, #1
 80061ae:	4606      	mov	r6, r0
 80061b0:	d1d6      	bne.n	8006160 <_svfiprintf_r+0x174>
 80061b2:	89ab      	ldrh	r3, [r5, #12]
 80061b4:	065b      	lsls	r3, r3, #25
 80061b6:	f53f af2d 	bmi.w	8006014 <_svfiprintf_r+0x28>
 80061ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061bc:	e72c      	b.n	8006018 <_svfiprintf_r+0x2c>
 80061be:	ab03      	add	r3, sp, #12
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	462a      	mov	r2, r5
 80061c4:	4b05      	ldr	r3, [pc, #20]	@ (80061dc <_svfiprintf_r+0x1f0>)
 80061c6:	a904      	add	r1, sp, #16
 80061c8:	4638      	mov	r0, r7
 80061ca:	f7fe f91b 	bl	8004404 <_printf_i>
 80061ce:	e7ed      	b.n	80061ac <_svfiprintf_r+0x1c0>
 80061d0:	08006bb6 	.word	0x08006bb6
 80061d4:	08006bc0 	.word	0x08006bc0
 80061d8:	08003ed5 	.word	0x08003ed5
 80061dc:	08005f35 	.word	0x08005f35
 80061e0:	08006bbc 	.word	0x08006bbc

080061e4 <__sflush_r>:
 80061e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ec:	0716      	lsls	r6, r2, #28
 80061ee:	4605      	mov	r5, r0
 80061f0:	460c      	mov	r4, r1
 80061f2:	d454      	bmi.n	800629e <__sflush_r+0xba>
 80061f4:	684b      	ldr	r3, [r1, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	dc02      	bgt.n	8006200 <__sflush_r+0x1c>
 80061fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	dd48      	ble.n	8006292 <__sflush_r+0xae>
 8006200:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006202:	2e00      	cmp	r6, #0
 8006204:	d045      	beq.n	8006292 <__sflush_r+0xae>
 8006206:	2300      	movs	r3, #0
 8006208:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800620c:	682f      	ldr	r7, [r5, #0]
 800620e:	6a21      	ldr	r1, [r4, #32]
 8006210:	602b      	str	r3, [r5, #0]
 8006212:	d030      	beq.n	8006276 <__sflush_r+0x92>
 8006214:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006216:	89a3      	ldrh	r3, [r4, #12]
 8006218:	0759      	lsls	r1, r3, #29
 800621a:	d505      	bpl.n	8006228 <__sflush_r+0x44>
 800621c:	6863      	ldr	r3, [r4, #4]
 800621e:	1ad2      	subs	r2, r2, r3
 8006220:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006222:	b10b      	cbz	r3, 8006228 <__sflush_r+0x44>
 8006224:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006226:	1ad2      	subs	r2, r2, r3
 8006228:	2300      	movs	r3, #0
 800622a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800622c:	6a21      	ldr	r1, [r4, #32]
 800622e:	4628      	mov	r0, r5
 8006230:	47b0      	blx	r6
 8006232:	1c43      	adds	r3, r0, #1
 8006234:	89a3      	ldrh	r3, [r4, #12]
 8006236:	d106      	bne.n	8006246 <__sflush_r+0x62>
 8006238:	6829      	ldr	r1, [r5, #0]
 800623a:	291d      	cmp	r1, #29
 800623c:	d82b      	bhi.n	8006296 <__sflush_r+0xb2>
 800623e:	4a2a      	ldr	r2, [pc, #168]	@ (80062e8 <__sflush_r+0x104>)
 8006240:	40ca      	lsrs	r2, r1
 8006242:	07d6      	lsls	r6, r2, #31
 8006244:	d527      	bpl.n	8006296 <__sflush_r+0xb2>
 8006246:	2200      	movs	r2, #0
 8006248:	6062      	str	r2, [r4, #4]
 800624a:	04d9      	lsls	r1, r3, #19
 800624c:	6922      	ldr	r2, [r4, #16]
 800624e:	6022      	str	r2, [r4, #0]
 8006250:	d504      	bpl.n	800625c <__sflush_r+0x78>
 8006252:	1c42      	adds	r2, r0, #1
 8006254:	d101      	bne.n	800625a <__sflush_r+0x76>
 8006256:	682b      	ldr	r3, [r5, #0]
 8006258:	b903      	cbnz	r3, 800625c <__sflush_r+0x78>
 800625a:	6560      	str	r0, [r4, #84]	@ 0x54
 800625c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800625e:	602f      	str	r7, [r5, #0]
 8006260:	b1b9      	cbz	r1, 8006292 <__sflush_r+0xae>
 8006262:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006266:	4299      	cmp	r1, r3
 8006268:	d002      	beq.n	8006270 <__sflush_r+0x8c>
 800626a:	4628      	mov	r0, r5
 800626c:	f7ff f9e8 	bl	8005640 <_free_r>
 8006270:	2300      	movs	r3, #0
 8006272:	6363      	str	r3, [r4, #52]	@ 0x34
 8006274:	e00d      	b.n	8006292 <__sflush_r+0xae>
 8006276:	2301      	movs	r3, #1
 8006278:	4628      	mov	r0, r5
 800627a:	47b0      	blx	r6
 800627c:	4602      	mov	r2, r0
 800627e:	1c50      	adds	r0, r2, #1
 8006280:	d1c9      	bne.n	8006216 <__sflush_r+0x32>
 8006282:	682b      	ldr	r3, [r5, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0c6      	beq.n	8006216 <__sflush_r+0x32>
 8006288:	2b1d      	cmp	r3, #29
 800628a:	d001      	beq.n	8006290 <__sflush_r+0xac>
 800628c:	2b16      	cmp	r3, #22
 800628e:	d11e      	bne.n	80062ce <__sflush_r+0xea>
 8006290:	602f      	str	r7, [r5, #0]
 8006292:	2000      	movs	r0, #0
 8006294:	e022      	b.n	80062dc <__sflush_r+0xf8>
 8006296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800629a:	b21b      	sxth	r3, r3
 800629c:	e01b      	b.n	80062d6 <__sflush_r+0xf2>
 800629e:	690f      	ldr	r7, [r1, #16]
 80062a0:	2f00      	cmp	r7, #0
 80062a2:	d0f6      	beq.n	8006292 <__sflush_r+0xae>
 80062a4:	0793      	lsls	r3, r2, #30
 80062a6:	680e      	ldr	r6, [r1, #0]
 80062a8:	bf08      	it	eq
 80062aa:	694b      	ldreq	r3, [r1, #20]
 80062ac:	600f      	str	r7, [r1, #0]
 80062ae:	bf18      	it	ne
 80062b0:	2300      	movne	r3, #0
 80062b2:	eba6 0807 	sub.w	r8, r6, r7
 80062b6:	608b      	str	r3, [r1, #8]
 80062b8:	f1b8 0f00 	cmp.w	r8, #0
 80062bc:	dde9      	ble.n	8006292 <__sflush_r+0xae>
 80062be:	6a21      	ldr	r1, [r4, #32]
 80062c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80062c2:	4643      	mov	r3, r8
 80062c4:	463a      	mov	r2, r7
 80062c6:	4628      	mov	r0, r5
 80062c8:	47b0      	blx	r6
 80062ca:	2800      	cmp	r0, #0
 80062cc:	dc08      	bgt.n	80062e0 <__sflush_r+0xfc>
 80062ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062d6:	81a3      	strh	r3, [r4, #12]
 80062d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80062dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062e0:	4407      	add	r7, r0
 80062e2:	eba8 0800 	sub.w	r8, r8, r0
 80062e6:	e7e7      	b.n	80062b8 <__sflush_r+0xd4>
 80062e8:	20400001 	.word	0x20400001

080062ec <_fflush_r>:
 80062ec:	b538      	push	{r3, r4, r5, lr}
 80062ee:	690b      	ldr	r3, [r1, #16]
 80062f0:	4605      	mov	r5, r0
 80062f2:	460c      	mov	r4, r1
 80062f4:	b913      	cbnz	r3, 80062fc <_fflush_r+0x10>
 80062f6:	2500      	movs	r5, #0
 80062f8:	4628      	mov	r0, r5
 80062fa:	bd38      	pop	{r3, r4, r5, pc}
 80062fc:	b118      	cbz	r0, 8006306 <_fflush_r+0x1a>
 80062fe:	6a03      	ldr	r3, [r0, #32]
 8006300:	b90b      	cbnz	r3, 8006306 <_fflush_r+0x1a>
 8006302:	f7fe fa29 	bl	8004758 <__sinit>
 8006306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d0f3      	beq.n	80062f6 <_fflush_r+0xa>
 800630e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006310:	07d0      	lsls	r0, r2, #31
 8006312:	d404      	bmi.n	800631e <_fflush_r+0x32>
 8006314:	0599      	lsls	r1, r3, #22
 8006316:	d402      	bmi.n	800631e <_fflush_r+0x32>
 8006318:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800631a:	f7fe fb36 	bl	800498a <__retarget_lock_acquire_recursive>
 800631e:	4628      	mov	r0, r5
 8006320:	4621      	mov	r1, r4
 8006322:	f7ff ff5f 	bl	80061e4 <__sflush_r>
 8006326:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006328:	07da      	lsls	r2, r3, #31
 800632a:	4605      	mov	r5, r0
 800632c:	d4e4      	bmi.n	80062f8 <_fflush_r+0xc>
 800632e:	89a3      	ldrh	r3, [r4, #12]
 8006330:	059b      	lsls	r3, r3, #22
 8006332:	d4e1      	bmi.n	80062f8 <_fflush_r+0xc>
 8006334:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006336:	f7fe fb29 	bl	800498c <__retarget_lock_release_recursive>
 800633a:	e7dd      	b.n	80062f8 <_fflush_r+0xc>

0800633c <memmove>:
 800633c:	4288      	cmp	r0, r1
 800633e:	b510      	push	{r4, lr}
 8006340:	eb01 0402 	add.w	r4, r1, r2
 8006344:	d902      	bls.n	800634c <memmove+0x10>
 8006346:	4284      	cmp	r4, r0
 8006348:	4623      	mov	r3, r4
 800634a:	d807      	bhi.n	800635c <memmove+0x20>
 800634c:	1e43      	subs	r3, r0, #1
 800634e:	42a1      	cmp	r1, r4
 8006350:	d008      	beq.n	8006364 <memmove+0x28>
 8006352:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006356:	f803 2f01 	strb.w	r2, [r3, #1]!
 800635a:	e7f8      	b.n	800634e <memmove+0x12>
 800635c:	4402      	add	r2, r0
 800635e:	4601      	mov	r1, r0
 8006360:	428a      	cmp	r2, r1
 8006362:	d100      	bne.n	8006366 <memmove+0x2a>
 8006364:	bd10      	pop	{r4, pc}
 8006366:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800636a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800636e:	e7f7      	b.n	8006360 <memmove+0x24>

08006370 <_sbrk_r>:
 8006370:	b538      	push	{r3, r4, r5, lr}
 8006372:	4d06      	ldr	r5, [pc, #24]	@ (800638c <_sbrk_r+0x1c>)
 8006374:	2300      	movs	r3, #0
 8006376:	4604      	mov	r4, r0
 8006378:	4608      	mov	r0, r1
 800637a:	602b      	str	r3, [r5, #0]
 800637c:	f7fb fa1c 	bl	80017b8 <_sbrk>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d102      	bne.n	800638a <_sbrk_r+0x1a>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	b103      	cbz	r3, 800638a <_sbrk_r+0x1a>
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	200003e0 	.word	0x200003e0

08006390 <memcpy>:
 8006390:	440a      	add	r2, r1
 8006392:	4291      	cmp	r1, r2
 8006394:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006398:	d100      	bne.n	800639c <memcpy+0xc>
 800639a:	4770      	bx	lr
 800639c:	b510      	push	{r4, lr}
 800639e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063a6:	4291      	cmp	r1, r2
 80063a8:	d1f9      	bne.n	800639e <memcpy+0xe>
 80063aa:	bd10      	pop	{r4, pc}

080063ac <__assert_func>:
 80063ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80063ae:	4614      	mov	r4, r2
 80063b0:	461a      	mov	r2, r3
 80063b2:	4b09      	ldr	r3, [pc, #36]	@ (80063d8 <__assert_func+0x2c>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4605      	mov	r5, r0
 80063b8:	68d8      	ldr	r0, [r3, #12]
 80063ba:	b14c      	cbz	r4, 80063d0 <__assert_func+0x24>
 80063bc:	4b07      	ldr	r3, [pc, #28]	@ (80063dc <__assert_func+0x30>)
 80063be:	9100      	str	r1, [sp, #0]
 80063c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80063c4:	4906      	ldr	r1, [pc, #24]	@ (80063e0 <__assert_func+0x34>)
 80063c6:	462b      	mov	r3, r5
 80063c8:	f000 f870 	bl	80064ac <fiprintf>
 80063cc:	f000 f880 	bl	80064d0 <abort>
 80063d0:	4b04      	ldr	r3, [pc, #16]	@ (80063e4 <__assert_func+0x38>)
 80063d2:	461c      	mov	r4, r3
 80063d4:	e7f3      	b.n	80063be <__assert_func+0x12>
 80063d6:	bf00      	nop
 80063d8:	20000018 	.word	0x20000018
 80063dc:	08006bd1 	.word	0x08006bd1
 80063e0:	08006bde 	.word	0x08006bde
 80063e4:	08006c0c 	.word	0x08006c0c

080063e8 <_calloc_r>:
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	fba1 5402 	umull	r5, r4, r1, r2
 80063ee:	b934      	cbnz	r4, 80063fe <_calloc_r+0x16>
 80063f0:	4629      	mov	r1, r5
 80063f2:	f7ff f999 	bl	8005728 <_malloc_r>
 80063f6:	4606      	mov	r6, r0
 80063f8:	b928      	cbnz	r0, 8006406 <_calloc_r+0x1e>
 80063fa:	4630      	mov	r0, r6
 80063fc:	bd70      	pop	{r4, r5, r6, pc}
 80063fe:	220c      	movs	r2, #12
 8006400:	6002      	str	r2, [r0, #0]
 8006402:	2600      	movs	r6, #0
 8006404:	e7f9      	b.n	80063fa <_calloc_r+0x12>
 8006406:	462a      	mov	r2, r5
 8006408:	4621      	mov	r1, r4
 800640a:	f7fe fa40 	bl	800488e <memset>
 800640e:	e7f4      	b.n	80063fa <_calloc_r+0x12>

08006410 <__ascii_mbtowc>:
 8006410:	b082      	sub	sp, #8
 8006412:	b901      	cbnz	r1, 8006416 <__ascii_mbtowc+0x6>
 8006414:	a901      	add	r1, sp, #4
 8006416:	b142      	cbz	r2, 800642a <__ascii_mbtowc+0x1a>
 8006418:	b14b      	cbz	r3, 800642e <__ascii_mbtowc+0x1e>
 800641a:	7813      	ldrb	r3, [r2, #0]
 800641c:	600b      	str	r3, [r1, #0]
 800641e:	7812      	ldrb	r2, [r2, #0]
 8006420:	1e10      	subs	r0, r2, #0
 8006422:	bf18      	it	ne
 8006424:	2001      	movne	r0, #1
 8006426:	b002      	add	sp, #8
 8006428:	4770      	bx	lr
 800642a:	4610      	mov	r0, r2
 800642c:	e7fb      	b.n	8006426 <__ascii_mbtowc+0x16>
 800642e:	f06f 0001 	mvn.w	r0, #1
 8006432:	e7f8      	b.n	8006426 <__ascii_mbtowc+0x16>

08006434 <_realloc_r>:
 8006434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006438:	4607      	mov	r7, r0
 800643a:	4614      	mov	r4, r2
 800643c:	460d      	mov	r5, r1
 800643e:	b921      	cbnz	r1, 800644a <_realloc_r+0x16>
 8006440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006444:	4611      	mov	r1, r2
 8006446:	f7ff b96f 	b.w	8005728 <_malloc_r>
 800644a:	b92a      	cbnz	r2, 8006458 <_realloc_r+0x24>
 800644c:	f7ff f8f8 	bl	8005640 <_free_r>
 8006450:	4625      	mov	r5, r4
 8006452:	4628      	mov	r0, r5
 8006454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006458:	f000 f841 	bl	80064de <_malloc_usable_size_r>
 800645c:	4284      	cmp	r4, r0
 800645e:	4606      	mov	r6, r0
 8006460:	d802      	bhi.n	8006468 <_realloc_r+0x34>
 8006462:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006466:	d8f4      	bhi.n	8006452 <_realloc_r+0x1e>
 8006468:	4621      	mov	r1, r4
 800646a:	4638      	mov	r0, r7
 800646c:	f7ff f95c 	bl	8005728 <_malloc_r>
 8006470:	4680      	mov	r8, r0
 8006472:	b908      	cbnz	r0, 8006478 <_realloc_r+0x44>
 8006474:	4645      	mov	r5, r8
 8006476:	e7ec      	b.n	8006452 <_realloc_r+0x1e>
 8006478:	42b4      	cmp	r4, r6
 800647a:	4622      	mov	r2, r4
 800647c:	4629      	mov	r1, r5
 800647e:	bf28      	it	cs
 8006480:	4632      	movcs	r2, r6
 8006482:	f7ff ff85 	bl	8006390 <memcpy>
 8006486:	4629      	mov	r1, r5
 8006488:	4638      	mov	r0, r7
 800648a:	f7ff f8d9 	bl	8005640 <_free_r>
 800648e:	e7f1      	b.n	8006474 <_realloc_r+0x40>

08006490 <__ascii_wctomb>:
 8006490:	4603      	mov	r3, r0
 8006492:	4608      	mov	r0, r1
 8006494:	b141      	cbz	r1, 80064a8 <__ascii_wctomb+0x18>
 8006496:	2aff      	cmp	r2, #255	@ 0xff
 8006498:	d904      	bls.n	80064a4 <__ascii_wctomb+0x14>
 800649a:	228a      	movs	r2, #138	@ 0x8a
 800649c:	601a      	str	r2, [r3, #0]
 800649e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80064a2:	4770      	bx	lr
 80064a4:	700a      	strb	r2, [r1, #0]
 80064a6:	2001      	movs	r0, #1
 80064a8:	4770      	bx	lr
	...

080064ac <fiprintf>:
 80064ac:	b40e      	push	{r1, r2, r3}
 80064ae:	b503      	push	{r0, r1, lr}
 80064b0:	4601      	mov	r1, r0
 80064b2:	ab03      	add	r3, sp, #12
 80064b4:	4805      	ldr	r0, [pc, #20]	@ (80064cc <fiprintf+0x20>)
 80064b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80064ba:	6800      	ldr	r0, [r0, #0]
 80064bc:	9301      	str	r3, [sp, #4]
 80064be:	f000 f83f 	bl	8006540 <_vfiprintf_r>
 80064c2:	b002      	add	sp, #8
 80064c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80064c8:	b003      	add	sp, #12
 80064ca:	4770      	bx	lr
 80064cc:	20000018 	.word	0x20000018

080064d0 <abort>:
 80064d0:	b508      	push	{r3, lr}
 80064d2:	2006      	movs	r0, #6
 80064d4:	f000 fa08 	bl	80068e8 <raise>
 80064d8:	2001      	movs	r0, #1
 80064da:	f7fb f8f5 	bl	80016c8 <_exit>

080064de <_malloc_usable_size_r>:
 80064de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064e2:	1f18      	subs	r0, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	bfbc      	itt	lt
 80064e8:	580b      	ldrlt	r3, [r1, r0]
 80064ea:	18c0      	addlt	r0, r0, r3
 80064ec:	4770      	bx	lr

080064ee <__sfputc_r>:
 80064ee:	6893      	ldr	r3, [r2, #8]
 80064f0:	3b01      	subs	r3, #1
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	b410      	push	{r4}
 80064f6:	6093      	str	r3, [r2, #8]
 80064f8:	da08      	bge.n	800650c <__sfputc_r+0x1e>
 80064fa:	6994      	ldr	r4, [r2, #24]
 80064fc:	42a3      	cmp	r3, r4
 80064fe:	db01      	blt.n	8006504 <__sfputc_r+0x16>
 8006500:	290a      	cmp	r1, #10
 8006502:	d103      	bne.n	800650c <__sfputc_r+0x1e>
 8006504:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006508:	f000 b932 	b.w	8006770 <__swbuf_r>
 800650c:	6813      	ldr	r3, [r2, #0]
 800650e:	1c58      	adds	r0, r3, #1
 8006510:	6010      	str	r0, [r2, #0]
 8006512:	7019      	strb	r1, [r3, #0]
 8006514:	4608      	mov	r0, r1
 8006516:	f85d 4b04 	ldr.w	r4, [sp], #4
 800651a:	4770      	bx	lr

0800651c <__sfputs_r>:
 800651c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800651e:	4606      	mov	r6, r0
 8006520:	460f      	mov	r7, r1
 8006522:	4614      	mov	r4, r2
 8006524:	18d5      	adds	r5, r2, r3
 8006526:	42ac      	cmp	r4, r5
 8006528:	d101      	bne.n	800652e <__sfputs_r+0x12>
 800652a:	2000      	movs	r0, #0
 800652c:	e007      	b.n	800653e <__sfputs_r+0x22>
 800652e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006532:	463a      	mov	r2, r7
 8006534:	4630      	mov	r0, r6
 8006536:	f7ff ffda 	bl	80064ee <__sfputc_r>
 800653a:	1c43      	adds	r3, r0, #1
 800653c:	d1f3      	bne.n	8006526 <__sfputs_r+0xa>
 800653e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006540 <_vfiprintf_r>:
 8006540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006544:	460d      	mov	r5, r1
 8006546:	b09d      	sub	sp, #116	@ 0x74
 8006548:	4614      	mov	r4, r2
 800654a:	4698      	mov	r8, r3
 800654c:	4606      	mov	r6, r0
 800654e:	b118      	cbz	r0, 8006558 <_vfiprintf_r+0x18>
 8006550:	6a03      	ldr	r3, [r0, #32]
 8006552:	b90b      	cbnz	r3, 8006558 <_vfiprintf_r+0x18>
 8006554:	f7fe f900 	bl	8004758 <__sinit>
 8006558:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800655a:	07d9      	lsls	r1, r3, #31
 800655c:	d405      	bmi.n	800656a <_vfiprintf_r+0x2a>
 800655e:	89ab      	ldrh	r3, [r5, #12]
 8006560:	059a      	lsls	r2, r3, #22
 8006562:	d402      	bmi.n	800656a <_vfiprintf_r+0x2a>
 8006564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006566:	f7fe fa10 	bl	800498a <__retarget_lock_acquire_recursive>
 800656a:	89ab      	ldrh	r3, [r5, #12]
 800656c:	071b      	lsls	r3, r3, #28
 800656e:	d501      	bpl.n	8006574 <_vfiprintf_r+0x34>
 8006570:	692b      	ldr	r3, [r5, #16]
 8006572:	b99b      	cbnz	r3, 800659c <_vfiprintf_r+0x5c>
 8006574:	4629      	mov	r1, r5
 8006576:	4630      	mov	r0, r6
 8006578:	f000 f938 	bl	80067ec <__swsetup_r>
 800657c:	b170      	cbz	r0, 800659c <_vfiprintf_r+0x5c>
 800657e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006580:	07dc      	lsls	r4, r3, #31
 8006582:	d504      	bpl.n	800658e <_vfiprintf_r+0x4e>
 8006584:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006588:	b01d      	add	sp, #116	@ 0x74
 800658a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800658e:	89ab      	ldrh	r3, [r5, #12]
 8006590:	0598      	lsls	r0, r3, #22
 8006592:	d4f7      	bmi.n	8006584 <_vfiprintf_r+0x44>
 8006594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006596:	f7fe f9f9 	bl	800498c <__retarget_lock_release_recursive>
 800659a:	e7f3      	b.n	8006584 <_vfiprintf_r+0x44>
 800659c:	2300      	movs	r3, #0
 800659e:	9309      	str	r3, [sp, #36]	@ 0x24
 80065a0:	2320      	movs	r3, #32
 80065a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80065a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80065aa:	2330      	movs	r3, #48	@ 0x30
 80065ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800675c <_vfiprintf_r+0x21c>
 80065b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80065b4:	f04f 0901 	mov.w	r9, #1
 80065b8:	4623      	mov	r3, r4
 80065ba:	469a      	mov	sl, r3
 80065bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065c0:	b10a      	cbz	r2, 80065c6 <_vfiprintf_r+0x86>
 80065c2:	2a25      	cmp	r2, #37	@ 0x25
 80065c4:	d1f9      	bne.n	80065ba <_vfiprintf_r+0x7a>
 80065c6:	ebba 0b04 	subs.w	fp, sl, r4
 80065ca:	d00b      	beq.n	80065e4 <_vfiprintf_r+0xa4>
 80065cc:	465b      	mov	r3, fp
 80065ce:	4622      	mov	r2, r4
 80065d0:	4629      	mov	r1, r5
 80065d2:	4630      	mov	r0, r6
 80065d4:	f7ff ffa2 	bl	800651c <__sfputs_r>
 80065d8:	3001      	adds	r0, #1
 80065da:	f000 80a7 	beq.w	800672c <_vfiprintf_r+0x1ec>
 80065de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065e0:	445a      	add	r2, fp
 80065e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80065e4:	f89a 3000 	ldrb.w	r3, [sl]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 809f 	beq.w	800672c <_vfiprintf_r+0x1ec>
 80065ee:	2300      	movs	r3, #0
 80065f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065f8:	f10a 0a01 	add.w	sl, sl, #1
 80065fc:	9304      	str	r3, [sp, #16]
 80065fe:	9307      	str	r3, [sp, #28]
 8006600:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006604:	931a      	str	r3, [sp, #104]	@ 0x68
 8006606:	4654      	mov	r4, sl
 8006608:	2205      	movs	r2, #5
 800660a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800660e:	4853      	ldr	r0, [pc, #332]	@ (800675c <_vfiprintf_r+0x21c>)
 8006610:	f7f9 fdde 	bl	80001d0 <memchr>
 8006614:	9a04      	ldr	r2, [sp, #16]
 8006616:	b9d8      	cbnz	r0, 8006650 <_vfiprintf_r+0x110>
 8006618:	06d1      	lsls	r1, r2, #27
 800661a:	bf44      	itt	mi
 800661c:	2320      	movmi	r3, #32
 800661e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006622:	0713      	lsls	r3, r2, #28
 8006624:	bf44      	itt	mi
 8006626:	232b      	movmi	r3, #43	@ 0x2b
 8006628:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800662c:	f89a 3000 	ldrb.w	r3, [sl]
 8006630:	2b2a      	cmp	r3, #42	@ 0x2a
 8006632:	d015      	beq.n	8006660 <_vfiprintf_r+0x120>
 8006634:	9a07      	ldr	r2, [sp, #28]
 8006636:	4654      	mov	r4, sl
 8006638:	2000      	movs	r0, #0
 800663a:	f04f 0c0a 	mov.w	ip, #10
 800663e:	4621      	mov	r1, r4
 8006640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006644:	3b30      	subs	r3, #48	@ 0x30
 8006646:	2b09      	cmp	r3, #9
 8006648:	d94b      	bls.n	80066e2 <_vfiprintf_r+0x1a2>
 800664a:	b1b0      	cbz	r0, 800667a <_vfiprintf_r+0x13a>
 800664c:	9207      	str	r2, [sp, #28]
 800664e:	e014      	b.n	800667a <_vfiprintf_r+0x13a>
 8006650:	eba0 0308 	sub.w	r3, r0, r8
 8006654:	fa09 f303 	lsl.w	r3, r9, r3
 8006658:	4313      	orrs	r3, r2
 800665a:	9304      	str	r3, [sp, #16]
 800665c:	46a2      	mov	sl, r4
 800665e:	e7d2      	b.n	8006606 <_vfiprintf_r+0xc6>
 8006660:	9b03      	ldr	r3, [sp, #12]
 8006662:	1d19      	adds	r1, r3, #4
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	9103      	str	r1, [sp, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	bfbb      	ittet	lt
 800666c:	425b      	neglt	r3, r3
 800666e:	f042 0202 	orrlt.w	r2, r2, #2
 8006672:	9307      	strge	r3, [sp, #28]
 8006674:	9307      	strlt	r3, [sp, #28]
 8006676:	bfb8      	it	lt
 8006678:	9204      	strlt	r2, [sp, #16]
 800667a:	7823      	ldrb	r3, [r4, #0]
 800667c:	2b2e      	cmp	r3, #46	@ 0x2e
 800667e:	d10a      	bne.n	8006696 <_vfiprintf_r+0x156>
 8006680:	7863      	ldrb	r3, [r4, #1]
 8006682:	2b2a      	cmp	r3, #42	@ 0x2a
 8006684:	d132      	bne.n	80066ec <_vfiprintf_r+0x1ac>
 8006686:	9b03      	ldr	r3, [sp, #12]
 8006688:	1d1a      	adds	r2, r3, #4
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	9203      	str	r2, [sp, #12]
 800668e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006692:	3402      	adds	r4, #2
 8006694:	9305      	str	r3, [sp, #20]
 8006696:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800676c <_vfiprintf_r+0x22c>
 800669a:	7821      	ldrb	r1, [r4, #0]
 800669c:	2203      	movs	r2, #3
 800669e:	4650      	mov	r0, sl
 80066a0:	f7f9 fd96 	bl	80001d0 <memchr>
 80066a4:	b138      	cbz	r0, 80066b6 <_vfiprintf_r+0x176>
 80066a6:	9b04      	ldr	r3, [sp, #16]
 80066a8:	eba0 000a 	sub.w	r0, r0, sl
 80066ac:	2240      	movs	r2, #64	@ 0x40
 80066ae:	4082      	lsls	r2, r0
 80066b0:	4313      	orrs	r3, r2
 80066b2:	3401      	adds	r4, #1
 80066b4:	9304      	str	r3, [sp, #16]
 80066b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ba:	4829      	ldr	r0, [pc, #164]	@ (8006760 <_vfiprintf_r+0x220>)
 80066bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80066c0:	2206      	movs	r2, #6
 80066c2:	f7f9 fd85 	bl	80001d0 <memchr>
 80066c6:	2800      	cmp	r0, #0
 80066c8:	d03f      	beq.n	800674a <_vfiprintf_r+0x20a>
 80066ca:	4b26      	ldr	r3, [pc, #152]	@ (8006764 <_vfiprintf_r+0x224>)
 80066cc:	bb1b      	cbnz	r3, 8006716 <_vfiprintf_r+0x1d6>
 80066ce:	9b03      	ldr	r3, [sp, #12]
 80066d0:	3307      	adds	r3, #7
 80066d2:	f023 0307 	bic.w	r3, r3, #7
 80066d6:	3308      	adds	r3, #8
 80066d8:	9303      	str	r3, [sp, #12]
 80066da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066dc:	443b      	add	r3, r7
 80066de:	9309      	str	r3, [sp, #36]	@ 0x24
 80066e0:	e76a      	b.n	80065b8 <_vfiprintf_r+0x78>
 80066e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80066e6:	460c      	mov	r4, r1
 80066e8:	2001      	movs	r0, #1
 80066ea:	e7a8      	b.n	800663e <_vfiprintf_r+0xfe>
 80066ec:	2300      	movs	r3, #0
 80066ee:	3401      	adds	r4, #1
 80066f0:	9305      	str	r3, [sp, #20]
 80066f2:	4619      	mov	r1, r3
 80066f4:	f04f 0c0a 	mov.w	ip, #10
 80066f8:	4620      	mov	r0, r4
 80066fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066fe:	3a30      	subs	r2, #48	@ 0x30
 8006700:	2a09      	cmp	r2, #9
 8006702:	d903      	bls.n	800670c <_vfiprintf_r+0x1cc>
 8006704:	2b00      	cmp	r3, #0
 8006706:	d0c6      	beq.n	8006696 <_vfiprintf_r+0x156>
 8006708:	9105      	str	r1, [sp, #20]
 800670a:	e7c4      	b.n	8006696 <_vfiprintf_r+0x156>
 800670c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006710:	4604      	mov	r4, r0
 8006712:	2301      	movs	r3, #1
 8006714:	e7f0      	b.n	80066f8 <_vfiprintf_r+0x1b8>
 8006716:	ab03      	add	r3, sp, #12
 8006718:	9300      	str	r3, [sp, #0]
 800671a:	462a      	mov	r2, r5
 800671c:	4b12      	ldr	r3, [pc, #72]	@ (8006768 <_vfiprintf_r+0x228>)
 800671e:	a904      	add	r1, sp, #16
 8006720:	4630      	mov	r0, r6
 8006722:	f7fd fbd7 	bl	8003ed4 <_printf_float>
 8006726:	4607      	mov	r7, r0
 8006728:	1c78      	adds	r0, r7, #1
 800672a:	d1d6      	bne.n	80066da <_vfiprintf_r+0x19a>
 800672c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800672e:	07d9      	lsls	r1, r3, #31
 8006730:	d405      	bmi.n	800673e <_vfiprintf_r+0x1fe>
 8006732:	89ab      	ldrh	r3, [r5, #12]
 8006734:	059a      	lsls	r2, r3, #22
 8006736:	d402      	bmi.n	800673e <_vfiprintf_r+0x1fe>
 8006738:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800673a:	f7fe f927 	bl	800498c <__retarget_lock_release_recursive>
 800673e:	89ab      	ldrh	r3, [r5, #12]
 8006740:	065b      	lsls	r3, r3, #25
 8006742:	f53f af1f 	bmi.w	8006584 <_vfiprintf_r+0x44>
 8006746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006748:	e71e      	b.n	8006588 <_vfiprintf_r+0x48>
 800674a:	ab03      	add	r3, sp, #12
 800674c:	9300      	str	r3, [sp, #0]
 800674e:	462a      	mov	r2, r5
 8006750:	4b05      	ldr	r3, [pc, #20]	@ (8006768 <_vfiprintf_r+0x228>)
 8006752:	a904      	add	r1, sp, #16
 8006754:	4630      	mov	r0, r6
 8006756:	f7fd fe55 	bl	8004404 <_printf_i>
 800675a:	e7e4      	b.n	8006726 <_vfiprintf_r+0x1e6>
 800675c:	08006bb6 	.word	0x08006bb6
 8006760:	08006bc0 	.word	0x08006bc0
 8006764:	08003ed5 	.word	0x08003ed5
 8006768:	0800651d 	.word	0x0800651d
 800676c:	08006bbc 	.word	0x08006bbc

08006770 <__swbuf_r>:
 8006770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006772:	460e      	mov	r6, r1
 8006774:	4614      	mov	r4, r2
 8006776:	4605      	mov	r5, r0
 8006778:	b118      	cbz	r0, 8006782 <__swbuf_r+0x12>
 800677a:	6a03      	ldr	r3, [r0, #32]
 800677c:	b90b      	cbnz	r3, 8006782 <__swbuf_r+0x12>
 800677e:	f7fd ffeb 	bl	8004758 <__sinit>
 8006782:	69a3      	ldr	r3, [r4, #24]
 8006784:	60a3      	str	r3, [r4, #8]
 8006786:	89a3      	ldrh	r3, [r4, #12]
 8006788:	071a      	lsls	r2, r3, #28
 800678a:	d501      	bpl.n	8006790 <__swbuf_r+0x20>
 800678c:	6923      	ldr	r3, [r4, #16]
 800678e:	b943      	cbnz	r3, 80067a2 <__swbuf_r+0x32>
 8006790:	4621      	mov	r1, r4
 8006792:	4628      	mov	r0, r5
 8006794:	f000 f82a 	bl	80067ec <__swsetup_r>
 8006798:	b118      	cbz	r0, 80067a2 <__swbuf_r+0x32>
 800679a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800679e:	4638      	mov	r0, r7
 80067a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	6922      	ldr	r2, [r4, #16]
 80067a6:	1a98      	subs	r0, r3, r2
 80067a8:	6963      	ldr	r3, [r4, #20]
 80067aa:	b2f6      	uxtb	r6, r6
 80067ac:	4283      	cmp	r3, r0
 80067ae:	4637      	mov	r7, r6
 80067b0:	dc05      	bgt.n	80067be <__swbuf_r+0x4e>
 80067b2:	4621      	mov	r1, r4
 80067b4:	4628      	mov	r0, r5
 80067b6:	f7ff fd99 	bl	80062ec <_fflush_r>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d1ed      	bne.n	800679a <__swbuf_r+0x2a>
 80067be:	68a3      	ldr	r3, [r4, #8]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	60a3      	str	r3, [r4, #8]
 80067c4:	6823      	ldr	r3, [r4, #0]
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	6022      	str	r2, [r4, #0]
 80067ca:	701e      	strb	r6, [r3, #0]
 80067cc:	6962      	ldr	r2, [r4, #20]
 80067ce:	1c43      	adds	r3, r0, #1
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d004      	beq.n	80067de <__swbuf_r+0x6e>
 80067d4:	89a3      	ldrh	r3, [r4, #12]
 80067d6:	07db      	lsls	r3, r3, #31
 80067d8:	d5e1      	bpl.n	800679e <__swbuf_r+0x2e>
 80067da:	2e0a      	cmp	r6, #10
 80067dc:	d1df      	bne.n	800679e <__swbuf_r+0x2e>
 80067de:	4621      	mov	r1, r4
 80067e0:	4628      	mov	r0, r5
 80067e2:	f7ff fd83 	bl	80062ec <_fflush_r>
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d0d9      	beq.n	800679e <__swbuf_r+0x2e>
 80067ea:	e7d6      	b.n	800679a <__swbuf_r+0x2a>

080067ec <__swsetup_r>:
 80067ec:	b538      	push	{r3, r4, r5, lr}
 80067ee:	4b29      	ldr	r3, [pc, #164]	@ (8006894 <__swsetup_r+0xa8>)
 80067f0:	4605      	mov	r5, r0
 80067f2:	6818      	ldr	r0, [r3, #0]
 80067f4:	460c      	mov	r4, r1
 80067f6:	b118      	cbz	r0, 8006800 <__swsetup_r+0x14>
 80067f8:	6a03      	ldr	r3, [r0, #32]
 80067fa:	b90b      	cbnz	r3, 8006800 <__swsetup_r+0x14>
 80067fc:	f7fd ffac 	bl	8004758 <__sinit>
 8006800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006804:	0719      	lsls	r1, r3, #28
 8006806:	d422      	bmi.n	800684e <__swsetup_r+0x62>
 8006808:	06da      	lsls	r2, r3, #27
 800680a:	d407      	bmi.n	800681c <__swsetup_r+0x30>
 800680c:	2209      	movs	r2, #9
 800680e:	602a      	str	r2, [r5, #0]
 8006810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006814:	81a3      	strh	r3, [r4, #12]
 8006816:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800681a:	e033      	b.n	8006884 <__swsetup_r+0x98>
 800681c:	0758      	lsls	r0, r3, #29
 800681e:	d512      	bpl.n	8006846 <__swsetup_r+0x5a>
 8006820:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006822:	b141      	cbz	r1, 8006836 <__swsetup_r+0x4a>
 8006824:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006828:	4299      	cmp	r1, r3
 800682a:	d002      	beq.n	8006832 <__swsetup_r+0x46>
 800682c:	4628      	mov	r0, r5
 800682e:	f7fe ff07 	bl	8005640 <_free_r>
 8006832:	2300      	movs	r3, #0
 8006834:	6363      	str	r3, [r4, #52]	@ 0x34
 8006836:	89a3      	ldrh	r3, [r4, #12]
 8006838:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800683c:	81a3      	strh	r3, [r4, #12]
 800683e:	2300      	movs	r3, #0
 8006840:	6063      	str	r3, [r4, #4]
 8006842:	6923      	ldr	r3, [r4, #16]
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	89a3      	ldrh	r3, [r4, #12]
 8006848:	f043 0308 	orr.w	r3, r3, #8
 800684c:	81a3      	strh	r3, [r4, #12]
 800684e:	6923      	ldr	r3, [r4, #16]
 8006850:	b94b      	cbnz	r3, 8006866 <__swsetup_r+0x7a>
 8006852:	89a3      	ldrh	r3, [r4, #12]
 8006854:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800685c:	d003      	beq.n	8006866 <__swsetup_r+0x7a>
 800685e:	4621      	mov	r1, r4
 8006860:	4628      	mov	r0, r5
 8006862:	f000 f883 	bl	800696c <__smakebuf_r>
 8006866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800686a:	f013 0201 	ands.w	r2, r3, #1
 800686e:	d00a      	beq.n	8006886 <__swsetup_r+0x9a>
 8006870:	2200      	movs	r2, #0
 8006872:	60a2      	str	r2, [r4, #8]
 8006874:	6962      	ldr	r2, [r4, #20]
 8006876:	4252      	negs	r2, r2
 8006878:	61a2      	str	r2, [r4, #24]
 800687a:	6922      	ldr	r2, [r4, #16]
 800687c:	b942      	cbnz	r2, 8006890 <__swsetup_r+0xa4>
 800687e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006882:	d1c5      	bne.n	8006810 <__swsetup_r+0x24>
 8006884:	bd38      	pop	{r3, r4, r5, pc}
 8006886:	0799      	lsls	r1, r3, #30
 8006888:	bf58      	it	pl
 800688a:	6962      	ldrpl	r2, [r4, #20]
 800688c:	60a2      	str	r2, [r4, #8]
 800688e:	e7f4      	b.n	800687a <__swsetup_r+0x8e>
 8006890:	2000      	movs	r0, #0
 8006892:	e7f7      	b.n	8006884 <__swsetup_r+0x98>
 8006894:	20000018 	.word	0x20000018

08006898 <_raise_r>:
 8006898:	291f      	cmp	r1, #31
 800689a:	b538      	push	{r3, r4, r5, lr}
 800689c:	4605      	mov	r5, r0
 800689e:	460c      	mov	r4, r1
 80068a0:	d904      	bls.n	80068ac <_raise_r+0x14>
 80068a2:	2316      	movs	r3, #22
 80068a4:	6003      	str	r3, [r0, #0]
 80068a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80068aa:	bd38      	pop	{r3, r4, r5, pc}
 80068ac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80068ae:	b112      	cbz	r2, 80068b6 <_raise_r+0x1e>
 80068b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068b4:	b94b      	cbnz	r3, 80068ca <_raise_r+0x32>
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 f830 	bl	800691c <_getpid_r>
 80068bc:	4622      	mov	r2, r4
 80068be:	4601      	mov	r1, r0
 80068c0:	4628      	mov	r0, r5
 80068c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068c6:	f000 b817 	b.w	80068f8 <_kill_r>
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d00a      	beq.n	80068e4 <_raise_r+0x4c>
 80068ce:	1c59      	adds	r1, r3, #1
 80068d0:	d103      	bne.n	80068da <_raise_r+0x42>
 80068d2:	2316      	movs	r3, #22
 80068d4:	6003      	str	r3, [r0, #0]
 80068d6:	2001      	movs	r0, #1
 80068d8:	e7e7      	b.n	80068aa <_raise_r+0x12>
 80068da:	2100      	movs	r1, #0
 80068dc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80068e0:	4620      	mov	r0, r4
 80068e2:	4798      	blx	r3
 80068e4:	2000      	movs	r0, #0
 80068e6:	e7e0      	b.n	80068aa <_raise_r+0x12>

080068e8 <raise>:
 80068e8:	4b02      	ldr	r3, [pc, #8]	@ (80068f4 <raise+0xc>)
 80068ea:	4601      	mov	r1, r0
 80068ec:	6818      	ldr	r0, [r3, #0]
 80068ee:	f7ff bfd3 	b.w	8006898 <_raise_r>
 80068f2:	bf00      	nop
 80068f4:	20000018 	.word	0x20000018

080068f8 <_kill_r>:
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	4d07      	ldr	r5, [pc, #28]	@ (8006918 <_kill_r+0x20>)
 80068fc:	2300      	movs	r3, #0
 80068fe:	4604      	mov	r4, r0
 8006900:	4608      	mov	r0, r1
 8006902:	4611      	mov	r1, r2
 8006904:	602b      	str	r3, [r5, #0]
 8006906:	f7fa fecf 	bl	80016a8 <_kill>
 800690a:	1c43      	adds	r3, r0, #1
 800690c:	d102      	bne.n	8006914 <_kill_r+0x1c>
 800690e:	682b      	ldr	r3, [r5, #0]
 8006910:	b103      	cbz	r3, 8006914 <_kill_r+0x1c>
 8006912:	6023      	str	r3, [r4, #0]
 8006914:	bd38      	pop	{r3, r4, r5, pc}
 8006916:	bf00      	nop
 8006918:	200003e0 	.word	0x200003e0

0800691c <_getpid_r>:
 800691c:	f7fa bebc 	b.w	8001698 <_getpid>

08006920 <__swhatbuf_r>:
 8006920:	b570      	push	{r4, r5, r6, lr}
 8006922:	460c      	mov	r4, r1
 8006924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006928:	2900      	cmp	r1, #0
 800692a:	b096      	sub	sp, #88	@ 0x58
 800692c:	4615      	mov	r5, r2
 800692e:	461e      	mov	r6, r3
 8006930:	da0d      	bge.n	800694e <__swhatbuf_r+0x2e>
 8006932:	89a3      	ldrh	r3, [r4, #12]
 8006934:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006938:	f04f 0100 	mov.w	r1, #0
 800693c:	bf14      	ite	ne
 800693e:	2340      	movne	r3, #64	@ 0x40
 8006940:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006944:	2000      	movs	r0, #0
 8006946:	6031      	str	r1, [r6, #0]
 8006948:	602b      	str	r3, [r5, #0]
 800694a:	b016      	add	sp, #88	@ 0x58
 800694c:	bd70      	pop	{r4, r5, r6, pc}
 800694e:	466a      	mov	r2, sp
 8006950:	f000 f848 	bl	80069e4 <_fstat_r>
 8006954:	2800      	cmp	r0, #0
 8006956:	dbec      	blt.n	8006932 <__swhatbuf_r+0x12>
 8006958:	9901      	ldr	r1, [sp, #4]
 800695a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800695e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006962:	4259      	negs	r1, r3
 8006964:	4159      	adcs	r1, r3
 8006966:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800696a:	e7eb      	b.n	8006944 <__swhatbuf_r+0x24>

0800696c <__smakebuf_r>:
 800696c:	898b      	ldrh	r3, [r1, #12]
 800696e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006970:	079d      	lsls	r5, r3, #30
 8006972:	4606      	mov	r6, r0
 8006974:	460c      	mov	r4, r1
 8006976:	d507      	bpl.n	8006988 <__smakebuf_r+0x1c>
 8006978:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	6123      	str	r3, [r4, #16]
 8006980:	2301      	movs	r3, #1
 8006982:	6163      	str	r3, [r4, #20]
 8006984:	b003      	add	sp, #12
 8006986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006988:	ab01      	add	r3, sp, #4
 800698a:	466a      	mov	r2, sp
 800698c:	f7ff ffc8 	bl	8006920 <__swhatbuf_r>
 8006990:	9f00      	ldr	r7, [sp, #0]
 8006992:	4605      	mov	r5, r0
 8006994:	4639      	mov	r1, r7
 8006996:	4630      	mov	r0, r6
 8006998:	f7fe fec6 	bl	8005728 <_malloc_r>
 800699c:	b948      	cbnz	r0, 80069b2 <__smakebuf_r+0x46>
 800699e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069a2:	059a      	lsls	r2, r3, #22
 80069a4:	d4ee      	bmi.n	8006984 <__smakebuf_r+0x18>
 80069a6:	f023 0303 	bic.w	r3, r3, #3
 80069aa:	f043 0302 	orr.w	r3, r3, #2
 80069ae:	81a3      	strh	r3, [r4, #12]
 80069b0:	e7e2      	b.n	8006978 <__smakebuf_r+0xc>
 80069b2:	89a3      	ldrh	r3, [r4, #12]
 80069b4:	6020      	str	r0, [r4, #0]
 80069b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ba:	81a3      	strh	r3, [r4, #12]
 80069bc:	9b01      	ldr	r3, [sp, #4]
 80069be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80069c2:	b15b      	cbz	r3, 80069dc <__smakebuf_r+0x70>
 80069c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069c8:	4630      	mov	r0, r6
 80069ca:	f000 f81d 	bl	8006a08 <_isatty_r>
 80069ce:	b128      	cbz	r0, 80069dc <__smakebuf_r+0x70>
 80069d0:	89a3      	ldrh	r3, [r4, #12]
 80069d2:	f023 0303 	bic.w	r3, r3, #3
 80069d6:	f043 0301 	orr.w	r3, r3, #1
 80069da:	81a3      	strh	r3, [r4, #12]
 80069dc:	89a3      	ldrh	r3, [r4, #12]
 80069de:	431d      	orrs	r5, r3
 80069e0:	81a5      	strh	r5, [r4, #12]
 80069e2:	e7cf      	b.n	8006984 <__smakebuf_r+0x18>

080069e4 <_fstat_r>:
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	4d07      	ldr	r5, [pc, #28]	@ (8006a04 <_fstat_r+0x20>)
 80069e8:	2300      	movs	r3, #0
 80069ea:	4604      	mov	r4, r0
 80069ec:	4608      	mov	r0, r1
 80069ee:	4611      	mov	r1, r2
 80069f0:	602b      	str	r3, [r5, #0]
 80069f2:	f7fa feb9 	bl	8001768 <_fstat>
 80069f6:	1c43      	adds	r3, r0, #1
 80069f8:	d102      	bne.n	8006a00 <_fstat_r+0x1c>
 80069fa:	682b      	ldr	r3, [r5, #0]
 80069fc:	b103      	cbz	r3, 8006a00 <_fstat_r+0x1c>
 80069fe:	6023      	str	r3, [r4, #0]
 8006a00:	bd38      	pop	{r3, r4, r5, pc}
 8006a02:	bf00      	nop
 8006a04:	200003e0 	.word	0x200003e0

08006a08 <_isatty_r>:
 8006a08:	b538      	push	{r3, r4, r5, lr}
 8006a0a:	4d06      	ldr	r5, [pc, #24]	@ (8006a24 <_isatty_r+0x1c>)
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	4604      	mov	r4, r0
 8006a10:	4608      	mov	r0, r1
 8006a12:	602b      	str	r3, [r5, #0]
 8006a14:	f7fa feb8 	bl	8001788 <_isatty>
 8006a18:	1c43      	adds	r3, r0, #1
 8006a1a:	d102      	bne.n	8006a22 <_isatty_r+0x1a>
 8006a1c:	682b      	ldr	r3, [r5, #0]
 8006a1e:	b103      	cbz	r3, 8006a22 <_isatty_r+0x1a>
 8006a20:	6023      	str	r3, [r4, #0]
 8006a22:	bd38      	pop	{r3, r4, r5, pc}
 8006a24:	200003e0 	.word	0x200003e0

08006a28 <_init>:
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	bf00      	nop
 8006a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a2e:	bc08      	pop	{r3}
 8006a30:	469e      	mov	lr, r3
 8006a32:	4770      	bx	lr

08006a34 <_fini>:
 8006a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a36:	bf00      	nop
 8006a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a3a:	bc08      	pop	{r3}
 8006a3c:	469e      	mov	lr, r3
 8006a3e:	4770      	bx	lr
