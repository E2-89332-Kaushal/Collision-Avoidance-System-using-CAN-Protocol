
HAL_CAN_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000553c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080056cc  080056cc  000066cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005744  08005744  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005744  08005744  00006744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800574c  0800574c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800574c  0800574c  0000674c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005750  08005750  00006750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005754  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          000002a0  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002fc  200002fc  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f379  00000000  00000000  00007086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fc9  00000000  00000000  000163ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  000183c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b0e  00000000  00000000  000191e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000229f5  00000000  00000000  00019cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f10e  00000000  00000000  0003c6eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da595  00000000  00000000  0004b7f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00125d8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004274  00000000  00000000  00125dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0012a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080056b4 	.word	0x080056b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080056b4 	.word	0x080056b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800089c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80008a0:	f000 b988 	b.w	8000bb4 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	468e      	mov	lr, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	4688      	mov	r8, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d962      	bls.n	8000998 <__udivmoddi4+0xdc>
 80008d2:	fab2 f682 	clz	r6, r2
 80008d6:	b14e      	cbz	r6, 80008ec <__udivmoddi4+0x30>
 80008d8:	f1c6 0320 	rsb	r3, r6, #32
 80008dc:	fa01 f806 	lsl.w	r8, r1, r6
 80008e0:	fa20 f303 	lsr.w	r3, r0, r3
 80008e4:	40b7      	lsls	r7, r6
 80008e6:	ea43 0808 	orr.w	r8, r3, r8
 80008ea:	40b4      	lsls	r4, r6
 80008ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008f0:	fa1f fc87 	uxth.w	ip, r7
 80008f4:	fbb8 f1fe 	udiv	r1, r8, lr
 80008f8:	0c23      	lsrs	r3, r4, #16
 80008fa:	fb0e 8811 	mls	r8, lr, r1, r8
 80008fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000902:	fb01 f20c 	mul.w	r2, r1, ip
 8000906:	429a      	cmp	r2, r3
 8000908:	d909      	bls.n	800091e <__udivmoddi4+0x62>
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000910:	f080 80ea 	bcs.w	8000ae8 <__udivmoddi4+0x22c>
 8000914:	429a      	cmp	r2, r3
 8000916:	f240 80e7 	bls.w	8000ae8 <__udivmoddi4+0x22c>
 800091a:	3902      	subs	r1, #2
 800091c:	443b      	add	r3, r7
 800091e:	1a9a      	subs	r2, r3, r2
 8000920:	b2a3      	uxth	r3, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800092e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000932:	459c      	cmp	ip, r3
 8000934:	d909      	bls.n	800094a <__udivmoddi4+0x8e>
 8000936:	18fb      	adds	r3, r7, r3
 8000938:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800093c:	f080 80d6 	bcs.w	8000aec <__udivmoddi4+0x230>
 8000940:	459c      	cmp	ip, r3
 8000942:	f240 80d3 	bls.w	8000aec <__udivmoddi4+0x230>
 8000946:	443b      	add	r3, r7
 8000948:	3802      	subs	r0, #2
 800094a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800094e:	eba3 030c 	sub.w	r3, r3, ip
 8000952:	2100      	movs	r1, #0
 8000954:	b11d      	cbz	r5, 800095e <__udivmoddi4+0xa2>
 8000956:	40f3      	lsrs	r3, r6
 8000958:	2200      	movs	r2, #0
 800095a:	e9c5 3200 	strd	r3, r2, [r5]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d905      	bls.n	8000972 <__udivmoddi4+0xb6>
 8000966:	b10d      	cbz	r5, 800096c <__udivmoddi4+0xb0>
 8000968:	e9c5 0100 	strd	r0, r1, [r5]
 800096c:	2100      	movs	r1, #0
 800096e:	4608      	mov	r0, r1
 8000970:	e7f5      	b.n	800095e <__udivmoddi4+0xa2>
 8000972:	fab3 f183 	clz	r1, r3
 8000976:	2900      	cmp	r1, #0
 8000978:	d146      	bne.n	8000a08 <__udivmoddi4+0x14c>
 800097a:	4573      	cmp	r3, lr
 800097c:	d302      	bcc.n	8000984 <__udivmoddi4+0xc8>
 800097e:	4282      	cmp	r2, r0
 8000980:	f200 8105 	bhi.w	8000b8e <__udivmoddi4+0x2d2>
 8000984:	1a84      	subs	r4, r0, r2
 8000986:	eb6e 0203 	sbc.w	r2, lr, r3
 800098a:	2001      	movs	r0, #1
 800098c:	4690      	mov	r8, r2
 800098e:	2d00      	cmp	r5, #0
 8000990:	d0e5      	beq.n	800095e <__udivmoddi4+0xa2>
 8000992:	e9c5 4800 	strd	r4, r8, [r5]
 8000996:	e7e2      	b.n	800095e <__udivmoddi4+0xa2>
 8000998:	2a00      	cmp	r2, #0
 800099a:	f000 8090 	beq.w	8000abe <__udivmoddi4+0x202>
 800099e:	fab2 f682 	clz	r6, r2
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	f040 80a4 	bne.w	8000af0 <__udivmoddi4+0x234>
 80009a8:	1a8a      	subs	r2, r1, r2
 80009aa:	0c03      	lsrs	r3, r0, #16
 80009ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b0:	b280      	uxth	r0, r0
 80009b2:	b2bc      	uxth	r4, r7
 80009b4:	2101      	movs	r1, #1
 80009b6:	fbb2 fcfe 	udiv	ip, r2, lr
 80009ba:	fb0e 221c 	mls	r2, lr, ip, r2
 80009be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009c2:	fb04 f20c 	mul.w	r2, r4, ip
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d907      	bls.n	80009da <__udivmoddi4+0x11e>
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80009d0:	d202      	bcs.n	80009d8 <__udivmoddi4+0x11c>
 80009d2:	429a      	cmp	r2, r3
 80009d4:	f200 80e0 	bhi.w	8000b98 <__udivmoddi4+0x2dc>
 80009d8:	46c4      	mov	ip, r8
 80009da:	1a9b      	subs	r3, r3, r2
 80009dc:	fbb3 f2fe 	udiv	r2, r3, lr
 80009e0:	fb0e 3312 	mls	r3, lr, r2, r3
 80009e4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009e8:	fb02 f404 	mul.w	r4, r2, r4
 80009ec:	429c      	cmp	r4, r3
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0x144>
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0x142>
 80009f8:	429c      	cmp	r4, r3
 80009fa:	f200 80ca 	bhi.w	8000b92 <__udivmoddi4+0x2d6>
 80009fe:	4602      	mov	r2, r0
 8000a00:	1b1b      	subs	r3, r3, r4
 8000a02:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a06:	e7a5      	b.n	8000954 <__udivmoddi4+0x98>
 8000a08:	f1c1 0620 	rsb	r6, r1, #32
 8000a0c:	408b      	lsls	r3, r1
 8000a0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a12:	431f      	orrs	r7, r3
 8000a14:	fa0e f401 	lsl.w	r4, lr, r1
 8000a18:	fa20 f306 	lsr.w	r3, r0, r6
 8000a1c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a20:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a24:	4323      	orrs	r3, r4
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	fa1f fc87 	uxth.w	ip, r7
 8000a2e:	fbbe f0f9 	udiv	r0, lr, r9
 8000a32:	0c1c      	lsrs	r4, r3, #16
 8000a34:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a38:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a3c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a40:	45a6      	cmp	lr, r4
 8000a42:	fa02 f201 	lsl.w	r2, r2, r1
 8000a46:	d909      	bls.n	8000a5c <__udivmoddi4+0x1a0>
 8000a48:	193c      	adds	r4, r7, r4
 8000a4a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000a4e:	f080 809c 	bcs.w	8000b8a <__udivmoddi4+0x2ce>
 8000a52:	45a6      	cmp	lr, r4
 8000a54:	f240 8099 	bls.w	8000b8a <__udivmoddi4+0x2ce>
 8000a58:	3802      	subs	r0, #2
 8000a5a:	443c      	add	r4, r7
 8000a5c:	eba4 040e 	sub.w	r4, r4, lr
 8000a60:	fa1f fe83 	uxth.w	lr, r3
 8000a64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a68:	fb09 4413 	mls	r4, r9, r3, r4
 8000a6c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a70:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a74:	45a4      	cmp	ip, r4
 8000a76:	d908      	bls.n	8000a8a <__udivmoddi4+0x1ce>
 8000a78:	193c      	adds	r4, r7, r4
 8000a7a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000a7e:	f080 8082 	bcs.w	8000b86 <__udivmoddi4+0x2ca>
 8000a82:	45a4      	cmp	ip, r4
 8000a84:	d97f      	bls.n	8000b86 <__udivmoddi4+0x2ca>
 8000a86:	3b02      	subs	r3, #2
 8000a88:	443c      	add	r4, r7
 8000a8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a8e:	eba4 040c 	sub.w	r4, r4, ip
 8000a92:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a96:	4564      	cmp	r4, ip
 8000a98:	4673      	mov	r3, lr
 8000a9a:	46e1      	mov	r9, ip
 8000a9c:	d362      	bcc.n	8000b64 <__udivmoddi4+0x2a8>
 8000a9e:	d05f      	beq.n	8000b60 <__udivmoddi4+0x2a4>
 8000aa0:	b15d      	cbz	r5, 8000aba <__udivmoddi4+0x1fe>
 8000aa2:	ebb8 0203 	subs.w	r2, r8, r3
 8000aa6:	eb64 0409 	sbc.w	r4, r4, r9
 8000aaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000aae:	fa22 f301 	lsr.w	r3, r2, r1
 8000ab2:	431e      	orrs	r6, r3
 8000ab4:	40cc      	lsrs	r4, r1
 8000ab6:	e9c5 6400 	strd	r6, r4, [r5]
 8000aba:	2100      	movs	r1, #0
 8000abc:	e74f      	b.n	800095e <__udivmoddi4+0xa2>
 8000abe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ac2:	0c01      	lsrs	r1, r0, #16
 8000ac4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4638      	mov	r0, r7
 8000ad2:	463c      	mov	r4, r7
 8000ad4:	46b8      	mov	r8, r7
 8000ad6:	46be      	mov	lr, r7
 8000ad8:	2620      	movs	r6, #32
 8000ada:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ade:	eba2 0208 	sub.w	r2, r2, r8
 8000ae2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ae6:	e766      	b.n	80009b6 <__udivmoddi4+0xfa>
 8000ae8:	4601      	mov	r1, r0
 8000aea:	e718      	b.n	800091e <__udivmoddi4+0x62>
 8000aec:	4610      	mov	r0, r2
 8000aee:	e72c      	b.n	800094a <__udivmoddi4+0x8e>
 8000af0:	f1c6 0220 	rsb	r2, r6, #32
 8000af4:	fa2e f302 	lsr.w	r3, lr, r2
 8000af8:	40b7      	lsls	r7, r6
 8000afa:	40b1      	lsls	r1, r6
 8000afc:	fa20 f202 	lsr.w	r2, r0, r2
 8000b00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b04:	430a      	orrs	r2, r1
 8000b06:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b0a:	b2bc      	uxth	r4, r7
 8000b0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b10:	0c11      	lsrs	r1, r2, #16
 8000b12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b16:	fb08 f904 	mul.w	r9, r8, r4
 8000b1a:	40b0      	lsls	r0, r6
 8000b1c:	4589      	cmp	r9, r1
 8000b1e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b22:	b280      	uxth	r0, r0
 8000b24:	d93e      	bls.n	8000ba4 <__udivmoddi4+0x2e8>
 8000b26:	1879      	adds	r1, r7, r1
 8000b28:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000b2c:	d201      	bcs.n	8000b32 <__udivmoddi4+0x276>
 8000b2e:	4589      	cmp	r9, r1
 8000b30:	d81f      	bhi.n	8000b72 <__udivmoddi4+0x2b6>
 8000b32:	eba1 0109 	sub.w	r1, r1, r9
 8000b36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b3a:	fb09 f804 	mul.w	r8, r9, r4
 8000b3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b42:	b292      	uxth	r2, r2
 8000b44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b48:	4542      	cmp	r2, r8
 8000b4a:	d229      	bcs.n	8000ba0 <__udivmoddi4+0x2e4>
 8000b4c:	18ba      	adds	r2, r7, r2
 8000b4e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000b52:	d2c4      	bcs.n	8000ade <__udivmoddi4+0x222>
 8000b54:	4542      	cmp	r2, r8
 8000b56:	d2c2      	bcs.n	8000ade <__udivmoddi4+0x222>
 8000b58:	f1a9 0102 	sub.w	r1, r9, #2
 8000b5c:	443a      	add	r2, r7
 8000b5e:	e7be      	b.n	8000ade <__udivmoddi4+0x222>
 8000b60:	45f0      	cmp	r8, lr
 8000b62:	d29d      	bcs.n	8000aa0 <__udivmoddi4+0x1e4>
 8000b64:	ebbe 0302 	subs.w	r3, lr, r2
 8000b68:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b6c:	3801      	subs	r0, #1
 8000b6e:	46e1      	mov	r9, ip
 8000b70:	e796      	b.n	8000aa0 <__udivmoddi4+0x1e4>
 8000b72:	eba7 0909 	sub.w	r9, r7, r9
 8000b76:	4449      	add	r1, r9
 8000b78:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b7c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b80:	fb09 f804 	mul.w	r8, r9, r4
 8000b84:	e7db      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b86:	4673      	mov	r3, lr
 8000b88:	e77f      	b.n	8000a8a <__udivmoddi4+0x1ce>
 8000b8a:	4650      	mov	r0, sl
 8000b8c:	e766      	b.n	8000a5c <__udivmoddi4+0x1a0>
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e6fd      	b.n	800098e <__udivmoddi4+0xd2>
 8000b92:	443b      	add	r3, r7
 8000b94:	3a02      	subs	r2, #2
 8000b96:	e733      	b.n	8000a00 <__udivmoddi4+0x144>
 8000b98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b9c:	443b      	add	r3, r7
 8000b9e:	e71c      	b.n	80009da <__udivmoddi4+0x11e>
 8000ba0:	4649      	mov	r1, r9
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x222>
 8000ba4:	eba1 0109 	sub.w	r1, r1, r9
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bae:	fb09 f804 	mul.w	r8, r9, r4
 8000bb2:	e7c4      	b.n	8000b3e <__udivmoddi4+0x282>

08000bb4 <__aeabi_idiv0>:
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <IR_Sensor_Object_Detect>:
//{
//	HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
//}

void IR_Sensor_Object_Detect(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08e      	sub	sp, #56	@ 0x38
 8000bbc:	af00      	add	r7, sp, #0
	char msg_buffer[50];
	 /* Print status to UART for debug */
		        if (TxData[2] == 1){
 8000bbe:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <IR_Sensor_Object_Detect+0x54>)
 8000bc0:	789b      	ldrb	r3, [r3, #2]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d106      	bne.n	8000bd4 <IR_Sensor_Object_Detect+0x1c>
		          snprintf(msg_buffer, sizeof(msg_buffer), "IR: Obstacle detected\r\n");
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4a11      	ldr	r2, [pc, #68]	@ (8000c10 <IR_Sensor_Object_Detect+0x58>)
 8000bca:	2132      	movs	r1, #50	@ 0x32
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f004 f8bd 	bl	8004d4c <sniprintf>
 8000bd2:	e005      	b.n	8000be0 <IR_Sensor_Object_Detect+0x28>
		        }
		        else{
		          snprintf(msg_buffer, sizeof(msg_buffer), "IR: No obstacle\r\n");
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c14 <IR_Sensor_Object_Detect+0x5c>)
 8000bd8:	2132      	movs	r1, #50	@ 0x32
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f004 f8b6 	bl	8004d4c <sniprintf>
		        }
//		        send_uart_message(msg_buffer);
		        HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), HAL_MAX_DELAY);
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff faf4 	bl	80001d0 <strlen>
 8000be8:	4603      	mov	r3, r0
 8000bea:	b29a      	uxth	r2, r3
 8000bec:	1d39      	adds	r1, r7, #4
 8000bee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bf2:	4809      	ldr	r0, [pc, #36]	@ (8000c18 <IR_Sensor_Object_Detect+0x60>)
 8000bf4:	f003 fce8 	bl	80045c8 <HAL_UART_Transmit>
		        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bfe:	4807      	ldr	r0, [pc, #28]	@ (8000c1c <IR_Sensor_Object_Detect+0x64>)
 8000c00:	f002 f83b 	bl	8002c7a <HAL_GPIO_WritePin>

}
 8000c04:	bf00      	nop
 8000c06:	3738      	adds	r7, #56	@ 0x38
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000190 	.word	0x20000190
 8000c10:	080056cc 	.word	0x080056cc
 8000c14:	080056e4 	.word	0x080056e4
 8000c18:	20000130 	.word	0x20000130
 8000c1c:	40020c00 	.word	0x40020c00

08000c20 <Ultrasonic_distance>:

void Ultrasonic_distance(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	//Send Trigger Signal to ultrasonic trigger pin
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c2a:	480f      	ldr	r0, [pc, #60]	@ (8000c68 <Ultrasonic_distance+0x48>)
 8000c2c:	f002 f825 	bl	8002c7a <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8000c30:	2002      	movs	r0, #2
 8000c32:	f000 fdc1 	bl	80017b8 <HAL_Delay>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, GPIO_PIN_SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c3c:	480a      	ldr	r0, [pc, #40]	@ (8000c68 <Ultrasonic_distance+0x48>)
 8000c3e:	f002 f81c 	bl	8002c7a <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000c42:	200a      	movs	r0, #10
 8000c44:	f000 fdb8 	bl	80017b8 <HAL_Delay>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000c4e:	4806      	ldr	r0, [pc, #24]	@ (8000c68 <Ultrasonic_distance+0x48>)
 8000c50:	f002 f813 	bl	8002c7a <HAL_GPIO_WritePin>
	//Enable Timer counter
	__HAL_TIM_ENABLE_IT(ULTRASONIC_ECHO_PIN_IC, TIM_IT_CC1);
 8000c54:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <Ultrasonic_distance+0x4c>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	68da      	ldr	r2, [r3, #12]
 8000c5a:	4b04      	ldr	r3, [pc, #16]	@ (8000c6c <Ultrasonic_distance+0x4c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f042 0202 	orr.w	r2, r2, #2
 8000c62:	60da      	str	r2, [r3, #12]
}
 8000c64:	bf00      	nop
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40020c00 	.word	0x40020c00
 8000c6c:	200000e8 	.word	0x200000e8

08000c70 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	//Capture Rising Edge
	if(isRisingCaptured == 0)
 8000c78:	4b41      	ldr	r3, [pc, #260]	@ (8000d80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d11a      	bne.n	8000cb6 <HAL_TIM_IC_CaptureCallback+0x46>
	{
		InputCaptureValue_1 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8000c80:	2100      	movs	r1, #0
 8000c82:	4840      	ldr	r0, [pc, #256]	@ (8000d84 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000c84:	f003 f8d2 	bl	8003e2c <HAL_TIM_ReadCapturedValue>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4a3f      	ldr	r2, [pc, #252]	@ (8000d88 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000c8c:	6013      	str	r3, [r2, #0]
		isRisingCaptured = 1;
 8000c8e:	4b3c      	ldr	r3, [pc, #240]	@ (8000d80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000c94:	4b3b      	ldr	r3, [pc, #236]	@ (8000d84 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	6a1a      	ldr	r2, [r3, #32]
 8000c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d84 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f022 020a 	bic.w	r2, r2, #10
 8000ca2:	621a      	str	r2, [r3, #32]
 8000ca4:	4b37      	ldr	r3, [pc, #220]	@ (8000d84 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	6a1a      	ldr	r2, [r3, #32]
 8000caa:	4b36      	ldr	r3, [pc, #216]	@ (8000d84 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f042 0202 	orr.w	r2, r2, #2
 8000cb2:	621a      	str	r2, [r3, #32]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);

	}

}
 8000cb4:	e05c      	b.n	8000d70 <HAL_TIM_IC_CaptureCallback+0x100>
	else if(isRisingCaptured == 1)
 8000cb6:	4b32      	ldr	r3, [pc, #200]	@ (8000d80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d158      	bne.n	8000d70 <HAL_TIM_IC_CaptureCallback+0x100>
		InputCaptureValue_2 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4830      	ldr	r0, [pc, #192]	@ (8000d84 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000cc2:	f003 f8b3 	bl	8003e2c <HAL_TIM_ReadCapturedValue>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	4a30      	ldr	r2, [pc, #192]	@ (8000d8c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000cca:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8000d84 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	625a      	str	r2, [r3, #36]	@ 0x24
		if(InputCaptureValue_2 > InputCaptureValue_1)
 8000cd4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d8c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d88 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d907      	bls.n	8000cf0 <HAL_TIM_IC_CaptureCallback+0x80>
			InputCaptureDifference = InputCaptureValue_2 - InputCaptureValue_1;
 8000ce0:	4b2a      	ldr	r3, [pc, #168]	@ (8000d8c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b28      	ldr	r3, [pc, #160]	@ (8000d88 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	4a29      	ldr	r2, [pc, #164]	@ (8000d90 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	e00f      	b.n	8000d10 <HAL_TIM_IC_CaptureCallback+0xa0>
		else if(InputCaptureValue_1 > InputCaptureValue_2)
 8000cf0:	4b25      	ldr	r3, [pc, #148]	@ (8000d88 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b25      	ldr	r3, [pc, #148]	@ (8000d8c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d909      	bls.n	8000d10 <HAL_TIM_IC_CaptureCallback+0xa0>
			InputCaptureDifference = (0xFFFF - InputCaptureValue_1) + InputCaptureValue_2;
 8000cfc:	4b23      	ldr	r3, [pc, #140]	@ (8000d8c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b21      	ldr	r3, [pc, #132]	@ (8000d88 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000d0a:	33ff      	adds	r3, #255	@ 0xff
 8000d0c:	4a20      	ldr	r2, [pc, #128]	@ (8000d90 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000d0e:	6013      	str	r3, [r2, #0]
		distance = InputCaptureDifference * 0.0173;
 8000d10:	4b1f      	ldr	r3, [pc, #124]	@ (8000d90 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff fd1f 	bl	8000758 <__aeabi_ui2d>
 8000d1a:	a317      	add	r3, pc, #92	@ (adr r3, 8000d78 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d20:	f7ff faae 	bl	8000280 <__aeabi_dmul>
 8000d24:	4602      	mov	r2, r0
 8000d26:	460b      	mov	r3, r1
 8000d28:	4610      	mov	r0, r2
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	f7ff fd8e 	bl	800084c <__aeabi_d2uiz>
 8000d30:	4603      	mov	r3, r0
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000d36:	801a      	strh	r2, [r3, #0]
		isReadingFinished = 1;
 8000d38:	4b17      	ldr	r3, [pc, #92]	@ (8000d98 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	701a      	strb	r2, [r3, #0]
		isRisingCaptured = 0;
 8000d3e:	4b10      	ldr	r3, [pc, #64]	@ (8000d80 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000d44:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6a1a      	ldr	r2, [r3, #32]
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f022 020a 	bic.w	r2, r2, #10
 8000d52:	621a      	str	r2, [r3, #32]
 8000d54:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6a12      	ldr	r2, [r2, #32]
 8000d5e:	621a      	str	r2, [r3, #32]
		__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8000d60:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	68da      	ldr	r2, [r3, #12]
 8000d66:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f022 0202 	bic.w	r2, r2, #2
 8000d6e:	60da      	str	r2, [r3, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	58e21965 	.word	0x58e21965
 8000d7c:	3f91b717 	.word	0x3f91b717
 8000d80:	2000019f 	.word	0x2000019f
 8000d84:	200000e8 	.word	0x200000e8
 8000d88:	200001a0 	.word	0x200001a0
 8000d8c:	200001a4 	.word	0x200001a4
 8000d90:	200001a8 	.word	0x200001a8
 8000d94:	2000019c 	.word	0x2000019c
 8000d98:	2000019e 	.word	0x2000019e

08000d9c <Read_Ultrasonic>:
//	// Digital input: 1 if dry, 0 if rain detected
//	return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6); // Example pin
//}

void Read_Ultrasonic(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0

	Ultrasonic_distance();  // Triggers ultrasonic and handles capture via ISR
 8000da0:	f7ff ff3e 	bl	8000c20 <Ultrasonic_distance>
	while (!isReadingFinished); // This blocks the loop until echo is received. Wait for measurement to complete
 8000da4:	bf00      	nop
 8000da6:	4b04      	ldr	r3, [pc, #16]	@ (8000db8 <Read_Ultrasonic+0x1c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0fb      	beq.n	8000da6 <Read_Ultrasonic+0xa>
//
//	} else {
//	    isReadingFinished = 0;
//	}

	isReadingFinished =0;
 8000dae:	4b02      	ldr	r3, [pc, #8]	@ (8000db8 <Read_Ultrasonic+0x1c>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	2000019e 	.word	0x2000019e

08000dbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc2:	f000 fc8b 	bl	80016dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc6:	f000 f861 	bl	8000e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dca:	f000 fa0b 	bl	80011e4 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000dce:	f000 f919 	bl	8001004 <MX_CAN1_Init>
  MX_TIM4_Init();
 8000dd2:	f000 f96d 	bl	80010b0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000dd6:	f000 f9db 	bl	8001190 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000dda:	f000 f8c1 	bl	8000f60 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000dde:	4824      	ldr	r0, [pc, #144]	@ (8000e70 <main+0xb4>)
 8000de0:	f001 f94c 	bl	800207c <HAL_CAN_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000de4:	2100      	movs	r1, #0
 8000de6:	4823      	ldr	r0, [pc, #140]	@ (8000e74 <main+0xb8>)
 8000de8:	f002 fca4 	bl	8003734 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	TxHeader.DLC = 3;
 8000dec:	4b22      	ldr	r3, [pc, #136]	@ (8000e78 <main+0xbc>)
 8000dee:	2203      	movs	r2, #3
 8000df0:	611a      	str	r2, [r3, #16]
	TxHeader.RTR = CAN_RTR_DATA;
 8000df2:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <main+0xbc>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 8000df8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e78 <main+0xbc>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = 0x0A9;
 8000dfe:	4b1e      	ldr	r3, [pc, #120]	@ (8000e78 <main+0xbc>)
 8000e00:	22a9      	movs	r2, #169	@ 0xa9
 8000e02:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0x0000;
 8000e04:	4b1c      	ldr	r3, [pc, #112]	@ (8000e78 <main+0xbc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	605a      	str	r2, [r3, #4]
	TxHeader.TransmitGlobalTime = DISABLE;
 8000e0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e78 <main+0xbc>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	751a      	strb	r2, [r3, #20]

    /* USER CODE BEGIN 3 */

//	 uint8_t rain = Read_RainSensor();
//	 uint16_t temp = Read_Temperature();
	 GPIO_PinState ir_state = HAL_GPIO_ReadPin(IR_SENSOR_GPIO_PORT, IR_SENSOR_PIN);
 8000e10:	2101      	movs	r1, #1
 8000e12:	481a      	ldr	r0, [pc, #104]	@ (8000e7c <main+0xc0>)
 8000e14:	f001 ff1a 	bl	8002c4c <HAL_GPIO_ReadPin>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	71fb      	strb	r3, [r7, #7]
	 Read_Ultrasonic();
 8000e1c:	f7ff ffbe 	bl	8000d9c <Read_Ultrasonic>
	// Ultrasonic_distance();
	 TxData[0] = (uint8_t)(distance >> 8);
 8000e20:	4b17      	ldr	r3, [pc, #92]	@ (8000e80 <main+0xc4>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	b2da      	uxtb	r2, r3
 8000e2a:	4b16      	ldr	r3, [pc, #88]	@ (8000e84 <main+0xc8>)
 8000e2c:	701a      	strb	r2, [r3, #0]
	 TxData[1] = (uint8_t)(distance & 0xFF);
 8000e2e:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <main+0xc4>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <main+0xc8>)
 8000e36:	705a      	strb	r2, [r3, #1]

	 /* Read IR sensor */
//	 GPIO_PinState ir_state = HAL_GPIO_ReadPin(IR_SENSOR_GPIO_PORT, IR_SENSOR_PIN);
	 /* Data: send 0 for no obstacle (pin HIGH), 1 for obstacle (pin LOW) */
	 TxData[2] = (ir_state == GPIO_PIN_RESET) ? 1 : 0;
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	bf0c      	ite	eq
 8000e3e:	2301      	moveq	r3, #1
 8000e40:	2300      	movne	r3, #0
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b0f      	ldr	r3, [pc, #60]	@ (8000e84 <main+0xc8>)
 8000e48:	709a      	strb	r2, [r3, #2]
	 IR_Sensor_Object_Detect();
 8000e4a:	f7ff feb5 	bl	8000bb8 <IR_Sensor_Object_Detect>

//  	 TxData[2] = rain;
//  	 TxData[3] = (uint8_t)(temp >> 8);
//  	 TxData[4] = (uint8_t)(temp & 0xFF);

 	if(HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox) != HAL_OK){
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <main+0xcc>)
 8000e50:	4a0c      	ldr	r2, [pc, #48]	@ (8000e84 <main+0xc8>)
 8000e52:	4909      	ldr	r1, [pc, #36]	@ (8000e78 <main+0xbc>)
 8000e54:	4806      	ldr	r0, [pc, #24]	@ (8000e70 <main+0xb4>)
 8000e56:	f001 f955 	bl	8002104 <HAL_CAN_AddTxMessage>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0d7      	beq.n	8000e10 <main+0x54>
				Error_Handler();
 8000e60:	f000 fa3c 	bl	80012dc <Error_Handler>
				HAL_Delay(1000);
 8000e64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e68:	f000 fca6 	bl	80017b8 <HAL_Delay>
  {
 8000e6c:	e7d0      	b.n	8000e10 <main+0x54>
 8000e6e:	bf00      	nop
 8000e70:	200000c0 	.word	0x200000c0
 8000e74:	200000e8 	.word	0x200000e8
 8000e78:	20000178 	.word	0x20000178
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	2000019c 	.word	0x2000019c
 8000e84:	20000190 	.word	0x20000190
 8000e88:	20000198 	.word	0x20000198

08000e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b094      	sub	sp, #80	@ 0x50
 8000e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e92:	f107 0320 	add.w	r3, r7, #32
 8000e96:	2230      	movs	r2, #48	@ 0x30
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f003 ff8c 	bl	8004db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	4b28      	ldr	r3, [pc, #160]	@ (8000f58 <SystemClock_Config+0xcc>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb8:	4a27      	ldr	r2, [pc, #156]	@ (8000f58 <SystemClock_Config+0xcc>)
 8000eba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ebe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec0:	4b25      	ldr	r3, [pc, #148]	@ (8000f58 <SystemClock_Config+0xcc>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	4b22      	ldr	r3, [pc, #136]	@ (8000f5c <SystemClock_Config+0xd0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a21      	ldr	r2, [pc, #132]	@ (8000f5c <SystemClock_Config+0xd0>)
 8000ed6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f5c <SystemClock_Config+0xd0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ef6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000efc:	2304      	movs	r3, #4
 8000efe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f00:	2348      	movs	r3, #72	@ 0x48
 8000f02:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f08:	2307      	movs	r3, #7
 8000f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0c:	f107 0320 	add.w	r3, r7, #32
 8000f10:	4618      	mov	r0, r3
 8000f12:	f001 fecb 	bl	8002cac <HAL_RCC_OscConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f1c:	f000 f9de 	bl	80012dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f20:	230f      	movs	r3, #15
 8000f22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f24:	2302      	movs	r3, #2
 8000f26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 f92c 	bl	800319c <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f4a:	f000 f9c7 	bl	80012dc <Error_Handler>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3750      	adds	r7, #80	@ 0x50
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40007000 	.word	0x40007000

08000f60 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f66:	463b      	mov	r3, r7
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000f72:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <MX_ADC2_Init+0x98>)
 8000f74:	4a21      	ldr	r2, [pc, #132]	@ (8000ffc <MX_ADC2_Init+0x9c>)
 8000f76:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f78:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <MX_ADC2_Init+0x98>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <MX_ADC2_Init+0x98>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000f84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <MX_ADC2_Init+0x98>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <MX_ADC2_Init+0x98>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f90:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <MX_ADC2_Init+0x98>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f98:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <MX_ADC2_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <MX_ADC2_Init+0x98>)
 8000fa0:	4a17      	ldr	r2, [pc, #92]	@ (8001000 <MX_ADC2_Init+0xa0>)
 8000fa2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa4:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <MX_ADC2_Init+0x98>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000faa:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <MX_ADC2_Init+0x98>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <MX_ADC2_Init+0x98>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <MX_ADC2_Init+0x98>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fbe:	480e      	ldr	r0, [pc, #56]	@ (8000ff8 <MX_ADC2_Init+0x98>)
 8000fc0:	f000 fc1e 	bl	8001800 <HAL_ADC_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000fca:	f000 f987 	bl	80012dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fce:	230a      	movs	r3, #10
 8000fd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fda:	463b      	mov	r3, r7
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	@ (8000ff8 <MX_ADC2_Init+0x98>)
 8000fe0:	f000 fc52 	bl	8001888 <HAL_ADC_ConfigChannel>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000fea:	f000 f977 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000078 	.word	0x20000078
 8000ffc:	40012100 	.word	0x40012100
 8001000:	0f000001 	.word	0x0f000001

08001004 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	@ 0x28
 8001008:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800100a:	4b27      	ldr	r3, [pc, #156]	@ (80010a8 <MX_CAN1_Init+0xa4>)
 800100c:	4a27      	ldr	r2, [pc, #156]	@ (80010ac <MX_CAN1_Init+0xa8>)
 800100e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8001010:	4b25      	ldr	r3, [pc, #148]	@ (80010a8 <MX_CAN1_Init+0xa4>)
 8001012:	2212      	movs	r2, #18
 8001014:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001016:	4b24      	ldr	r3, [pc, #144]	@ (80010a8 <MX_CAN1_Init+0xa4>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800101c:	4b22      	ldr	r3, [pc, #136]	@ (80010a8 <MX_CAN1_Init+0xa4>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001022:	4b21      	ldr	r3, [pc, #132]	@ (80010a8 <MX_CAN1_Init+0xa4>)
 8001024:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001028:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800102a:	4b1f      	ldr	r3, [pc, #124]	@ (80010a8 <MX_CAN1_Init+0xa4>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001030:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <MX_CAN1_Init+0xa4>)
 8001032:	2200      	movs	r2, #0
 8001034:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001036:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <MX_CAN1_Init+0xa4>)
 8001038:	2200      	movs	r2, #0
 800103a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800103c:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <MX_CAN1_Init+0xa4>)
 800103e:	2200      	movs	r2, #0
 8001040:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001042:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <MX_CAN1_Init+0xa4>)
 8001044:	2200      	movs	r2, #0
 8001046:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001048:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <MX_CAN1_Init+0xa4>)
 800104a:	2200      	movs	r2, #0
 800104c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800104e:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <MX_CAN1_Init+0xa4>)
 8001050:	2200      	movs	r2, #0
 8001052:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001054:	4814      	ldr	r0, [pc, #80]	@ (80010a8 <MX_CAN1_Init+0xa4>)
 8001056:	f000 fe35 	bl	8001cc4 <HAL_CAN_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001060:	f000 f93c 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef FilterConfig;
  //FilterConfig.SlaveStartFilterBank = 9;
  FilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8001064:	2301      	movs	r3, #1
 8001066:	623b      	str	r3, [r7, #32]
  FilterConfig.FilterBank = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
  FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800106c:	2301      	movs	r3, #1
 800106e:	61fb      	str	r3, [r7, #28]
  FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
  FilterConfig.FilterMaskIdHigh = 0xFF00;
 8001074:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8001078:	60bb      	str	r3, [r7, #8]
  FilterConfig.FilterMaskIdLow = 0x0000;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  FilterConfig.FilterIdHigh = 0x1500;
 800107e:	f44f 53a8 	mov.w	r3, #5376	@ 0x1500
 8001082:	603b      	str	r3, [r7, #0]
  FilterConfig.FilterIdLow = 0x0000;
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
  FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]

  if(HAL_CAN_ConfigFilter(&hcan1, &FilterConfig) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <MX_CAN1_Init+0xa4>)
 8001092:	f000 ff13 	bl	8001ebc <HAL_CAN_ConfigFilter>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_CAN1_Init+0x9c>
	   Error_Handler();
 800109c:	f000 f91e 	bl	80012dc <Error_Handler>
  /* USER CODE END CAN1_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3728      	adds	r7, #40	@ 0x28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200000c0 	.word	0x200000c0
 80010ac:	40006400 	.word	0x40006400

080010b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	@ 0x28
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010ce:	463b      	mov	r3, r7
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010da:	4b2b      	ldr	r3, [pc, #172]	@ (8001188 <MX_TIM4_Init+0xd8>)
 80010dc:	4a2b      	ldr	r2, [pc, #172]	@ (800118c <MX_TIM4_Init+0xdc>)
 80010de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80010e0:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <MX_TIM4_Init+0xd8>)
 80010e2:	2253      	movs	r2, #83	@ 0x53
 80010e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e6:	4b28      	ldr	r3, [pc, #160]	@ (8001188 <MX_TIM4_Init+0xd8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80010ec:	4b26      	ldr	r3, [pc, #152]	@ (8001188 <MX_TIM4_Init+0xd8>)
 80010ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f4:	4b24      	ldr	r3, [pc, #144]	@ (8001188 <MX_TIM4_Init+0xd8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fa:	4b23      	ldr	r3, [pc, #140]	@ (8001188 <MX_TIM4_Init+0xd8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001100:	4821      	ldr	r0, [pc, #132]	@ (8001188 <MX_TIM4_Init+0xd8>)
 8001102:	f002 fa6f 	bl	80035e4 <HAL_TIM_Base_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 800110c:	f000 f8e6 	bl	80012dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001110:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001114:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001116:	f107 0318 	add.w	r3, r7, #24
 800111a:	4619      	mov	r1, r3
 800111c:	481a      	ldr	r0, [pc, #104]	@ (8001188 <MX_TIM4_Init+0xd8>)
 800111e:	f002 fdbd 	bl	8003c9c <HAL_TIM_ConfigClockSource>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001128:	f000 f8d8 	bl	80012dc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800112c:	4816      	ldr	r0, [pc, #88]	@ (8001188 <MX_TIM4_Init+0xd8>)
 800112e:	f002 faa8 	bl	8003682 <HAL_TIM_IC_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001138:	f000 f8d0 	bl	80012dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4619      	mov	r1, r3
 800114a:	480f      	ldr	r0, [pc, #60]	@ (8001188 <MX_TIM4_Init+0xd8>)
 800114c:	f003 f960 	bl	8004410 <HAL_TIMEx_MasterConfigSynchronization>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001156:	f000 f8c1 	bl	80012dc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800115e:	2301      	movs	r3, #1
 8001160:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	2200      	movs	r2, #0
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	@ (8001188 <MX_TIM4_Init+0xd8>)
 8001172:	f002 fcf7 	bl	8003b64 <HAL_TIM_IC_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 800117c:	f000 f8ae 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	3728      	adds	r7, #40	@ 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200000e8 	.word	0x200000e8
 800118c:	40000800 	.word	0x40000800

08001190 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 8001196:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <MX_USART2_UART_Init+0x50>)
 8001198:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 800119c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80011a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_USART2_UART_Init+0x4c>)
 80011c8:	f003 f9ae 	bl	8004528 <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011d2:	f000 f883 	bl	80012dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000130 	.word	0x20000130
 80011e0:	40004400 	.word	0x40004400

080011e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08a      	sub	sp, #40	@ 0x28
 80011e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ea:	f107 0314 	add.w	r3, r7, #20
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
 80011f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	613b      	str	r3, [r7, #16]
 80011fe:	4b34      	ldr	r3, [pc, #208]	@ (80012d0 <MX_GPIO_Init+0xec>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	4a33      	ldr	r2, [pc, #204]	@ (80012d0 <MX_GPIO_Init+0xec>)
 8001204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001208:	6313      	str	r3, [r2, #48]	@ 0x30
 800120a:	4b31      	ldr	r3, [pc, #196]	@ (80012d0 <MX_GPIO_Init+0xec>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b2d      	ldr	r3, [pc, #180]	@ (80012d0 <MX_GPIO_Init+0xec>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a2c      	ldr	r2, [pc, #176]	@ (80012d0 <MX_GPIO_Init+0xec>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b2a      	ldr	r3, [pc, #168]	@ (80012d0 <MX_GPIO_Init+0xec>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f003 0304 	and.w	r3, r3, #4
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	4b26      	ldr	r3, [pc, #152]	@ (80012d0 <MX_GPIO_Init+0xec>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a25      	ldr	r2, [pc, #148]	@ (80012d0 <MX_GPIO_Init+0xec>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b23      	ldr	r3, [pc, #140]	@ (80012d0 <MX_GPIO_Init+0xec>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <MX_GPIO_Init+0xec>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a1e      	ldr	r2, [pc, #120]	@ (80012d0 <MX_GPIO_Init+0xec>)
 8001258:	f043 0308 	orr.w	r3, r3, #8
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <MX_GPIO_Init+0xec>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	4b18      	ldr	r3, [pc, #96]	@ (80012d0 <MX_GPIO_Init+0xec>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a17      	ldr	r2, [pc, #92]	@ (80012d0 <MX_GPIO_Init+0xec>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b15      	ldr	r3, [pc, #84]	@ (80012d0 <MX_GPIO_Init+0xec>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001286:	2200      	movs	r2, #0
 8001288:	f44f 41d0 	mov.w	r1, #26624	@ 0x6800
 800128c:	4811      	ldr	r0, [pc, #68]	@ (80012d4 <MX_GPIO_Init+0xf0>)
 800128e:	f001 fcf4 	bl	8002c7a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6;
 8001292:	2341      	movs	r3, #65	@ 0x41
 8001294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001296:	2300      	movs	r3, #0
 8001298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	f107 0314 	add.w	r3, r7, #20
 80012a2:	4619      	mov	r1, r3
 80012a4:	480c      	ldr	r0, [pc, #48]	@ (80012d8 <MX_GPIO_Init+0xf4>)
 80012a6:	f001 fb37 	bl	8002918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 80012aa:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80012ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b0:	2301      	movs	r3, #1
 80012b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	4804      	ldr	r0, [pc, #16]	@ (80012d4 <MX_GPIO_Init+0xf0>)
 80012c4:	f001 fb28 	bl	8002918 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80012c8:	bf00      	nop
 80012ca:	3728      	adds	r7, #40	@ 0x28
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020c00 	.word	0x40020c00
 80012d8:	40020000 	.word	0x40020000

080012dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e0:	b672      	cpsid	i
}
 80012e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <Error_Handler+0x8>

080012e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b10      	ldr	r3, [pc, #64]	@ (8001334 <HAL_MspInit+0x4c>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001334 <HAL_MspInit+0x4c>)
 80012f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001334 <HAL_MspInit+0x4c>)
 8001300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001302:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <HAL_MspInit+0x4c>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	4a08      	ldr	r2, [pc, #32]	@ (8001334 <HAL_MspInit+0x4c>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001318:	6413      	str	r3, [r2, #64]	@ 0x40
 800131a:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <HAL_MspInit+0x4c>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001326:	2007      	movs	r0, #7
 8001328:	f001 fab4 	bl	8002894 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40023800 	.word	0x40023800

08001338 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	@ 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a17      	ldr	r2, [pc, #92]	@ (80013b4 <HAL_ADC_MspInit+0x7c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d127      	bne.n	80013aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b16      	ldr	r3, [pc, #88]	@ (80013b8 <HAL_ADC_MspInit+0x80>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001362:	4a15      	ldr	r2, [pc, #84]	@ (80013b8 <HAL_ADC_MspInit+0x80>)
 8001364:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001368:	6453      	str	r3, [r2, #68]	@ 0x44
 800136a:	4b13      	ldr	r3, [pc, #76]	@ (80013b8 <HAL_ADC_MspInit+0x80>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b0f      	ldr	r3, [pc, #60]	@ (80013b8 <HAL_ADC_MspInit+0x80>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a0e      	ldr	r2, [pc, #56]	@ (80013b8 <HAL_ADC_MspInit+0x80>)
 8001380:	f043 0304 	orr.w	r3, r3, #4
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <HAL_ADC_MspInit+0x80>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0304 	and.w	r3, r3, #4
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001392:	2301      	movs	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001396:	2303      	movs	r3, #3
 8001398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139e:	f107 0314 	add.w	r3, r7, #20
 80013a2:	4619      	mov	r1, r3
 80013a4:	4805      	ldr	r0, [pc, #20]	@ (80013bc <HAL_ADC_MspInit+0x84>)
 80013a6:	f001 fab7 	bl	8002918 <HAL_GPIO_Init>

  /* USER CODE END ADC2_MspInit 1 */

  }

}
 80013aa:	bf00      	nop
 80013ac:	3728      	adds	r7, #40	@ 0x28
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40012100 	.word	0x40012100
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020800 	.word	0x40020800

080013c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	@ 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001454 <HAL_CAN_MspInit+0x94>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d134      	bne.n	800144c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <HAL_CAN_MspInit+0x98>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	4a1b      	ldr	r2, [pc, #108]	@ (8001458 <HAL_CAN_MspInit+0x98>)
 80013ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f2:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <HAL_CAN_MspInit+0x98>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <HAL_CAN_MspInit+0x98>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a14      	ldr	r2, [pc, #80]	@ (8001458 <HAL_CAN_MspInit+0x98>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <HAL_CAN_MspInit+0x98>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800141a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800141e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001428:	2303      	movs	r3, #3
 800142a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800142c:	2309      	movs	r3, #9
 800142e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	4809      	ldr	r0, [pc, #36]	@ (800145c <HAL_CAN_MspInit+0x9c>)
 8001438:	f001 fa6e 	bl	8002918 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	2014      	movs	r0, #20
 8001442:	f001 fa32 	bl	80028aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001446:	2014      	movs	r0, #20
 8001448:	f001 fa4b 	bl	80028e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800144c:	bf00      	nop
 800144e:	3728      	adds	r7, #40	@ 0x28
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40006400 	.word	0x40006400
 8001458:	40023800 	.word	0x40023800
 800145c:	40020400 	.word	0x40020400

08001460 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	@ 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM4)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a1d      	ldr	r2, [pc, #116]	@ (80014f4 <HAL_TIM_Base_MspInit+0x94>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d134      	bne.n	80014ec <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <HAL_TIM_Base_MspInit+0x98>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	4a1b      	ldr	r2, [pc, #108]	@ (80014f8 <HAL_TIM_Base_MspInit+0x98>)
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	6413      	str	r3, [r2, #64]	@ 0x40
 8001492:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <HAL_TIM_Base_MspInit+0x98>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <HAL_TIM_Base_MspInit+0x98>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	4a14      	ldr	r2, [pc, #80]	@ (80014f8 <HAL_TIM_Base_MspInit+0x98>)
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ae:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <HAL_TIM_Base_MspInit+0x98>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014cc:	2302      	movs	r3, #2
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	4619      	mov	r1, r3
 80014d6:	4809      	ldr	r0, [pc, #36]	@ (80014fc <HAL_TIM_Base_MspInit+0x9c>)
 80014d8:	f001 fa1e 	bl	8002918 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2100      	movs	r1, #0
 80014e0:	201e      	movs	r0, #30
 80014e2:	f001 f9e2 	bl	80028aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014e6:	201e      	movs	r0, #30
 80014e8:	f001 f9fb 	bl	80028e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80014ec:	bf00      	nop
 80014ee:	3728      	adds	r7, #40	@ 0x28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40000800 	.word	0x40000800
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020c00 	.word	0x40020c00

08001500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	@ 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a19      	ldr	r2, [pc, #100]	@ (8001584 <HAL_UART_MspInit+0x84>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d12b      	bne.n	800157a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <HAL_UART_MspInit+0x88>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	4a17      	ldr	r2, [pc, #92]	@ (8001588 <HAL_UART_MspInit+0x88>)
 800152c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001530:	6413      	str	r3, [r2, #64]	@ 0x40
 8001532:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <HAL_UART_MspInit+0x88>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <HAL_UART_MspInit+0x88>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4a10      	ldr	r2, [pc, #64]	@ (8001588 <HAL_UART_MspInit+0x88>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6313      	str	r3, [r2, #48]	@ 0x30
 800154e:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <HAL_UART_MspInit+0x88>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800155a:	230c      	movs	r3, #12
 800155c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800156a:	2307      	movs	r3, #7
 800156c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	@ (800158c <HAL_UART_MspInit+0x8c>)
 8001576:	f001 f9cf 	bl	8002918 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	@ 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40004400 	.word	0x40004400
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000

08001590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <NMI_Handler+0x4>

08001598 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <HardFault_Handler+0x4>

080015a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <MemManage_Handler+0x4>

080015a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <BusFault_Handler+0x4>

080015b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <UsageFault_Handler+0x4>

080015b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	bc80      	pop	{r7}
 80015c2:	4770      	bx	lr

080015c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e0:	f000 f8ce 	bl	8001780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80015ec:	4802      	ldr	r0, [pc, #8]	@ (80015f8 <CAN1_RX0_IRQHandler+0x10>)
 80015ee:	f000 fe58 	bl	80022a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200000c0 	.word	0x200000c0

080015fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001600:	4802      	ldr	r0, [pc, #8]	@ (800160c <TIM4_IRQHandler+0x10>)
 8001602:	f002 f9bf 	bl	8003984 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	200000e8 	.word	0x200000e8

08001610 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001618:	4a14      	ldr	r2, [pc, #80]	@ (800166c <_sbrk+0x5c>)
 800161a:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <_sbrk+0x60>)
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001624:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <_sbrk+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d102      	bne.n	8001632 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800162c:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <_sbrk+0x64>)
 800162e:	4a12      	ldr	r2, [pc, #72]	@ (8001678 <_sbrk+0x68>)
 8001630:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <_sbrk+0x64>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4413      	add	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	429a      	cmp	r2, r3
 800163e:	d207      	bcs.n	8001650 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001640:	f003 fbc2 	bl	8004dc8 <__errno>
 8001644:	4603      	mov	r3, r0
 8001646:	220c      	movs	r2, #12
 8001648:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800164a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800164e:	e009      	b.n	8001664 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001650:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001656:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <_sbrk+0x64>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4413      	add	r3, r2
 800165e:	4a05      	ldr	r2, [pc, #20]	@ (8001674 <_sbrk+0x64>)
 8001660:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001662:	68fb      	ldr	r3, [r7, #12]
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20020000 	.word	0x20020000
 8001670:	00000400 	.word	0x00000400
 8001674:	200001ac 	.word	0x200001ac
 8001678:	20000300 	.word	0x20000300

0800167c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001688:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800168c:	f7ff fff6 	bl	800167c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001690:	480c      	ldr	r0, [pc, #48]	@ (80016c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001692:	490d      	ldr	r1, [pc, #52]	@ (80016c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001694:	4a0d      	ldr	r2, [pc, #52]	@ (80016cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a8:	4c0a      	ldr	r4, [pc, #40]	@ (80016d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016b6:	f003 fb8d 	bl	8004dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ba:	f7ff fb7f 	bl	8000dbc <main>
  bx  lr    
 80016be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80016cc:	08005754 	.word	0x08005754
  ldr r2, =_sbss
 80016d0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80016d4:	200002fc 	.word	0x200002fc

080016d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC_IRQHandler>
	...

080016dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e0:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <HAL_Init+0x40>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0d      	ldr	r2, [pc, #52]	@ (800171c <HAL_Init+0x40>)
 80016e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016ec:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <HAL_Init+0x40>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0a      	ldr	r2, [pc, #40]	@ (800171c <HAL_Init+0x40>)
 80016f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f8:	4b08      	ldr	r3, [pc, #32]	@ (800171c <HAL_Init+0x40>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a07      	ldr	r2, [pc, #28]	@ (800171c <HAL_Init+0x40>)
 80016fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001704:	2003      	movs	r0, #3
 8001706:	f001 f8c5 	bl	8002894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170a:	2000      	movs	r0, #0
 800170c:	f000 f808 	bl	8001720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001710:	f7ff fdea 	bl	80012e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023c00 	.word	0x40023c00

08001720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <HAL_InitTick+0x54>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b12      	ldr	r3, [pc, #72]	@ (8001778 <HAL_InitTick+0x58>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001736:	fbb3 f3f1 	udiv	r3, r3, r1
 800173a:	fbb2 f3f3 	udiv	r3, r2, r3
 800173e:	4618      	mov	r0, r3
 8001740:	f001 f8dd 	bl	80028fe <HAL_SYSTICK_Config>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e00e      	b.n	800176c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b0f      	cmp	r3, #15
 8001752:	d80a      	bhi.n	800176a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001754:	2200      	movs	r2, #0
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800175c:	f001 f8a5 	bl	80028aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001760:	4a06      	ldr	r2, [pc, #24]	@ (800177c <HAL_InitTick+0x5c>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	e000      	b.n	800176c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000000 	.word	0x20000000
 8001778:	20000008 	.word	0x20000008
 800177c:	20000004 	.word	0x20000004

08001780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001784:	4b05      	ldr	r3, [pc, #20]	@ (800179c <HAL_IncTick+0x1c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b05      	ldr	r3, [pc, #20]	@ (80017a0 <HAL_IncTick+0x20>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4413      	add	r3, r2
 8001790:	4a03      	ldr	r2, [pc, #12]	@ (80017a0 <HAL_IncTick+0x20>)
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	20000008 	.word	0x20000008
 80017a0:	200001b0 	.word	0x200001b0

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b02      	ldr	r3, [pc, #8]	@ (80017b4 <HAL_GetTick+0x10>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	200001b0 	.word	0x200001b0

080017b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c0:	f7ff fff0 	bl	80017a4 <HAL_GetTick>
 80017c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017d0:	d005      	beq.n	80017de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d2:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <HAL_Delay+0x44>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4413      	add	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017de:	bf00      	nop
 80017e0:	f7ff ffe0 	bl	80017a4 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d8f7      	bhi.n	80017e0 <HAL_Delay+0x28>
  {
  }
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000008 	.word	0x20000008

08001800 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001808:	2300      	movs	r3, #0
 800180a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e033      	b.n	800187e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	2b00      	cmp	r3, #0
 800181c:	d109      	bne.n	8001832 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7ff fd8a 	bl	8001338 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	2b00      	cmp	r3, #0
 800183c:	d118      	bne.n	8001870 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001846:	f023 0302 	bic.w	r3, r3, #2
 800184a:	f043 0202 	orr.w	r2, r3, #2
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f93a 	bl	8001acc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	f023 0303 	bic.w	r3, r3, #3
 8001866:	f043 0201 	orr.w	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	641a      	str	r2, [r3, #64]	@ 0x40
 800186e:	e001      	b.n	8001874 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2200      	movs	r2, #0
 8001878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800187c:	7bfb      	ldrb	r3, [r7, #15]
}
 800187e:	4618      	mov	r0, r3
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001892:	2300      	movs	r3, #0
 8001894:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_ADC_ConfigChannel+0x1c>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e105      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x228>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2201      	movs	r2, #1
 80018a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b09      	cmp	r3, #9
 80018b2:	d925      	bls.n	8001900 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	68d9      	ldr	r1, [r3, #12]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	461a      	mov	r2, r3
 80018c2:	4613      	mov	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	3b1e      	subs	r3, #30
 80018ca:	2207      	movs	r2, #7
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43da      	mvns	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	400a      	ands	r2, r1
 80018d8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68d9      	ldr	r1, [r3, #12]
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	4603      	mov	r3, r0
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	4403      	add	r3, r0
 80018f2:	3b1e      	subs	r3, #30
 80018f4:	409a      	lsls	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	e022      	b.n	8001946 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6919      	ldr	r1, [r3, #16]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	b29b      	uxth	r3, r3
 800190c:	461a      	mov	r2, r3
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	2207      	movs	r2, #7
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	400a      	ands	r2, r1
 8001922:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6919      	ldr	r1, [r3, #16]
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	b29b      	uxth	r3, r3
 8001934:	4618      	mov	r0, r3
 8001936:	4603      	mov	r3, r0
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4403      	add	r3, r0
 800193c:	409a      	lsls	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b06      	cmp	r3, #6
 800194c:	d824      	bhi.n	8001998 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	3b05      	subs	r3, #5
 8001960:	221f      	movs	r2, #31
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	400a      	ands	r2, r1
 800196e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	b29b      	uxth	r3, r3
 800197c:	4618      	mov	r0, r3
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	3b05      	subs	r3, #5
 800198a:	fa00 f203 	lsl.w	r2, r0, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	635a      	str	r2, [r3, #52]	@ 0x34
 8001996:	e04c      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b0c      	cmp	r3, #12
 800199e:	d824      	bhi.n	80019ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	4613      	mov	r3, r2
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	3b23      	subs	r3, #35	@ 0x23
 80019b2:	221f      	movs	r2, #31
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43da      	mvns	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	400a      	ands	r2, r1
 80019c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	3b23      	subs	r3, #35	@ 0x23
 80019dc:	fa00 f203 	lsl.w	r2, r0, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80019e8:	e023      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	4413      	add	r3, r2
 80019fa:	3b41      	subs	r3, #65	@ 0x41
 80019fc:	221f      	movs	r2, #31
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43da      	mvns	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	400a      	ands	r2, r1
 8001a0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	4618      	mov	r0, r3
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	3b41      	subs	r3, #65	@ 0x41
 8001a26:	fa00 f203 	lsl.w	r2, r0, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a32:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <HAL_ADC_ConfigChannel+0x234>)
 8001a34:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a21      	ldr	r2, [pc, #132]	@ (8001ac0 <HAL_ADC_ConfigChannel+0x238>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d109      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x1cc>
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b12      	cmp	r3, #18
 8001a46:	d105      	bne.n	8001a54 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a19      	ldr	r2, [pc, #100]	@ (8001ac0 <HAL_ADC_ConfigChannel+0x238>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d123      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x21e>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b10      	cmp	r3, #16
 8001a64:	d003      	beq.n	8001a6e <HAL_ADC_ConfigChannel+0x1e6>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b11      	cmp	r3, #17
 8001a6c:	d11b      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2b10      	cmp	r3, #16
 8001a80:	d111      	bne.n	8001aa6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <HAL_ADC_ConfigChannel+0x23c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a10      	ldr	r2, [pc, #64]	@ (8001ac8 <HAL_ADC_ConfigChannel+0x240>)
 8001a88:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8c:	0c9a      	lsrs	r2, r3, #18
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a98:	e002      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d1f9      	bne.n	8001a9a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3714      	adds	r7, #20
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bc80      	pop	{r7}
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	40012300 	.word	0x40012300
 8001ac0:	40012000 	.word	0x40012000
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	431bde83 	.word	0x431bde83

08001acc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ad4:	4b79      	ldr	r3, [pc, #484]	@ (8001cbc <ADC_Init+0x1f0>)
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	431a      	orrs	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6859      	ldr	r1, [r3, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	430a      	orrs	r2, r1
 8001b14:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6859      	ldr	r1, [r3, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	430a      	orrs	r2, r1
 8001b36:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6899      	ldr	r1, [r3, #8]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5e:	4a58      	ldr	r2, [pc, #352]	@ (8001cc0 <ADC_Init+0x1f4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d022      	beq.n	8001baa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b72:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6899      	ldr	r1, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6899      	ldr	r1, [r3, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	e00f      	b.n	8001bca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001bb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bc8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0202 	bic.w	r2, r2, #2
 8001bd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6899      	ldr	r1, [r3, #8]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7e1b      	ldrb	r3, [r3, #24]
 8001be4:	005a      	lsls	r2, r3, #1
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	430a      	orrs	r2, r1
 8001bec:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d01b      	beq.n	8001c30 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c06:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c16:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6859      	ldr	r1, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c22:	3b01      	subs	r3, #1
 8001c24:	035a      	lsls	r2, r3, #13
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	e007      	b.n	8001c40 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	685a      	ldr	r2, [r3, #4]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c3e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	051a      	lsls	r2, r3, #20
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	6899      	ldr	r1, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c82:	025a      	lsls	r2, r3, #9
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6899      	ldr	r1, [r3, #8]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	029a      	lsls	r2, r3, #10
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	609a      	str	r2, [r3, #8]
}
 8001cb0:	bf00      	nop
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	40012300 	.word	0x40012300
 8001cc0:	0f000001 	.word	0x0f000001

08001cc4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e0ed      	b.n	8001eb2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d102      	bne.n	8001ce8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff fb6c 	bl	80013c0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 0201 	orr.w	r2, r2, #1
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cf8:	f7ff fd54 	bl	80017a4 <HAL_GetTick>
 8001cfc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cfe:	e012      	b.n	8001d26 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d00:	f7ff fd50 	bl	80017a4 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b0a      	cmp	r3, #10
 8001d0c:	d90b      	bls.n	8001d26 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d12:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2205      	movs	r2, #5
 8001d1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e0c5      	b.n	8001eb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0e5      	beq.n	8001d00 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0202 	bic.w	r2, r2, #2
 8001d42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d44:	f7ff fd2e 	bl	80017a4 <HAL_GetTick>
 8001d48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d4a:	e012      	b.n	8001d72 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d4c:	f7ff fd2a 	bl	80017a4 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b0a      	cmp	r3, #10
 8001d58:	d90b      	bls.n	8001d72 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2205      	movs	r2, #5
 8001d6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e09f      	b.n	8001eb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1e5      	bne.n	8001d4c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	7e1b      	ldrb	r3, [r3, #24]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d108      	bne.n	8001d9a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	e007      	b.n	8001daa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001da8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	7e5b      	ldrb	r3, [r3, #25]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d108      	bne.n	8001dc4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	e007      	b.n	8001dd4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	7e9b      	ldrb	r3, [r3, #26]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d108      	bne.n	8001dee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f042 0220 	orr.w	r2, r2, #32
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e007      	b.n	8001dfe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f022 0220 	bic.w	r2, r2, #32
 8001dfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	7edb      	ldrb	r3, [r3, #27]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d108      	bne.n	8001e18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0210 	bic.w	r2, r2, #16
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e007      	b.n	8001e28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0210 	orr.w	r2, r2, #16
 8001e26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	7f1b      	ldrb	r3, [r3, #28]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d108      	bne.n	8001e42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0208 	orr.w	r2, r2, #8
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	e007      	b.n	8001e52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f022 0208 	bic.w	r2, r2, #8
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	7f5b      	ldrb	r3, [r3, #29]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d108      	bne.n	8001e6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0204 	orr.w	r2, r2, #4
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e007      	b.n	8001e7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0204 	bic.w	r2, r2, #4
 8001e7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	431a      	orrs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	ea42 0103 	orr.w	r1, r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	1e5a      	subs	r2, r3, #1
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ed4:	7cfb      	ldrb	r3, [r7, #19]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d003      	beq.n	8001ee2 <HAL_CAN_ConfigFilter+0x26>
 8001eda:	7cfb      	ldrb	r3, [r7, #19]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	f040 80be 	bne.w	800205e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001ee2:	4b65      	ldr	r3, [pc, #404]	@ (8002078 <HAL_CAN_ConfigFilter+0x1bc>)
 8001ee4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001eec:	f043 0201 	orr.w	r2, r3, #1
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001efc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	431a      	orrs	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	f003 031f 	and.w	r3, r3, #31
 8001f22:	2201      	movs	r2, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	401a      	ands	r2, r3
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d123      	bne.n	8001f8c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	401a      	ands	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f66:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	3248      	adds	r2, #72	@ 0x48
 8001f6c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f80:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f82:	6979      	ldr	r1, [r7, #20]
 8001f84:	3348      	adds	r3, #72	@ 0x48
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	440b      	add	r3, r1
 8001f8a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d122      	bne.n	8001fda <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001fb4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	3248      	adds	r2, #72	@ 0x48
 8001fba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001fce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001fd0:	6979      	ldr	r1, [r7, #20]
 8001fd2:	3348      	adds	r3, #72	@ 0x48
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	440b      	add	r3, r1
 8001fd8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d109      	bne.n	8001ff6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	43db      	mvns	r3, r3
 8001fec:	401a      	ands	r2, r3
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001ff4:	e007      	b.n	8002006 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	431a      	orrs	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d109      	bne.n	8002022 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	43db      	mvns	r3, r3
 8002018:	401a      	ands	r2, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002020:	e007      	b.n	8002032 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	431a      	orrs	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d107      	bne.n	800204a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	431a      	orrs	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002050:	f023 0201 	bic.w	r2, r3, #1
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e006      	b.n	800206c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002062:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
  }
}
 800206c:	4618      	mov	r0, r3
 800206e:	371c      	adds	r7, #28
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40006400 	.word	0x40006400

0800207c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f893 3020 	ldrb.w	r3, [r3, #32]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b01      	cmp	r3, #1
 800208e:	d12e      	bne.n	80020ee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2202      	movs	r2, #2
 8002094:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80020a8:	f7ff fb7c 	bl	80017a4 <HAL_GetTick>
 80020ac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020ae:	e012      	b.n	80020d6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020b0:	f7ff fb78 	bl	80017a4 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b0a      	cmp	r3, #10
 80020bc:	d90b      	bls.n	80020d6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2205      	movs	r2, #5
 80020ce:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e012      	b.n	80020fc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1e5      	bne.n	80020b0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	e006      	b.n	80020fc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
  }
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	@ 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
 8002110:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002118:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002122:	7ffb      	ldrb	r3, [r7, #31]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d003      	beq.n	8002130 <HAL_CAN_AddTxMessage+0x2c>
 8002128:	7ffb      	ldrb	r3, [r7, #31]
 800212a:	2b02      	cmp	r3, #2
 800212c:	f040 80ad 	bne.w	800228a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10a      	bne.n	8002150 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002140:	2b00      	cmp	r3, #0
 8002142:	d105      	bne.n	8002150 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800214a:	2b00      	cmp	r3, #0
 800214c:	f000 8095 	beq.w	800227a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	0e1b      	lsrs	r3, r3, #24
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800215a:	2201      	movs	r2, #1
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10d      	bne.n	8002188 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002176:	68f9      	ldr	r1, [r7, #12]
 8002178:	6809      	ldr	r1, [r1, #0]
 800217a:	431a      	orrs	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	3318      	adds	r3, #24
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	440b      	add	r3, r1
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	e00f      	b.n	80021a8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002192:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002198:	68f9      	ldr	r1, [r7, #12]
 800219a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800219c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	3318      	adds	r3, #24
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	440b      	add	r3, r1
 80021a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6819      	ldr	r1, [r3, #0]
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	691a      	ldr	r2, [r3, #16]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	3318      	adds	r3, #24
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	440b      	add	r3, r1
 80021b8:	3304      	adds	r3, #4
 80021ba:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	7d1b      	ldrb	r3, [r3, #20]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d111      	bne.n	80021e8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	3318      	adds	r3, #24
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	4413      	add	r3, r2
 80021d0:	3304      	adds	r3, #4
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	6811      	ldr	r1, [r2, #0]
 80021d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	3318      	adds	r3, #24
 80021e0:	011b      	lsls	r3, r3, #4
 80021e2:	440b      	add	r3, r1
 80021e4:	3304      	adds	r3, #4
 80021e6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3307      	adds	r3, #7
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	061a      	lsls	r2, r3, #24
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3306      	adds	r3, #6
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	041b      	lsls	r3, r3, #16
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3305      	adds	r3, #5
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	4313      	orrs	r3, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	3204      	adds	r2, #4
 8002208:	7812      	ldrb	r2, [r2, #0]
 800220a:	4610      	mov	r0, r2
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	6811      	ldr	r1, [r2, #0]
 8002210:	ea43 0200 	orr.w	r2, r3, r0
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	440b      	add	r3, r1
 800221a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800221e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3303      	adds	r3, #3
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	061a      	lsls	r2, r3, #24
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3302      	adds	r3, #2
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	041b      	lsls	r3, r3, #16
 8002230:	431a      	orrs	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3301      	adds	r3, #1
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	4313      	orrs	r3, r2
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	7812      	ldrb	r2, [r2, #0]
 8002240:	4610      	mov	r0, r2
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	6811      	ldr	r1, [r2, #0]
 8002246:	ea43 0200 	orr.w	r2, r3, r0
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	440b      	add	r3, r1
 8002250:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002254:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	3318      	adds	r3, #24
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	4413      	add	r3, r2
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	6811      	ldr	r1, [r2, #0]
 8002268:	f043 0201 	orr.w	r2, r3, #1
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	3318      	adds	r3, #24
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	440b      	add	r3, r1
 8002274:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002276:	2300      	movs	r3, #0
 8002278:	e00e      	b.n	8002298 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e006      	b.n	8002298 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
  }
}
 8002298:	4618      	mov	r0, r3
 800229a:	3724      	adds	r7, #36	@ 0x24
 800229c:	46bd      	mov	sp, r7
 800229e:	bc80      	pop	{r7}
 80022a0:	4770      	bx	lr

080022a2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b08a      	sub	sp, #40	@ 0x28
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d07c      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d023      	beq.n	800233a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2201      	movs	r2, #1
 80022f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f983 	bl	8002610 <HAL_CAN_TxMailbox0CompleteCallback>
 800230a:	e016      	b.n	800233a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b00      	cmp	r3, #0
 8002314:	d004      	beq.n	8002320 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002318:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
 800231e:	e00c      	b.n	800233a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d004      	beq.n	8002334 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
 8002332:	e002      	b.n	800233a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f986 	bl	8002646 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d024      	beq.n	800238e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800234c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f962 	bl	8002622 <HAL_CAN_TxMailbox1CompleteCallback>
 800235e:	e016      	b.n	800238e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002366:	2b00      	cmp	r3, #0
 8002368:	d004      	beq.n	8002374 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800236a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002370:	627b      	str	r3, [r7, #36]	@ 0x24
 8002372:	e00c      	b.n	800238e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800237a:	2b00      	cmp	r3, #0
 800237c:	d004      	beq.n	8002388 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800237e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002380:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002384:	627b      	str	r3, [r7, #36]	@ 0x24
 8002386:	e002      	b.n	800238e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f965 	bl	8002658 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d024      	beq.n	80023e2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80023a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f941 	bl	8002634 <HAL_CAN_TxMailbox2CompleteCallback>
 80023b2:	e016      	b.n	80023e2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d004      	beq.n	80023c8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80023be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023c6:	e00c      	b.n	80023e2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d004      	beq.n	80023dc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023da:	e002      	b.n	80023e2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f944 	bl	800266a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00c      	beq.n	8002406 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2210      	movs	r2, #16
 8002404:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00b      	beq.n	8002428 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f003 0308 	and.w	r3, r3, #8
 8002416:	2b00      	cmp	r3, #0
 8002418:	d006      	beq.n	8002428 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2208      	movs	r2, #8
 8002420:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f933 	bl	800268e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002428:	6a3b      	ldr	r3, [r7, #32]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d009      	beq.n	8002446 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d002      	beq.n	8002446 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f000 f91b 	bl	800267c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002446:	6a3b      	ldr	r3, [r7, #32]
 8002448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800244c:	2b00      	cmp	r3, #0
 800244e:	d00c      	beq.n	800246a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b00      	cmp	r3, #0
 8002458:	d007      	beq.n	800246a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002460:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2210      	movs	r2, #16
 8002468:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00b      	beq.n	800248c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d006      	beq.n	800248c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2208      	movs	r2, #8
 8002484:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f913 	bl	80026b2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f8fb 	bl	80026a0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80024aa:	6a3b      	ldr	r3, [r7, #32]
 80024ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00b      	beq.n	80024cc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d006      	beq.n	80024cc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2210      	movs	r2, #16
 80024c4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f8fc 	bl	80026c4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00b      	beq.n	80024ee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d006      	beq.n	80024ee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2208      	movs	r2, #8
 80024e6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f000 f8f4 	bl	80026d6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d07b      	beq.n	80025f0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d072      	beq.n	80025e8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d008      	beq.n	800251e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002512:	2b00      	cmp	r3, #0
 8002514:	d003      	beq.n	800251e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800253a:	6a3b      	ldr	r3, [r7, #32]
 800253c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	f043 0304 	orr.w	r3, r3, #4
 8002554:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800255c:	2b00      	cmp	r3, #0
 800255e:	d043      	beq.n	80025e8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002566:	2b00      	cmp	r3, #0
 8002568:	d03e      	beq.n	80025e8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002570:	2b60      	cmp	r3, #96	@ 0x60
 8002572:	d02b      	beq.n	80025cc <HAL_CAN_IRQHandler+0x32a>
 8002574:	2b60      	cmp	r3, #96	@ 0x60
 8002576:	d82e      	bhi.n	80025d6 <HAL_CAN_IRQHandler+0x334>
 8002578:	2b50      	cmp	r3, #80	@ 0x50
 800257a:	d022      	beq.n	80025c2 <HAL_CAN_IRQHandler+0x320>
 800257c:	2b50      	cmp	r3, #80	@ 0x50
 800257e:	d82a      	bhi.n	80025d6 <HAL_CAN_IRQHandler+0x334>
 8002580:	2b40      	cmp	r3, #64	@ 0x40
 8002582:	d019      	beq.n	80025b8 <HAL_CAN_IRQHandler+0x316>
 8002584:	2b40      	cmp	r3, #64	@ 0x40
 8002586:	d826      	bhi.n	80025d6 <HAL_CAN_IRQHandler+0x334>
 8002588:	2b30      	cmp	r3, #48	@ 0x30
 800258a:	d010      	beq.n	80025ae <HAL_CAN_IRQHandler+0x30c>
 800258c:	2b30      	cmp	r3, #48	@ 0x30
 800258e:	d822      	bhi.n	80025d6 <HAL_CAN_IRQHandler+0x334>
 8002590:	2b10      	cmp	r3, #16
 8002592:	d002      	beq.n	800259a <HAL_CAN_IRQHandler+0x2f8>
 8002594:	2b20      	cmp	r3, #32
 8002596:	d005      	beq.n	80025a4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002598:	e01d      	b.n	80025d6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	f043 0308 	orr.w	r3, r3, #8
 80025a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025a2:	e019      	b.n	80025d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	f043 0310 	orr.w	r3, r3, #16
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025ac:	e014      	b.n	80025d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80025ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b0:	f043 0320 	orr.w	r3, r3, #32
 80025b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025b6:	e00f      	b.n	80025d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025c0:	e00a      	b.n	80025d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025ca:	e005      	b.n	80025d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80025cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80025d4:	e000      	b.n	80025d8 <HAL_CAN_IRQHandler+0x336>
            break;
 80025d6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699a      	ldr	r2, [r3, #24]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80025e6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2204      	movs	r2, #4
 80025ee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d008      	beq.n	8002608 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f870 	bl	80026e8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002608:	bf00      	nop
 800260a:	3728      	adds	r7, #40	@ 0x28
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr

0800268e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr

080026a0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr

080026b2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80026b2:	b480      	push	{r7}
 80026b4:	b083      	sub	sp, #12
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bc80      	pop	{r7}
 80026d4:	4770      	bx	lr

080026d6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b083      	sub	sp, #12
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bc80      	pop	{r7}
 80026e6:	4770      	bx	lr

080026e8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
	...

080026fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f003 0307 	and.w	r3, r3, #7
 800270a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800270c:	4b0c      	ldr	r3, [pc, #48]	@ (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002718:	4013      	ands	r3, r2
 800271a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002724:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800272c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800272e:	4a04      	ldr	r2, [pc, #16]	@ (8002740 <__NVIC_SetPriorityGrouping+0x44>)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	60d3      	str	r3, [r2, #12]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	e000ed00 	.word	0xe000ed00

08002744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002748:	4b04      	ldr	r3, [pc, #16]	@ (800275c <__NVIC_GetPriorityGrouping+0x18>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	0a1b      	lsrs	r3, r3, #8
 800274e:	f003 0307 	and.w	r3, r3, #7
}
 8002752:	4618      	mov	r0, r3
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800276a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276e:	2b00      	cmp	r3, #0
 8002770:	db0b      	blt.n	800278a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	f003 021f 	and.w	r2, r3, #31
 8002778:	4906      	ldr	r1, [pc, #24]	@ (8002794 <__NVIC_EnableIRQ+0x34>)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	095b      	lsrs	r3, r3, #5
 8002780:	2001      	movs	r0, #1
 8002782:	fa00 f202 	lsl.w	r2, r0, r2
 8002786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr
 8002794:	e000e100 	.word	0xe000e100

08002798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	6039      	str	r1, [r7, #0]
 80027a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	db0a      	blt.n	80027c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	490c      	ldr	r1, [pc, #48]	@ (80027e4 <__NVIC_SetPriority+0x4c>)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	0112      	lsls	r2, r2, #4
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	440b      	add	r3, r1
 80027bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027c0:	e00a      	b.n	80027d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	4908      	ldr	r1, [pc, #32]	@ (80027e8 <__NVIC_SetPriority+0x50>)
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	3b04      	subs	r3, #4
 80027d0:	0112      	lsls	r2, r2, #4
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	440b      	add	r3, r1
 80027d6:	761a      	strb	r2, [r3, #24]
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	e000e100 	.word	0xe000e100
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b089      	sub	sp, #36	@ 0x24
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	f1c3 0307 	rsb	r3, r3, #7
 8002806:	2b04      	cmp	r3, #4
 8002808:	bf28      	it	cs
 800280a:	2304      	movcs	r3, #4
 800280c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3304      	adds	r3, #4
 8002812:	2b06      	cmp	r3, #6
 8002814:	d902      	bls.n	800281c <NVIC_EncodePriority+0x30>
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	3b03      	subs	r3, #3
 800281a:	e000      	b.n	800281e <NVIC_EncodePriority+0x32>
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002820:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	fa02 f303 	lsl.w	r3, r2, r3
 800282a:	43da      	mvns	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	401a      	ands	r2, r3
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002834:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	fa01 f303 	lsl.w	r3, r1, r3
 800283e:	43d9      	mvns	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002844:	4313      	orrs	r3, r2
         );
}
 8002846:	4618      	mov	r0, r3
 8002848:	3724      	adds	r7, #36	@ 0x24
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	3b01      	subs	r3, #1
 800285c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002860:	d301      	bcc.n	8002866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002862:	2301      	movs	r3, #1
 8002864:	e00f      	b.n	8002886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002866:	4a0a      	ldr	r2, [pc, #40]	@ (8002890 <SysTick_Config+0x40>)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3b01      	subs	r3, #1
 800286c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800286e:	210f      	movs	r1, #15
 8002870:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002874:	f7ff ff90 	bl	8002798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002878:	4b05      	ldr	r3, [pc, #20]	@ (8002890 <SysTick_Config+0x40>)
 800287a:	2200      	movs	r2, #0
 800287c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800287e:	4b04      	ldr	r3, [pc, #16]	@ (8002890 <SysTick_Config+0x40>)
 8002880:	2207      	movs	r2, #7
 8002882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	e000e010 	.word	0xe000e010

08002894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ff2d 	bl	80026fc <__NVIC_SetPriorityGrouping>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b086      	sub	sp, #24
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	4603      	mov	r3, r0
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028bc:	f7ff ff42 	bl	8002744 <__NVIC_GetPriorityGrouping>
 80028c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	68b9      	ldr	r1, [r7, #8]
 80028c6:	6978      	ldr	r0, [r7, #20]
 80028c8:	f7ff ff90 	bl	80027ec <NVIC_EncodePriority>
 80028cc:	4602      	mov	r2, r0
 80028ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028d2:	4611      	mov	r1, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff5f 	bl	8002798 <__NVIC_SetPriority>
}
 80028da:	bf00      	nop
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b082      	sub	sp, #8
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff35 	bl	8002760 <__NVIC_EnableIRQ>
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ffa2 	bl	8002850 <SysTick_Config>
 800290c:	4603      	mov	r3, r0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
	...

08002918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	@ 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
 8002932:	e16b      	b.n	8002c0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002934:	2201      	movs	r2, #1
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	4013      	ands	r3, r2
 8002946:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	429a      	cmp	r2, r3
 800294e:	f040 815a 	bne.w	8002c06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d005      	beq.n	800296a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002966:	2b02      	cmp	r3, #2
 8002968:	d130      	bne.n	80029cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	2203      	movs	r2, #3
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4013      	ands	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029a0:	2201      	movs	r2, #1
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4013      	ands	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f003 0201 	and.w	r2, r3, #1
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	2b03      	cmp	r3, #3
 80029d6:	d017      	beq.n	8002a08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	2203      	movs	r2, #3
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d123      	bne.n	8002a5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	08da      	lsrs	r2, r3, #3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3208      	adds	r2, #8
 8002a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	220f      	movs	r2, #15
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	691a      	ldr	r2, [r3, #16]
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	08da      	lsrs	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3208      	adds	r2, #8
 8002a56:	69b9      	ldr	r1, [r7, #24]
 8002a58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	2203      	movs	r2, #3
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0203 	and.w	r2, r3, #3
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80b4 	beq.w	8002c06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	4b5f      	ldr	r3, [pc, #380]	@ (8002c20 <HAL_GPIO_Init+0x308>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	4a5e      	ldr	r2, [pc, #376]	@ (8002c20 <HAL_GPIO_Init+0x308>)
 8002aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aae:	4b5c      	ldr	r3, [pc, #368]	@ (8002c20 <HAL_GPIO_Init+0x308>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aba:	4a5a      	ldr	r2, [pc, #360]	@ (8002c24 <HAL_GPIO_Init+0x30c>)
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	089b      	lsrs	r3, r3, #2
 8002ac0:	3302      	adds	r3, #2
 8002ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	220f      	movs	r2, #15
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a51      	ldr	r2, [pc, #324]	@ (8002c28 <HAL_GPIO_Init+0x310>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d02b      	beq.n	8002b3e <HAL_GPIO_Init+0x226>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a50      	ldr	r2, [pc, #320]	@ (8002c2c <HAL_GPIO_Init+0x314>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d025      	beq.n	8002b3a <HAL_GPIO_Init+0x222>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a4f      	ldr	r2, [pc, #316]	@ (8002c30 <HAL_GPIO_Init+0x318>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d01f      	beq.n	8002b36 <HAL_GPIO_Init+0x21e>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a4e      	ldr	r2, [pc, #312]	@ (8002c34 <HAL_GPIO_Init+0x31c>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d019      	beq.n	8002b32 <HAL_GPIO_Init+0x21a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a4d      	ldr	r2, [pc, #308]	@ (8002c38 <HAL_GPIO_Init+0x320>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <HAL_GPIO_Init+0x216>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a4c      	ldr	r2, [pc, #304]	@ (8002c3c <HAL_GPIO_Init+0x324>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00d      	beq.n	8002b2a <HAL_GPIO_Init+0x212>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a4b      	ldr	r2, [pc, #300]	@ (8002c40 <HAL_GPIO_Init+0x328>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d007      	beq.n	8002b26 <HAL_GPIO_Init+0x20e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a4a      	ldr	r2, [pc, #296]	@ (8002c44 <HAL_GPIO_Init+0x32c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d101      	bne.n	8002b22 <HAL_GPIO_Init+0x20a>
 8002b1e:	2307      	movs	r3, #7
 8002b20:	e00e      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b22:	2308      	movs	r3, #8
 8002b24:	e00c      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b26:	2306      	movs	r3, #6
 8002b28:	e00a      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b2a:	2305      	movs	r3, #5
 8002b2c:	e008      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b2e:	2304      	movs	r3, #4
 8002b30:	e006      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b32:	2303      	movs	r3, #3
 8002b34:	e004      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e002      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_GPIO_Init+0x228>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	69fa      	ldr	r2, [r7, #28]
 8002b42:	f002 0203 	and.w	r2, r2, #3
 8002b46:	0092      	lsls	r2, r2, #2
 8002b48:	4093      	lsls	r3, r2
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b50:	4934      	ldr	r1, [pc, #208]	@ (8002c24 <HAL_GPIO_Init+0x30c>)
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	089b      	lsrs	r3, r3, #2
 8002b56:	3302      	adds	r3, #2
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b5e:	4b3a      	ldr	r3, [pc, #232]	@ (8002c48 <HAL_GPIO_Init+0x330>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	43db      	mvns	r3, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b82:	4a31      	ldr	r2, [pc, #196]	@ (8002c48 <HAL_GPIO_Init+0x330>)
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b88:	4b2f      	ldr	r3, [pc, #188]	@ (8002c48 <HAL_GPIO_Init+0x330>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4013      	ands	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002bac:	4a26      	ldr	r2, [pc, #152]	@ (8002c48 <HAL_GPIO_Init+0x330>)
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bb2:	4b25      	ldr	r3, [pc, #148]	@ (8002c48 <HAL_GPIO_Init+0x330>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bd6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c48 <HAL_GPIO_Init+0x330>)
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c48 <HAL_GPIO_Init+0x330>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	43db      	mvns	r3, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	4013      	ands	r3, r2
 8002bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c00:	4a11      	ldr	r2, [pc, #68]	@ (8002c48 <HAL_GPIO_Init+0x330>)
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	61fb      	str	r3, [r7, #28]
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	2b0f      	cmp	r3, #15
 8002c10:	f67f ae90 	bls.w	8002934 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c14:	bf00      	nop
 8002c16:	bf00      	nop
 8002c18:	3724      	adds	r7, #36	@ 0x24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	40023800 	.word	0x40023800
 8002c24:	40013800 	.word	0x40013800
 8002c28:	40020000 	.word	0x40020000
 8002c2c:	40020400 	.word	0x40020400
 8002c30:	40020800 	.word	0x40020800
 8002c34:	40020c00 	.word	0x40020c00
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40021400 	.word	0x40021400
 8002c40:	40021800 	.word	0x40021800
 8002c44:	40021c00 	.word	0x40021c00
 8002c48:	40013c00 	.word	0x40013c00

08002c4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	887b      	ldrh	r3, [r7, #2]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d002      	beq.n	8002c6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
 8002c68:	e001      	b.n	8002c6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr

08002c7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	460b      	mov	r3, r1
 8002c84:	807b      	strh	r3, [r7, #2]
 8002c86:	4613      	mov	r3, r2
 8002c88:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c8a:	787b      	ldrb	r3, [r7, #1]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c90:	887a      	ldrh	r2, [r7, #2]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c96:	e003      	b.n	8002ca0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c98:	887b      	ldrh	r3, [r7, #2]
 8002c9a:	041a      	lsls	r2, r3, #16
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	619a      	str	r2, [r3, #24]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
	...

08002cac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e267      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d075      	beq.n	8002db6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cca:	4b88      	ldr	r3, [pc, #544]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d00c      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd6:	4b85      	ldr	r3, [pc, #532]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d112      	bne.n	8002d08 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ce2:	4b82      	ldr	r3, [pc, #520]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cee:	d10b      	bne.n	8002d08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf0:	4b7e      	ldr	r3, [pc, #504]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d05b      	beq.n	8002db4 <HAL_RCC_OscConfig+0x108>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d157      	bne.n	8002db4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e242      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d10:	d106      	bne.n	8002d20 <HAL_RCC_OscConfig+0x74>
 8002d12:	4b76      	ldr	r3, [pc, #472]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a75      	ldr	r2, [pc, #468]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	e01d      	b.n	8002d5c <HAL_RCC_OscConfig+0xb0>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x98>
 8002d2a:	4b70      	ldr	r3, [pc, #448]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a6f      	ldr	r2, [pc, #444]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d34:	6013      	str	r3, [r2, #0]
 8002d36:	4b6d      	ldr	r3, [pc, #436]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a6c      	ldr	r2, [pc, #432]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	e00b      	b.n	8002d5c <HAL_RCC_OscConfig+0xb0>
 8002d44:	4b69      	ldr	r3, [pc, #420]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a68      	ldr	r2, [pc, #416]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	4b66      	ldr	r3, [pc, #408]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a65      	ldr	r2, [pc, #404]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d013      	beq.n	8002d8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d64:	f7fe fd1e 	bl	80017a4 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	e008      	b.n	8002d7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d6c:	f7fe fd1a 	bl	80017a4 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	2b64      	cmp	r3, #100	@ 0x64
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e207      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	4b5b      	ldr	r3, [pc, #364]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0f0      	beq.n	8002d6c <HAL_RCC_OscConfig+0xc0>
 8002d8a:	e014      	b.n	8002db6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fe fd0a 	bl	80017a4 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d94:	f7fe fd06 	bl	80017a4 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b64      	cmp	r3, #100	@ 0x64
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e1f3      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da6:	4b51      	ldr	r3, [pc, #324]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0xe8>
 8002db2:	e000      	b.n	8002db6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d063      	beq.n	8002e8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dc2:	4b4a      	ldr	r3, [pc, #296]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00b      	beq.n	8002de6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dce:	4b47      	ldr	r3, [pc, #284]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d11c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dda:	4b44      	ldr	r3, [pc, #272]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d116      	bne.n	8002e14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002de6:	4b41      	ldr	r3, [pc, #260]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_RCC_OscConfig+0x152>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d001      	beq.n	8002dfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e1c7      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4937      	ldr	r1, [pc, #220]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e12:	e03a      	b.n	8002e8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d020      	beq.n	8002e5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e1c:	4b34      	ldr	r3, [pc, #208]	@ (8002ef0 <HAL_RCC_OscConfig+0x244>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7fe fcbf 	bl	80017a4 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e2a:	f7fe fcbb 	bl	80017a4 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e1a8      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e48:	4b28      	ldr	r3, [pc, #160]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	4925      	ldr	r1, [pc, #148]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	600b      	str	r3, [r1, #0]
 8002e5c:	e015      	b.n	8002e8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5e:	4b24      	ldr	r3, [pc, #144]	@ (8002ef0 <HAL_RCC_OscConfig+0x244>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fe fc9e 	bl	80017a4 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6c:	f7fe fc9a 	bl	80017a4 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e187      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d036      	beq.n	8002f04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d016      	beq.n	8002ecc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9e:	4b15      	ldr	r3, [pc, #84]	@ (8002ef4 <HAL_RCC_OscConfig+0x248>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea4:	f7fe fc7e 	bl	80017a4 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eac:	f7fe fc7a 	bl	80017a4 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e167      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8002eec <HAL_RCC_OscConfig+0x240>)
 8002ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d0f0      	beq.n	8002eac <HAL_RCC_OscConfig+0x200>
 8002eca:	e01b      	b.n	8002f04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ecc:	4b09      	ldr	r3, [pc, #36]	@ (8002ef4 <HAL_RCC_OscConfig+0x248>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed2:	f7fe fc67 	bl	80017a4 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed8:	e00e      	b.n	8002ef8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eda:	f7fe fc63 	bl	80017a4 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d907      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e150      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	42470000 	.word	0x42470000
 8002ef4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ef8:	4b88      	ldr	r3, [pc, #544]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 8002efa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ea      	bne.n	8002eda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f000 8097 	beq.w	8003040 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f12:	2300      	movs	r3, #0
 8002f14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f16:	4b81      	ldr	r3, [pc, #516]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10f      	bne.n	8002f42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	4b7d      	ldr	r3, [pc, #500]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	4a7c      	ldr	r2, [pc, #496]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 8002f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f32:	4b7a      	ldr	r3, [pc, #488]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f42:	4b77      	ldr	r3, [pc, #476]	@ (8003120 <HAL_RCC_OscConfig+0x474>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d118      	bne.n	8002f80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f4e:	4b74      	ldr	r3, [pc, #464]	@ (8003120 <HAL_RCC_OscConfig+0x474>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a73      	ldr	r2, [pc, #460]	@ (8003120 <HAL_RCC_OscConfig+0x474>)
 8002f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5a:	f7fe fc23 	bl	80017a4 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f62:	f7fe fc1f 	bl	80017a4 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e10c      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	4b6a      	ldr	r3, [pc, #424]	@ (8003120 <HAL_RCC_OscConfig+0x474>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d106      	bne.n	8002f96 <HAL_RCC_OscConfig+0x2ea>
 8002f88:	4b64      	ldr	r3, [pc, #400]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8c:	4a63      	ldr	r2, [pc, #396]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f94:	e01c      	b.n	8002fd0 <HAL_RCC_OscConfig+0x324>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b05      	cmp	r3, #5
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x30c>
 8002f9e:	4b5f      	ldr	r3, [pc, #380]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa2:	4a5e      	ldr	r2, [pc, #376]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 8002fa4:	f043 0304 	orr.w	r3, r3, #4
 8002fa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002faa:	4b5c      	ldr	r3, [pc, #368]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fae:	4a5b      	ldr	r2, [pc, #364]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCC_OscConfig+0x324>
 8002fb8:	4b58      	ldr	r3, [pc, #352]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbc:	4a57      	ldr	r2, [pc, #348]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 8002fbe:	f023 0301 	bic.w	r3, r3, #1
 8002fc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fc4:	4b55      	ldr	r3, [pc, #340]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc8:	4a54      	ldr	r2, [pc, #336]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 8002fca:	f023 0304 	bic.w	r3, r3, #4
 8002fce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d015      	beq.n	8003004 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd8:	f7fe fbe4 	bl	80017a4 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fde:	e00a      	b.n	8002ff6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fe0:	f7fe fbe0 	bl	80017a4 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e0cb      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff6:	4b49      	ldr	r3, [pc, #292]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0ee      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x334>
 8003002:	e014      	b.n	800302e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003004:	f7fe fbce 	bl	80017a4 <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300a:	e00a      	b.n	8003022 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300c:	f7fe fbca 	bl	80017a4 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e0b5      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003022:	4b3e      	ldr	r3, [pc, #248]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 8003024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1ee      	bne.n	800300c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800302e:	7dfb      	ldrb	r3, [r7, #23]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d105      	bne.n	8003040 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003034:	4b39      	ldr	r3, [pc, #228]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 8003036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003038:	4a38      	ldr	r2, [pc, #224]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 800303a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800303e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80a1 	beq.w	800318c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800304a:	4b34      	ldr	r3, [pc, #208]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
 8003052:	2b08      	cmp	r3, #8
 8003054:	d05c      	beq.n	8003110 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	2b02      	cmp	r3, #2
 800305c:	d141      	bne.n	80030e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305e:	4b31      	ldr	r3, [pc, #196]	@ (8003124 <HAL_RCC_OscConfig+0x478>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7fe fb9e 	bl	80017a4 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306c:	f7fe fb9a 	bl	80017a4 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e087      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307e:	4b27      	ldr	r3, [pc, #156]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69da      	ldr	r2, [r3, #28]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1b      	ldr	r3, [r3, #32]
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003098:	019b      	lsls	r3, r3, #6
 800309a:	431a      	orrs	r2, r3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	3b01      	subs	r3, #1
 80030a4:	041b      	lsls	r3, r3, #16
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ac:	061b      	lsls	r3, r3, #24
 80030ae:	491b      	ldr	r1, [pc, #108]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003124 <HAL_RCC_OscConfig+0x478>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ba:	f7fe fb73 	bl	80017a4 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030c2:	f7fe fb6f 	bl	80017a4 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e05c      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d4:	4b11      	ldr	r3, [pc, #68]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x416>
 80030e0:	e054      	b.n	800318c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e2:	4b10      	ldr	r3, [pc, #64]	@ (8003124 <HAL_RCC_OscConfig+0x478>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e8:	f7fe fb5c 	bl	80017a4 <HAL_GetTick>
 80030ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ee:	e008      	b.n	8003102 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f0:	f7fe fb58 	bl	80017a4 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e045      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003102:	4b06      	ldr	r3, [pc, #24]	@ (800311c <HAL_RCC_OscConfig+0x470>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1f0      	bne.n	80030f0 <HAL_RCC_OscConfig+0x444>
 800310e:	e03d      	b.n	800318c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	2b01      	cmp	r3, #1
 8003116:	d107      	bne.n	8003128 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e038      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
 800311c:	40023800 	.word	0x40023800
 8003120:	40007000 	.word	0x40007000
 8003124:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003128:	4b1b      	ldr	r3, [pc, #108]	@ (8003198 <HAL_RCC_OscConfig+0x4ec>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d028      	beq.n	8003188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003140:	429a      	cmp	r2, r3
 8003142:	d121      	bne.n	8003188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d11a      	bne.n	8003188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003158:	4013      	ands	r3, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800315e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003160:	4293      	cmp	r3, r2
 8003162:	d111      	bne.n	8003188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316e:	085b      	lsrs	r3, r3, #1
 8003170:	3b01      	subs	r3, #1
 8003172:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d107      	bne.n	8003188 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003182:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40023800 	.word	0x40023800

0800319c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0cc      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031b0:	4b68      	ldr	r3, [pc, #416]	@ (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d90c      	bls.n	80031d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031be:	4b65      	ldr	r3, [pc, #404]	@ (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	b2d2      	uxtb	r2, r2
 80031c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031c6:	4b63      	ldr	r3, [pc, #396]	@ (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d001      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e0b8      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d020      	beq.n	8003226 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031f0:	4b59      	ldr	r3, [pc, #356]	@ (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	4a58      	ldr	r2, [pc, #352]	@ (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0308 	and.w	r3, r3, #8
 8003204:	2b00      	cmp	r3, #0
 8003206:	d005      	beq.n	8003214 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003208:	4b53      	ldr	r3, [pc, #332]	@ (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4a52      	ldr	r2, [pc, #328]	@ (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003212:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003214:	4b50      	ldr	r3, [pc, #320]	@ (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	494d      	ldr	r1, [pc, #308]	@ (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	4313      	orrs	r3, r2
 8003224:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d044      	beq.n	80032bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2b01      	cmp	r3, #1
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323a:	4b47      	ldr	r3, [pc, #284]	@ (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d119      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e07f      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d003      	beq.n	800325a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003256:	2b03      	cmp	r3, #3
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325a:	4b3f      	ldr	r3, [pc, #252]	@ (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e06f      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800326a:	4b3b      	ldr	r3, [pc, #236]	@ (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e067      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800327a:	4b37      	ldr	r3, [pc, #220]	@ (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f023 0203 	bic.w	r2, r3, #3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4934      	ldr	r1, [pc, #208]	@ (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	4313      	orrs	r3, r2
 800328a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800328c:	f7fe fa8a 	bl	80017a4 <HAL_GetTick>
 8003290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003292:	e00a      	b.n	80032aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003294:	f7fe fa86 	bl	80017a4 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e04f      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032aa:	4b2b      	ldr	r3, [pc, #172]	@ (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 020c 	and.w	r2, r3, #12
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d1eb      	bne.n	8003294 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032bc:	4b25      	ldr	r3, [pc, #148]	@ (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d20c      	bcs.n	80032e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ca:	4b22      	ldr	r3, [pc, #136]	@ (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d2:	4b20      	ldr	r3, [pc, #128]	@ (8003354 <HAL_RCC_ClockConfig+0x1b8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e032      	b.n	800334a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d008      	beq.n	8003302 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032f0:	4b19      	ldr	r3, [pc, #100]	@ (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4916      	ldr	r1, [pc, #88]	@ (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b00      	cmp	r3, #0
 800330c:	d009      	beq.n	8003322 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800330e:	4b12      	ldr	r3, [pc, #72]	@ (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	490e      	ldr	r1, [pc, #56]	@ (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800331e:	4313      	orrs	r3, r2
 8003320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003322:	f000 f821 	bl	8003368 <HAL_RCC_GetSysClockFreq>
 8003326:	4602      	mov	r2, r0
 8003328:	4b0b      	ldr	r3, [pc, #44]	@ (8003358 <HAL_RCC_ClockConfig+0x1bc>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	091b      	lsrs	r3, r3, #4
 800332e:	f003 030f 	and.w	r3, r3, #15
 8003332:	490a      	ldr	r1, [pc, #40]	@ (800335c <HAL_RCC_ClockConfig+0x1c0>)
 8003334:	5ccb      	ldrb	r3, [r1, r3]
 8003336:	fa22 f303 	lsr.w	r3, r2, r3
 800333a:	4a09      	ldr	r2, [pc, #36]	@ (8003360 <HAL_RCC_ClockConfig+0x1c4>)
 800333c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800333e:	4b09      	ldr	r3, [pc, #36]	@ (8003364 <HAL_RCC_ClockConfig+0x1c8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fe f9ec 	bl	8001720 <HAL_InitTick>

  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40023c00 	.word	0x40023c00
 8003358:	40023800 	.word	0x40023800
 800335c:	080056f8 	.word	0x080056f8
 8003360:	20000000 	.word	0x20000000
 8003364:	20000004 	.word	0x20000004

08003368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800336c:	b094      	sub	sp, #80	@ 0x50
 800336e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003380:	4b7c      	ldr	r3, [pc, #496]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b08      	cmp	r3, #8
 800338a:	d00d      	beq.n	80033a8 <HAL_RCC_GetSysClockFreq+0x40>
 800338c:	2b08      	cmp	r3, #8
 800338e:	f200 80e7 	bhi.w	8003560 <HAL_RCC_GetSysClockFreq+0x1f8>
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_RCC_GetSysClockFreq+0x34>
 8003396:	2b04      	cmp	r3, #4
 8003398:	d003      	beq.n	80033a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800339a:	e0e1      	b.n	8003560 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800339c:	4b76      	ldr	r3, [pc, #472]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x210>)
 800339e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033a0:	e0e1      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033a2:	4b76      	ldr	r3, [pc, #472]	@ (800357c <HAL_RCC_GetSysClockFreq+0x214>)
 80033a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033a6:	e0de      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033a8:	4b72      	ldr	r3, [pc, #456]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x20c>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033b2:	4b70      	ldr	r3, [pc, #448]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x20c>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d065      	beq.n	800348a <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033be:	4b6d      	ldr	r3, [pc, #436]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x20c>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	099b      	lsrs	r3, r3, #6
 80033c4:	2200      	movs	r2, #0
 80033c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80033ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80033d2:	2300      	movs	r3, #0
 80033d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80033d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80033da:	4622      	mov	r2, r4
 80033dc:	462b      	mov	r3, r5
 80033de:	f04f 0000 	mov.w	r0, #0
 80033e2:	f04f 0100 	mov.w	r1, #0
 80033e6:	0159      	lsls	r1, r3, #5
 80033e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ec:	0150      	lsls	r0, r2, #5
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4621      	mov	r1, r4
 80033f4:	1a51      	subs	r1, r2, r1
 80033f6:	6139      	str	r1, [r7, #16]
 80033f8:	4629      	mov	r1, r5
 80033fa:	eb63 0301 	sbc.w	r3, r3, r1
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800340c:	4659      	mov	r1, fp
 800340e:	018b      	lsls	r3, r1, #6
 8003410:	4651      	mov	r1, sl
 8003412:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003416:	4651      	mov	r1, sl
 8003418:	018a      	lsls	r2, r1, #6
 800341a:	46d4      	mov	ip, sl
 800341c:	ebb2 080c 	subs.w	r8, r2, ip
 8003420:	4659      	mov	r1, fp
 8003422:	eb63 0901 	sbc.w	r9, r3, r1
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003432:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003436:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800343a:	4690      	mov	r8, r2
 800343c:	4699      	mov	r9, r3
 800343e:	4623      	mov	r3, r4
 8003440:	eb18 0303 	adds.w	r3, r8, r3
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	462b      	mov	r3, r5
 8003448:	eb49 0303 	adc.w	r3, r9, r3
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800345a:	4629      	mov	r1, r5
 800345c:	024b      	lsls	r3, r1, #9
 800345e:	4620      	mov	r0, r4
 8003460:	4629      	mov	r1, r5
 8003462:	4604      	mov	r4, r0
 8003464:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003468:	4601      	mov	r1, r0
 800346a:	024a      	lsls	r2, r1, #9
 800346c:	4610      	mov	r0, r2
 800346e:	4619      	mov	r1, r3
 8003470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003472:	2200      	movs	r2, #0
 8003474:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003476:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003478:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800347c:	f7fd fa06 	bl	800088c <__aeabi_uldivmod>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4613      	mov	r3, r2
 8003486:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003488:	e05c      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800348a:	4b3a      	ldr	r3, [pc, #232]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x20c>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	099b      	lsrs	r3, r3, #6
 8003490:	2200      	movs	r2, #0
 8003492:	4618      	mov	r0, r3
 8003494:	4611      	mov	r1, r2
 8003496:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800349a:	623b      	str	r3, [r7, #32]
 800349c:	2300      	movs	r3, #0
 800349e:	627b      	str	r3, [r7, #36]	@ 0x24
 80034a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034a4:	4642      	mov	r2, r8
 80034a6:	464b      	mov	r3, r9
 80034a8:	f04f 0000 	mov.w	r0, #0
 80034ac:	f04f 0100 	mov.w	r1, #0
 80034b0:	0159      	lsls	r1, r3, #5
 80034b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b6:	0150      	lsls	r0, r2, #5
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	46c4      	mov	ip, r8
 80034be:	ebb2 0a0c 	subs.w	sl, r2, ip
 80034c2:	4640      	mov	r0, r8
 80034c4:	4649      	mov	r1, r9
 80034c6:	468c      	mov	ip, r1
 80034c8:	eb63 0b0c 	sbc.w	fp, r3, ip
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034e0:	ebb2 040a 	subs.w	r4, r2, sl
 80034e4:	eb63 050b 	sbc.w	r5, r3, fp
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	00eb      	lsls	r3, r5, #3
 80034f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034f6:	00e2      	lsls	r2, r4, #3
 80034f8:	4614      	mov	r4, r2
 80034fa:	461d      	mov	r5, r3
 80034fc:	4603      	mov	r3, r0
 80034fe:	18e3      	adds	r3, r4, r3
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	460b      	mov	r3, r1
 8003504:	eb45 0303 	adc.w	r3, r5, r3
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003516:	4629      	mov	r1, r5
 8003518:	028b      	lsls	r3, r1, #10
 800351a:	4620      	mov	r0, r4
 800351c:	4629      	mov	r1, r5
 800351e:	4604      	mov	r4, r0
 8003520:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003524:	4601      	mov	r1, r0
 8003526:	028a      	lsls	r2, r1, #10
 8003528:	4610      	mov	r0, r2
 800352a:	4619      	mov	r1, r3
 800352c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800352e:	2200      	movs	r2, #0
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	61fa      	str	r2, [r7, #28]
 8003534:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003538:	f7fd f9a8 	bl	800088c <__aeabi_uldivmod>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4613      	mov	r3, r2
 8003542:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003544:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	0c1b      	lsrs	r3, r3, #16
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	3301      	adds	r3, #1
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003554:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003558:	fbb2 f3f3 	udiv	r3, r2, r3
 800355c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800355e:	e002      	b.n	8003566 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003560:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x210>)
 8003562:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003566:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003568:	4618      	mov	r0, r3
 800356a:	3750      	adds	r7, #80	@ 0x50
 800356c:	46bd      	mov	sp, r7
 800356e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800
 8003578:	00f42400 	.word	0x00f42400
 800357c:	007a1200 	.word	0x007a1200

08003580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003584:	4b02      	ldr	r3, [pc, #8]	@ (8003590 <HAL_RCC_GetHCLKFreq+0x10>)
 8003586:	681b      	ldr	r3, [r3, #0]
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	20000000 	.word	0x20000000

08003594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003598:	f7ff fff2 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 800359c:	4602      	mov	r2, r0
 800359e:	4b05      	ldr	r3, [pc, #20]	@ (80035b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	0a9b      	lsrs	r3, r3, #10
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4903      	ldr	r1, [pc, #12]	@ (80035b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035aa:	5ccb      	ldrb	r3, [r1, r3]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40023800 	.word	0x40023800
 80035b8:	08005708 	.word	0x08005708

080035bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035c0:	f7ff ffde 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b05      	ldr	r3, [pc, #20]	@ (80035dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	0b5b      	lsrs	r3, r3, #13
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4903      	ldr	r1, [pc, #12]	@ (80035e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40023800 	.word	0x40023800
 80035e0:	08005708 	.word	0x08005708

080035e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e041      	b.n	800367a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fd ff28 	bl	8001460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	3304      	adds	r3, #4
 8003620:	4619      	mov	r1, r3
 8003622:	4610      	mov	r0, r2
 8003624:	f000 fc6a 	bl	8003efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3708      	adds	r7, #8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e041      	b.n	8003718 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d106      	bne.n	80036ae <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f839 	bl	8003720 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2202      	movs	r2, #2
 80036b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3304      	adds	r3, #4
 80036be:	4619      	mov	r1, r3
 80036c0:	4610      	mov	r0, r2
 80036c2:	f000 fc1b 	bl	8003efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr
	...

08003734 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d104      	bne.n	8003752 <HAL_TIM_IC_Start_IT+0x1e>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800374e:	b2db      	uxtb	r3, r3
 8003750:	e013      	b.n	800377a <HAL_TIM_IC_Start_IT+0x46>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b04      	cmp	r3, #4
 8003756:	d104      	bne.n	8003762 <HAL_TIM_IC_Start_IT+0x2e>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800375e:	b2db      	uxtb	r3, r3
 8003760:	e00b      	b.n	800377a <HAL_TIM_IC_Start_IT+0x46>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d104      	bne.n	8003772 <HAL_TIM_IC_Start_IT+0x3e>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800376e:	b2db      	uxtb	r3, r3
 8003770:	e003      	b.n	800377a <HAL_TIM_IC_Start_IT+0x46>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003778:	b2db      	uxtb	r3, r3
 800377a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d104      	bne.n	800378c <HAL_TIM_IC_Start_IT+0x58>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003788:	b2db      	uxtb	r3, r3
 800378a:	e013      	b.n	80037b4 <HAL_TIM_IC_Start_IT+0x80>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	2b04      	cmp	r3, #4
 8003790:	d104      	bne.n	800379c <HAL_TIM_IC_Start_IT+0x68>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003798:	b2db      	uxtb	r3, r3
 800379a:	e00b      	b.n	80037b4 <HAL_TIM_IC_Start_IT+0x80>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d104      	bne.n	80037ac <HAL_TIM_IC_Start_IT+0x78>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e003      	b.n	80037b4 <HAL_TIM_IC_Start_IT+0x80>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80037b6:	7bbb      	ldrb	r3, [r7, #14]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d102      	bne.n	80037c2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80037bc:	7b7b      	ldrb	r3, [r7, #13]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d001      	beq.n	80037c6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e0cc      	b.n	8003960 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d104      	bne.n	80037d6 <HAL_TIM_IC_Start_IT+0xa2>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037d4:	e013      	b.n	80037fe <HAL_TIM_IC_Start_IT+0xca>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d104      	bne.n	80037e6 <HAL_TIM_IC_Start_IT+0xb2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037e4:	e00b      	b.n	80037fe <HAL_TIM_IC_Start_IT+0xca>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d104      	bne.n	80037f6 <HAL_TIM_IC_Start_IT+0xc2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037f4:	e003      	b.n	80037fe <HAL_TIM_IC_Start_IT+0xca>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2202      	movs	r2, #2
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d104      	bne.n	800380e <HAL_TIM_IC_Start_IT+0xda>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800380c:	e013      	b.n	8003836 <HAL_TIM_IC_Start_IT+0x102>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b04      	cmp	r3, #4
 8003812:	d104      	bne.n	800381e <HAL_TIM_IC_Start_IT+0xea>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800381c:	e00b      	b.n	8003836 <HAL_TIM_IC_Start_IT+0x102>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b08      	cmp	r3, #8
 8003822:	d104      	bne.n	800382e <HAL_TIM_IC_Start_IT+0xfa>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800382c:	e003      	b.n	8003836 <HAL_TIM_IC_Start_IT+0x102>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2202      	movs	r2, #2
 8003832:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b0c      	cmp	r3, #12
 800383a:	d841      	bhi.n	80038c0 <HAL_TIM_IC_Start_IT+0x18c>
 800383c:	a201      	add	r2, pc, #4	@ (adr r2, 8003844 <HAL_TIM_IC_Start_IT+0x110>)
 800383e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003842:	bf00      	nop
 8003844:	08003879 	.word	0x08003879
 8003848:	080038c1 	.word	0x080038c1
 800384c:	080038c1 	.word	0x080038c1
 8003850:	080038c1 	.word	0x080038c1
 8003854:	0800388b 	.word	0x0800388b
 8003858:	080038c1 	.word	0x080038c1
 800385c:	080038c1 	.word	0x080038c1
 8003860:	080038c1 	.word	0x080038c1
 8003864:	0800389d 	.word	0x0800389d
 8003868:	080038c1 	.word	0x080038c1
 800386c:	080038c1 	.word	0x080038c1
 8003870:	080038c1 	.word	0x080038c1
 8003874:	080038af 	.word	0x080038af
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0202 	orr.w	r2, r2, #2
 8003886:	60da      	str	r2, [r3, #12]
      break;
 8003888:	e01d      	b.n	80038c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f042 0204 	orr.w	r2, r2, #4
 8003898:	60da      	str	r2, [r3, #12]
      break;
 800389a:	e014      	b.n	80038c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0208 	orr.w	r2, r2, #8
 80038aa:	60da      	str	r2, [r3, #12]
      break;
 80038ac:	e00b      	b.n	80038c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0210 	orr.w	r2, r2, #16
 80038bc:	60da      	str	r2, [r3, #12]
      break;
 80038be:	e002      	b.n	80038c6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	73fb      	strb	r3, [r7, #15]
      break;
 80038c4:	bf00      	nop
  }

  if (status == HAL_OK)
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d148      	bne.n	800395e <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2201      	movs	r2, #1
 80038d2:	6839      	ldr	r1, [r7, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f000 fd76 	bl	80043c6 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a22      	ldr	r2, [pc, #136]	@ (8003968 <HAL_TIM_IC_Start_IT+0x234>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d022      	beq.n	800392a <HAL_TIM_IC_Start_IT+0x1f6>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ec:	d01d      	beq.n	800392a <HAL_TIM_IC_Start_IT+0x1f6>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a1e      	ldr	r2, [pc, #120]	@ (800396c <HAL_TIM_IC_Start_IT+0x238>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d018      	beq.n	800392a <HAL_TIM_IC_Start_IT+0x1f6>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003970 <HAL_TIM_IC_Start_IT+0x23c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <HAL_TIM_IC_Start_IT+0x1f6>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a1b      	ldr	r2, [pc, #108]	@ (8003974 <HAL_TIM_IC_Start_IT+0x240>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d00e      	beq.n	800392a <HAL_TIM_IC_Start_IT+0x1f6>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a19      	ldr	r2, [pc, #100]	@ (8003978 <HAL_TIM_IC_Start_IT+0x244>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d009      	beq.n	800392a <HAL_TIM_IC_Start_IT+0x1f6>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a18      	ldr	r2, [pc, #96]	@ (800397c <HAL_TIM_IC_Start_IT+0x248>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d004      	beq.n	800392a <HAL_TIM_IC_Start_IT+0x1f6>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a16      	ldr	r2, [pc, #88]	@ (8003980 <HAL_TIM_IC_Start_IT+0x24c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d111      	bne.n	800394e <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b06      	cmp	r3, #6
 800393a:	d010      	beq.n	800395e <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800394c:	e007      	b.n	800395e <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0201 	orr.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800395e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40010000 	.word	0x40010000
 800396c:	40000400 	.word	0x40000400
 8003970:	40000800 	.word	0x40000800
 8003974:	40000c00 	.word	0x40000c00
 8003978:	40010400 	.word	0x40010400
 800397c:	40014000 	.word	0x40014000
 8003980:	40001800 	.word	0x40001800

08003984 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d020      	beq.n	80039e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d01b      	beq.n	80039e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0202 	mvn.w	r2, #2
 80039b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7fd f94e 	bl	8000c70 <HAL_TIM_IC_CaptureCallback>
 80039d4:	e005      	b.n	80039e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fa75 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 fa7b 	bl	8003ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d020      	beq.n	8003a34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d01b      	beq.n	8003a34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 0204 	mvn.w	r2, #4
 8003a04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2202      	movs	r2, #2
 8003a0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	699b      	ldr	r3, [r3, #24]
 8003a12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fd f928 	bl	8000c70 <HAL_TIM_IC_CaptureCallback>
 8003a20:	e005      	b.n	8003a2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 fa4f 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 fa55 	bl	8003ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d020      	beq.n	8003a80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d01b      	beq.n	8003a80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f06f 0208 	mvn.w	r2, #8
 8003a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2204      	movs	r2, #4
 8003a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fd f902 	bl	8000c70 <HAL_TIM_IC_CaptureCallback>
 8003a6c:	e005      	b.n	8003a7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fa29 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fa2f 	bl	8003ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d020      	beq.n	8003acc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f003 0310 	and.w	r3, r3, #16
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01b      	beq.n	8003acc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0210 	mvn.w	r2, #16
 8003a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2208      	movs	r2, #8
 8003aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f7fd f8dc 	bl	8000c70 <HAL_TIM_IC_CaptureCallback>
 8003ab8:	e005      	b.n	8003ac6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fa03 	bl	8003ec6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fa09 	bl	8003ed8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00c      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d007      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0201 	mvn.w	r2, #1
 8003ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f9e2 	bl	8003eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00c      	beq.n	8003b14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d007      	beq.n	8003b14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fd01 	bl	8004516 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00c      	beq.n	8003b38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d007      	beq.n	8003b38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f9d9 	bl	8003eea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	f003 0320 	and.w	r3, r3, #32
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00c      	beq.n	8003b5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f003 0320 	and.w	r3, r3, #32
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0220 	mvn.w	r2, #32
 8003b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fcd4 	bl	8004504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b5c:	bf00      	nop
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b70:	2300      	movs	r3, #0
 8003b72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e088      	b.n	8003c94 <HAL_TIM_IC_ConfigChannel+0x130>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d11b      	bne.n	8003bc8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003ba0:	f000 fa56 	bl	8004050 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 020c 	bic.w	r2, r2, #12
 8003bb2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6999      	ldr	r1, [r3, #24]
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	619a      	str	r2, [r3, #24]
 8003bc6:	e060      	b.n	8003c8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d11c      	bne.n	8003c08 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003bde:	f000 fad7 	bl	8004190 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699a      	ldr	r2, [r3, #24]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003bf0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6999      	ldr	r1, [r3, #24]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	021a      	lsls	r2, r3, #8
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	619a      	str	r2, [r3, #24]
 8003c06:	e040      	b.n	8003c8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d11b      	bne.n	8003c46 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003c1e:	f000 fb22 	bl	8004266 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69da      	ldr	r2, [r3, #28]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 020c 	bic.w	r2, r2, #12
 8003c30:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69d9      	ldr	r1, [r3, #28]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	61da      	str	r2, [r3, #28]
 8003c44:	e021      	b.n	8003c8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b0c      	cmp	r3, #12
 8003c4a:	d11c      	bne.n	8003c86 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003c5c:	f000 fb3e 	bl	80042dc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	69da      	ldr	r2, [r3, #28]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003c6e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	69d9      	ldr	r1, [r3, #28]
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	021a      	lsls	r2, r3, #8
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	61da      	str	r2, [r3, #28]
 8003c84:	e001      	b.n	8003c8a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_TIM_ConfigClockSource+0x1c>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e0b4      	b.n	8003e22 <HAL_TIM_ConfigClockSource+0x186>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003cd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003cde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cf0:	d03e      	beq.n	8003d70 <HAL_TIM_ConfigClockSource+0xd4>
 8003cf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cf6:	f200 8087 	bhi.w	8003e08 <HAL_TIM_ConfigClockSource+0x16c>
 8003cfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cfe:	f000 8086 	beq.w	8003e0e <HAL_TIM_ConfigClockSource+0x172>
 8003d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d06:	d87f      	bhi.n	8003e08 <HAL_TIM_ConfigClockSource+0x16c>
 8003d08:	2b70      	cmp	r3, #112	@ 0x70
 8003d0a:	d01a      	beq.n	8003d42 <HAL_TIM_ConfigClockSource+0xa6>
 8003d0c:	2b70      	cmp	r3, #112	@ 0x70
 8003d0e:	d87b      	bhi.n	8003e08 <HAL_TIM_ConfigClockSource+0x16c>
 8003d10:	2b60      	cmp	r3, #96	@ 0x60
 8003d12:	d050      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x11a>
 8003d14:	2b60      	cmp	r3, #96	@ 0x60
 8003d16:	d877      	bhi.n	8003e08 <HAL_TIM_ConfigClockSource+0x16c>
 8003d18:	2b50      	cmp	r3, #80	@ 0x50
 8003d1a:	d03c      	beq.n	8003d96 <HAL_TIM_ConfigClockSource+0xfa>
 8003d1c:	2b50      	cmp	r3, #80	@ 0x50
 8003d1e:	d873      	bhi.n	8003e08 <HAL_TIM_ConfigClockSource+0x16c>
 8003d20:	2b40      	cmp	r3, #64	@ 0x40
 8003d22:	d058      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0x13a>
 8003d24:	2b40      	cmp	r3, #64	@ 0x40
 8003d26:	d86f      	bhi.n	8003e08 <HAL_TIM_ConfigClockSource+0x16c>
 8003d28:	2b30      	cmp	r3, #48	@ 0x30
 8003d2a:	d064      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d2c:	2b30      	cmp	r3, #48	@ 0x30
 8003d2e:	d86b      	bhi.n	8003e08 <HAL_TIM_ConfigClockSource+0x16c>
 8003d30:	2b20      	cmp	r3, #32
 8003d32:	d060      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	d867      	bhi.n	8003e08 <HAL_TIM_ConfigClockSource+0x16c>
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d05c      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d3c:	2b10      	cmp	r3, #16
 8003d3e:	d05a      	beq.n	8003df6 <HAL_TIM_ConfigClockSource+0x15a>
 8003d40:	e062      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d52:	f000 fb19 	bl	8004388 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	609a      	str	r2, [r3, #8]
      break;
 8003d6e:	e04f      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d80:	f000 fb02 	bl	8004388 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d92:	609a      	str	r2, [r3, #8]
      break;
 8003d94:	e03c      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003da2:	461a      	mov	r2, r3
 8003da4:	f000 f9c6 	bl	8004134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2150      	movs	r1, #80	@ 0x50
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fad0 	bl	8004354 <TIM_ITRx_SetConfig>
      break;
 8003db4:	e02c      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	f000 fa20 	bl	8004208 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2160      	movs	r1, #96	@ 0x60
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fac0 	bl	8004354 <TIM_ITRx_SetConfig>
      break;
 8003dd4:	e01c      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de2:	461a      	mov	r2, r3
 8003de4:	f000 f9a6 	bl	8004134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2140      	movs	r1, #64	@ 0x40
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fab0 	bl	8004354 <TIM_ITRx_SetConfig>
      break;
 8003df4:	e00c      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4610      	mov	r0, r2
 8003e02:	f000 faa7 	bl	8004354 <TIM_ITRx_SetConfig>
      break;
 8003e06:	e003      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e0c:	e000      	b.n	8003e10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b0c      	cmp	r3, #12
 8003e3e:	d831      	bhi.n	8003ea4 <HAL_TIM_ReadCapturedValue+0x78>
 8003e40:	a201      	add	r2, pc, #4	@ (adr r2, 8003e48 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e46:	bf00      	nop
 8003e48:	08003e7d 	.word	0x08003e7d
 8003e4c:	08003ea5 	.word	0x08003ea5
 8003e50:	08003ea5 	.word	0x08003ea5
 8003e54:	08003ea5 	.word	0x08003ea5
 8003e58:	08003e87 	.word	0x08003e87
 8003e5c:	08003ea5 	.word	0x08003ea5
 8003e60:	08003ea5 	.word	0x08003ea5
 8003e64:	08003ea5 	.word	0x08003ea5
 8003e68:	08003e91 	.word	0x08003e91
 8003e6c:	08003ea5 	.word	0x08003ea5
 8003e70:	08003ea5 	.word	0x08003ea5
 8003e74:	08003ea5 	.word	0x08003ea5
 8003e78:	08003e9b 	.word	0x08003e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e82:	60fb      	str	r3, [r7, #12]

      break;
 8003e84:	e00f      	b.n	8003ea6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e8c:	60fb      	str	r3, [r7, #12]

      break;
 8003e8e:	e00a      	b.n	8003ea6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e96:	60fb      	str	r3, [r7, #12]

      break;
 8003e98:	e005      	b.n	8003ea6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea0:	60fb      	str	r3, [r7, #12]

      break;
 8003ea2:	e000      	b.n	8003ea6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003ea4:	bf00      	nop
  }

  return tmpreg;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop

08003eb4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ece:	bf00      	nop
 8003ed0:	370c      	adds	r7, #12
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bc80      	pop	{r7}
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bc80      	pop	{r7}
 8003ee8:	4770      	bx	lr

08003eea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bc80      	pop	{r7}
 8003efa:	4770      	bx	lr

08003efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a45      	ldr	r2, [pc, #276]	@ (8004024 <TIM_Base_SetConfig+0x128>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d013      	beq.n	8003f3c <TIM_Base_SetConfig+0x40>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f1a:	d00f      	beq.n	8003f3c <TIM_Base_SetConfig+0x40>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a42      	ldr	r2, [pc, #264]	@ (8004028 <TIM_Base_SetConfig+0x12c>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d00b      	beq.n	8003f3c <TIM_Base_SetConfig+0x40>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a41      	ldr	r2, [pc, #260]	@ (800402c <TIM_Base_SetConfig+0x130>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d007      	beq.n	8003f3c <TIM_Base_SetConfig+0x40>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a40      	ldr	r2, [pc, #256]	@ (8004030 <TIM_Base_SetConfig+0x134>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d003      	beq.n	8003f3c <TIM_Base_SetConfig+0x40>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a3f      	ldr	r2, [pc, #252]	@ (8004034 <TIM_Base_SetConfig+0x138>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d108      	bne.n	8003f4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a34      	ldr	r2, [pc, #208]	@ (8004024 <TIM_Base_SetConfig+0x128>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d02b      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f5c:	d027      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a31      	ldr	r2, [pc, #196]	@ (8004028 <TIM_Base_SetConfig+0x12c>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d023      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a30      	ldr	r2, [pc, #192]	@ (800402c <TIM_Base_SetConfig+0x130>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d01f      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a2f      	ldr	r2, [pc, #188]	@ (8004030 <TIM_Base_SetConfig+0x134>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d01b      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a2e      	ldr	r2, [pc, #184]	@ (8004034 <TIM_Base_SetConfig+0x138>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d017      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a2d      	ldr	r2, [pc, #180]	@ (8004038 <TIM_Base_SetConfig+0x13c>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d013      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a2c      	ldr	r2, [pc, #176]	@ (800403c <TIM_Base_SetConfig+0x140>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00f      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a2b      	ldr	r2, [pc, #172]	@ (8004040 <TIM_Base_SetConfig+0x144>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00b      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a2a      	ldr	r2, [pc, #168]	@ (8004044 <TIM_Base_SetConfig+0x148>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d007      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a29      	ldr	r2, [pc, #164]	@ (8004048 <TIM_Base_SetConfig+0x14c>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d003      	beq.n	8003fae <TIM_Base_SetConfig+0xb2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a28      	ldr	r2, [pc, #160]	@ (800404c <TIM_Base_SetConfig+0x150>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d108      	bne.n	8003fc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689a      	ldr	r2, [r3, #8]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8004024 <TIM_Base_SetConfig+0x128>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d003      	beq.n	8003ff4 <TIM_Base_SetConfig+0xf8>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a11      	ldr	r2, [pc, #68]	@ (8004034 <TIM_Base_SetConfig+0x138>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d103      	bne.n	8003ffc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b01      	cmp	r3, #1
 800400c:	d105      	bne.n	800401a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f023 0201 	bic.w	r2, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	611a      	str	r2, [r3, #16]
  }
}
 800401a:	bf00      	nop
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr
 8004024:	40010000 	.word	0x40010000
 8004028:	40000400 	.word	0x40000400
 800402c:	40000800 	.word	0x40000800
 8004030:	40000c00 	.word	0x40000c00
 8004034:	40010400 	.word	0x40010400
 8004038:	40014000 	.word	0x40014000
 800403c:	40014400 	.word	0x40014400
 8004040:	40014800 	.word	0x40014800
 8004044:	40001800 	.word	0x40001800
 8004048:	40001c00 	.word	0x40001c00
 800404c:	40002000 	.word	0x40002000

08004050 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004050:	b480      	push	{r7}
 8004052:	b087      	sub	sp, #28
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	f023 0201 	bic.w	r2, r3, #1
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4a27      	ldr	r2, [pc, #156]	@ (8004118 <TIM_TI1_SetConfig+0xc8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d01b      	beq.n	80040b6 <TIM_TI1_SetConfig+0x66>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004084:	d017      	beq.n	80040b6 <TIM_TI1_SetConfig+0x66>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4a24      	ldr	r2, [pc, #144]	@ (800411c <TIM_TI1_SetConfig+0xcc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d013      	beq.n	80040b6 <TIM_TI1_SetConfig+0x66>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4a23      	ldr	r2, [pc, #140]	@ (8004120 <TIM_TI1_SetConfig+0xd0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00f      	beq.n	80040b6 <TIM_TI1_SetConfig+0x66>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4a22      	ldr	r2, [pc, #136]	@ (8004124 <TIM_TI1_SetConfig+0xd4>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00b      	beq.n	80040b6 <TIM_TI1_SetConfig+0x66>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4a21      	ldr	r2, [pc, #132]	@ (8004128 <TIM_TI1_SetConfig+0xd8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d007      	beq.n	80040b6 <TIM_TI1_SetConfig+0x66>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4a20      	ldr	r2, [pc, #128]	@ (800412c <TIM_TI1_SetConfig+0xdc>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d003      	beq.n	80040b6 <TIM_TI1_SetConfig+0x66>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004130 <TIM_TI1_SetConfig+0xe0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d101      	bne.n	80040ba <TIM_TI1_SetConfig+0x6a>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <TIM_TI1_SetConfig+0x6c>
 80040ba:	2300      	movs	r3, #0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f023 0303 	bic.w	r3, r3, #3
 80040c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	e003      	b.n	80040da <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f043 0301 	orr.w	r3, r3, #1
 80040d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	f023 030a 	bic.w	r3, r3, #10
 80040f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	f003 030a 	and.w	r3, r3, #10
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	621a      	str	r2, [r3, #32]
}
 800410e:	bf00      	nop
 8004110:	371c      	adds	r7, #28
 8004112:	46bd      	mov	sp, r7
 8004114:	bc80      	pop	{r7}
 8004116:	4770      	bx	lr
 8004118:	40010000 	.word	0x40010000
 800411c:	40000400 	.word	0x40000400
 8004120:	40000800 	.word	0x40000800
 8004124:	40000c00 	.word	0x40000c00
 8004128:	40010400 	.word	0x40010400
 800412c:	40014000 	.word	0x40014000
 8004130:	40001800 	.word	0x40001800

08004134 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	f023 0201 	bic.w	r2, r3, #1
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800415e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	011b      	lsls	r3, r3, #4
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f023 030a 	bic.w	r3, r3, #10
 8004170:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	621a      	str	r2, [r3, #32]
}
 8004186:	bf00      	nop
 8004188:	371c      	adds	r7, #28
 800418a:	46bd      	mov	sp, r7
 800418c:	bc80      	pop	{r7}
 800418e:	4770      	bx	lr

08004190 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
 800419c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	f023 0210 	bic.w	r2, r3, #16
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	021b      	lsls	r3, r3, #8
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	031b      	lsls	r3, r3, #12
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041e2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	621a      	str	r2, [r3, #32]
}
 80041fe:	bf00      	nop
 8004200:	371c      	adds	r7, #28
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr

08004208 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	f023 0210 	bic.w	r2, r3, #16
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	031b      	lsls	r3, r3, #12
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004244:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4313      	orrs	r3, r2
 800424e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	621a      	str	r2, [r3, #32]
}
 800425c:	bf00      	nop
 800425e:	371c      	adds	r7, #28
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr

08004266 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004266:	b480      	push	{r7}
 8004268:	b087      	sub	sp, #28
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	607a      	str	r2, [r7, #4]
 8004272:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f023 0303 	bic.w	r3, r3, #3
 8004292:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042a2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80042b6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	021b      	lsls	r3, r3, #8
 80042bc:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	693a      	ldr	r2, [r7, #16]
 80042ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	621a      	str	r2, [r3, #32]
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr

080042dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80042dc:	b480      	push	{r7}
 80042de:	b087      	sub	sp, #28
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004308:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	021b      	lsls	r3, r3, #8
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800431a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	031b      	lsls	r3, r3, #12
 8004320:	b29b      	uxth	r3, r3
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800432e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	031b      	lsls	r3, r3, #12
 8004334:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	4313      	orrs	r3, r2
 800433c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	693a      	ldr	r2, [r7, #16]
 8004342:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	621a      	str	r2, [r3, #32]
}
 800434a:	bf00      	nop
 800434c:	371c      	adds	r7, #28
 800434e:	46bd      	mov	sp, r7
 8004350:	bc80      	pop	{r7}
 8004352:	4770      	bx	lr

08004354 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800436a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	f043 0307 	orr.w	r3, r3, #7
 8004376:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	609a      	str	r2, [r3, #8]
}
 800437e:	bf00      	nop
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	bc80      	pop	{r7}
 8004386:	4770      	bx	lr

08004388 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	021a      	lsls	r2, r3, #8
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	609a      	str	r2, [r3, #8]
}
 80043bc:	bf00      	nop
 80043be:	371c      	adds	r7, #28
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr

080043c6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b087      	sub	sp, #28
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	2201      	movs	r2, #1
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6a1a      	ldr	r2, [r3, #32]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	43db      	mvns	r3, r3
 80043e8:	401a      	ands	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a1a      	ldr	r2, [r3, #32]
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	f003 031f 	and.w	r3, r3, #31
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	fa01 f303 	lsl.w	r3, r1, r3
 80043fe:	431a      	orrs	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	621a      	str	r2, [r3, #32]
}
 8004404:	bf00      	nop
 8004406:	371c      	adds	r7, #28
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr
	...

08004410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004424:	2302      	movs	r3, #2
 8004426:	e05a      	b.n	80044de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800444e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a20      	ldr	r2, [pc, #128]	@ (80044e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d022      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004474:	d01d      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1c      	ldr	r2, [pc, #112]	@ (80044ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d018      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1a      	ldr	r2, [pc, #104]	@ (80044f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d013      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a19      	ldr	r2, [pc, #100]	@ (80044f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00e      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a17      	ldr	r2, [pc, #92]	@ (80044f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d009      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a16      	ldr	r2, [pc, #88]	@ (80044fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d004      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a14      	ldr	r2, [pc, #80]	@ (8004500 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d10c      	bne.n	80044cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr
 80044e8:	40010000 	.word	0x40010000
 80044ec:	40000400 	.word	0x40000400
 80044f0:	40000800 	.word	0x40000800
 80044f4:	40000c00 	.word	0x40000c00
 80044f8:	40010400 	.word	0x40010400
 80044fc:	40014000 	.word	0x40014000
 8004500:	40001800 	.word	0x40001800

08004504 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr

08004516 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004516:	b480      	push	{r7}
 8004518:	b083      	sub	sp, #12
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e042      	b.n	80045c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d106      	bne.n	8004554 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7fc ffd6 	bl	8001500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2224      	movs	r2, #36	@ 0x24
 8004558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800456a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f971 	bl	8004854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004580:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695a      	ldr	r2, [r3, #20]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004590:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3708      	adds	r7, #8
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08a      	sub	sp, #40	@ 0x28
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	4613      	mov	r3, r2
 80045d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	d175      	bne.n	80046d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <HAL_UART_Transmit+0x2c>
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e06e      	b.n	80046d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2221      	movs	r2, #33	@ 0x21
 8004602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004606:	f7fd f8cd 	bl	80017a4 <HAL_GetTick>
 800460a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	88fa      	ldrh	r2, [r7, #6]
 8004610:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	88fa      	ldrh	r2, [r7, #6]
 8004616:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004620:	d108      	bne.n	8004634 <HAL_UART_Transmit+0x6c>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d104      	bne.n	8004634 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800462a:	2300      	movs	r3, #0
 800462c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	61bb      	str	r3, [r7, #24]
 8004632:	e003      	b.n	800463c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004638:	2300      	movs	r3, #0
 800463a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800463c:	e02e      	b.n	800469c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2200      	movs	r2, #0
 8004646:	2180      	movs	r1, #128	@ 0x80
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f848 	bl	80046de <UART_WaitOnFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d005      	beq.n	8004660 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2220      	movs	r2, #32
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e03a      	b.n	80046d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10b      	bne.n	800467e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	461a      	mov	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004674:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	3302      	adds	r3, #2
 800467a:	61bb      	str	r3, [r7, #24]
 800467c:	e007      	b.n	800468e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	781a      	ldrb	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	3301      	adds	r3, #1
 800468c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1cb      	bne.n	800463e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2200      	movs	r2, #0
 80046ae:	2140      	movs	r1, #64	@ 0x40
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f814 	bl	80046de <UART_WaitOnFlagUntilTimeout>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d005      	beq.n	80046c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e006      	b.n	80046d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e000      	b.n	80046d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80046d4:	2302      	movs	r3, #2
  }
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3720      	adds	r7, #32
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b086      	sub	sp, #24
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	60f8      	str	r0, [r7, #12]
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	603b      	str	r3, [r7, #0]
 80046ea:	4613      	mov	r3, r2
 80046ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ee:	e03b      	b.n	8004768 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80046f6:	d037      	beq.n	8004768 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f8:	f7fd f854 	bl	80017a4 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	6a3a      	ldr	r2, [r7, #32]
 8004704:	429a      	cmp	r2, r3
 8004706:	d302      	bcc.n	800470e <UART_WaitOnFlagUntilTimeout+0x30>
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d101      	bne.n	8004712 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e03a      	b.n	8004788 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d023      	beq.n	8004768 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b80      	cmp	r3, #128	@ 0x80
 8004724:	d020      	beq.n	8004768 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b40      	cmp	r3, #64	@ 0x40
 800472a:	d01d      	beq.n	8004768 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b08      	cmp	r3, #8
 8004738:	d116      	bne.n	8004768 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	617b      	str	r3, [r7, #20]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	617b      	str	r3, [r7, #20]
 800474e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f000 f81d 	bl	8004790 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2208      	movs	r2, #8
 800475a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e00f      	b.n	8004788 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4013      	ands	r3, r2
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	429a      	cmp	r2, r3
 8004776:	bf0c      	ite	eq
 8004778:	2301      	moveq	r3, #1
 800477a:	2300      	movne	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	461a      	mov	r2, r3
 8004780:	79fb      	ldrb	r3, [r7, #7]
 8004782:	429a      	cmp	r2, r3
 8004784:	d0b4      	beq.n	80046f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	3718      	adds	r7, #24
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004790:	b480      	push	{r7}
 8004792:	b095      	sub	sp, #84	@ 0x54
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	330c      	adds	r3, #12
 800479e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80047a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80047ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	330c      	adds	r3, #12
 80047b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80047ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e5      	bne.n	8004798 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3314      	adds	r3, #20
 80047d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	e853 3f00 	ldrex	r3, [r3]
 80047da:	61fb      	str	r3, [r7, #28]
   return(result);
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f023 0301 	bic.w	r3, r3, #1
 80047e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	3314      	adds	r3, #20
 80047ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047f4:	e841 2300 	strex	r3, r2, [r1]
 80047f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1e5      	bne.n	80047cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004804:	2b01      	cmp	r3, #1
 8004806:	d119      	bne.n	800483c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	330c      	adds	r3, #12
 800480e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	e853 3f00 	ldrex	r3, [r3]
 8004816:	60bb      	str	r3, [r7, #8]
   return(result);
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	f023 0310 	bic.w	r3, r3, #16
 800481e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	330c      	adds	r3, #12
 8004826:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004828:	61ba      	str	r2, [r7, #24]
 800482a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482c:	6979      	ldr	r1, [r7, #20]
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	e841 2300 	strex	r3, r2, [r1]
 8004834:	613b      	str	r3, [r7, #16]
   return(result);
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1e5      	bne.n	8004808 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2220      	movs	r2, #32
 8004840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800484a:	bf00      	nop
 800484c:	3754      	adds	r7, #84	@ 0x54
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr

08004854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004858:	b0c0      	sub	sp, #256	@ 0x100
 800485a:	af00      	add	r7, sp, #0
 800485c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004870:	68d9      	ldr	r1, [r3, #12]
 8004872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	ea40 0301 	orr.w	r3, r0, r1
 800487c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800487e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	431a      	orrs	r2, r3
 800488c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	431a      	orrs	r2, r3
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	4313      	orrs	r3, r2
 800489c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80048ac:	f021 010c 	bic.w	r1, r1, #12
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80048ba:	430b      	orrs	r3, r1
 80048bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	695b      	ldr	r3, [r3, #20]
 80048c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80048ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ce:	6999      	ldr	r1, [r3, #24]
 80048d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	ea40 0301 	orr.w	r3, r0, r1
 80048da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	4b91      	ldr	r3, [pc, #580]	@ (8004b28 <UART_SetConfig+0x2d4>)
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d005      	beq.n	80048f4 <UART_SetConfig+0xa0>
 80048e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4b8f      	ldr	r3, [pc, #572]	@ (8004b2c <UART_SetConfig+0x2d8>)
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d104      	bne.n	80048fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048f4:	f7fe fe62 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 80048f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80048fc:	e003      	b.n	8004906 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80048fe:	f7fe fe49 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 8004902:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800490a:	69db      	ldr	r3, [r3, #28]
 800490c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004910:	f040 8110 	bne.w	8004b34 <UART_SetConfig+0x2e0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004918:	2200      	movs	r2, #0
 800491a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800491e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004922:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004926:	4622      	mov	r2, r4
 8004928:	462b      	mov	r3, r5
 800492a:	1891      	adds	r1, r2, r2
 800492c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800492e:	415b      	adcs	r3, r3
 8004930:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004932:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004936:	4620      	mov	r0, r4
 8004938:	4629      	mov	r1, r5
 800493a:	4604      	mov	r4, r0
 800493c:	eb12 0804 	adds.w	r8, r2, r4
 8004940:	460c      	mov	r4, r1
 8004942:	eb43 0904 	adc.w	r9, r3, r4
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800495a:	4690      	mov	r8, r2
 800495c:	4699      	mov	r9, r3
 800495e:	4603      	mov	r3, r0
 8004960:	eb18 0303 	adds.w	r3, r8, r3
 8004964:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004968:	460b      	mov	r3, r1
 800496a:	eb49 0303 	adc.w	r3, r9, r3
 800496e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800497e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004982:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004986:	460b      	mov	r3, r1
 8004988:	18db      	adds	r3, r3, r3
 800498a:	653b      	str	r3, [r7, #80]	@ 0x50
 800498c:	4613      	mov	r3, r2
 800498e:	eb42 0303 	adc.w	r3, r2, r3
 8004992:	657b      	str	r3, [r7, #84]	@ 0x54
 8004994:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004998:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800499c:	f7fb ff76 	bl	800088c <__aeabi_uldivmod>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4b62      	ldr	r3, [pc, #392]	@ (8004b30 <UART_SetConfig+0x2dc>)
 80049a6:	fba3 2302 	umull	r2, r3, r3, r2
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	011c      	lsls	r4, r3, #4
 80049ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80049bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80049c0:	4642      	mov	r2, r8
 80049c2:	464b      	mov	r3, r9
 80049c4:	1891      	adds	r1, r2, r2
 80049c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80049c8:	415b      	adcs	r3, r3
 80049ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80049d0:	4645      	mov	r5, r8
 80049d2:	eb12 0a05 	adds.w	sl, r2, r5
 80049d6:	4640      	mov	r0, r8
 80049d8:	4649      	mov	r1, r9
 80049da:	460d      	mov	r5, r1
 80049dc:	eb43 0b05 	adc.w	fp, r3, r5
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049f4:	4692      	mov	sl, r2
 80049f6:	469b      	mov	fp, r3
 80049f8:	4603      	mov	r3, r0
 80049fa:	eb1a 0303 	adds.w	r3, sl, r3
 80049fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a02:	460b      	mov	r3, r1
 8004a04:	eb4b 0303 	adc.w	r3, fp, r3
 8004a08:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a18:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a20:	460b      	mov	r3, r1
 8004a22:	18db      	adds	r3, r3, r3
 8004a24:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a26:	4613      	mov	r3, r2
 8004a28:	eb42 0303 	adc.w	r3, r2, r3
 8004a2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a36:	f7fb ff29 	bl	800088c <__aeabi_uldivmod>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	4611      	mov	r1, r2
 8004a40:	4b3b      	ldr	r3, [pc, #236]	@ (8004b30 <UART_SetConfig+0x2dc>)
 8004a42:	fba3 2301 	umull	r2, r3, r3, r1
 8004a46:	095b      	lsrs	r3, r3, #5
 8004a48:	2264      	movs	r2, #100	@ 0x64
 8004a4a:	fb02 f303 	mul.w	r3, r2, r3
 8004a4e:	1acb      	subs	r3, r1, r3
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a56:	4b36      	ldr	r3, [pc, #216]	@ (8004b30 <UART_SetConfig+0x2dc>)
 8004a58:	fba3 2302 	umull	r2, r3, r3, r2
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a64:	441c      	add	r4, r3
 8004a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a70:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a78:	4642      	mov	r2, r8
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	1891      	adds	r1, r2, r2
 8004a7e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a80:	415b      	adcs	r3, r3
 8004a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a88:	4641      	mov	r1, r8
 8004a8a:	1851      	adds	r1, r2, r1
 8004a8c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a8e:	4649      	mov	r1, r9
 8004a90:	414b      	adcs	r3, r1
 8004a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004aa0:	4659      	mov	r1, fp
 8004aa2:	00cb      	lsls	r3, r1, #3
 8004aa4:	4655      	mov	r5, sl
 8004aa6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004aaa:	4651      	mov	r1, sl
 8004aac:	00ca      	lsls	r2, r1, #3
 8004aae:	4610      	mov	r0, r2
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	4642      	mov	r2, r8
 8004ab6:	189b      	adds	r3, r3, r2
 8004ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004abc:	464b      	mov	r3, r9
 8004abe:	460a      	mov	r2, r1
 8004ac0:	eb42 0303 	adc.w	r3, r2, r3
 8004ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ad4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ad8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004adc:	460b      	mov	r3, r1
 8004ade:	18db      	adds	r3, r3, r3
 8004ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	eb42 0303 	adc.w	r3, r2, r3
 8004ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004aea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004aee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004af2:	f7fb fecb 	bl	800088c <__aeabi_uldivmod>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4b0d      	ldr	r3, [pc, #52]	@ (8004b30 <UART_SetConfig+0x2dc>)
 8004afc:	fba3 1302 	umull	r1, r3, r3, r2
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	2164      	movs	r1, #100	@ 0x64
 8004b04:	fb01 f303 	mul.w	r3, r1, r3
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	3332      	adds	r3, #50	@ 0x32
 8004b0e:	4a08      	ldr	r2, [pc, #32]	@ (8004b30 <UART_SetConfig+0x2dc>)
 8004b10:	fba2 2303 	umull	r2, r3, r2, r3
 8004b14:	095b      	lsrs	r3, r3, #5
 8004b16:	f003 0207 	and.w	r2, r3, #7
 8004b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4422      	add	r2, r4
 8004b22:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b24:	e10a      	b.n	8004d3c <UART_SetConfig+0x4e8>
 8004b26:	bf00      	nop
 8004b28:	40011000 	.word	0x40011000
 8004b2c:	40011400 	.word	0x40011400
 8004b30:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b46:	4642      	mov	r2, r8
 8004b48:	464b      	mov	r3, r9
 8004b4a:	1891      	adds	r1, r2, r2
 8004b4c:	6239      	str	r1, [r7, #32]
 8004b4e:	415b      	adcs	r3, r3
 8004b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b56:	4641      	mov	r1, r8
 8004b58:	1854      	adds	r4, r2, r1
 8004b5a:	46cc      	mov	ip, r9
 8004b5c:	eb43 050c 	adc.w	r5, r3, ip
 8004b60:	f04f 0200 	mov.w	r2, #0
 8004b64:	f04f 0300 	mov.w	r3, #0
 8004b68:	00eb      	lsls	r3, r5, #3
 8004b6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b6e:	00e2      	lsls	r2, r4, #3
 8004b70:	4614      	mov	r4, r2
 8004b72:	461d      	mov	r5, r3
 8004b74:	4640      	mov	r0, r8
 8004b76:	4649      	mov	r1, r9
 8004b78:	4603      	mov	r3, r0
 8004b7a:	18e3      	adds	r3, r4, r3
 8004b7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b80:	460b      	mov	r3, r1
 8004b82:	eb45 0303 	adc.w	r3, r5, r3
 8004b86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	f04f 0300 	mov.w	r3, #0
 8004ba2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	008b      	lsls	r3, r1, #2
 8004baa:	4620      	mov	r0, r4
 8004bac:	4629      	mov	r1, r5
 8004bae:	4604      	mov	r4, r0
 8004bb0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004bb4:	4601      	mov	r1, r0
 8004bb6:	008a      	lsls	r2, r1, #2
 8004bb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004bbc:	f7fb fe66 	bl	800088c <__aeabi_uldivmod>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4b60      	ldr	r3, [pc, #384]	@ (8004d48 <UART_SetConfig+0x4f4>)
 8004bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	011c      	lsls	r4, r3, #4
 8004bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004bd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004bdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004be0:	4642      	mov	r2, r8
 8004be2:	464b      	mov	r3, r9
 8004be4:	1891      	adds	r1, r2, r2
 8004be6:	61b9      	str	r1, [r7, #24]
 8004be8:	415b      	adcs	r3, r3
 8004bea:	61fb      	str	r3, [r7, #28]
 8004bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bf0:	4641      	mov	r1, r8
 8004bf2:	1851      	adds	r1, r2, r1
 8004bf4:	6139      	str	r1, [r7, #16]
 8004bf6:	4649      	mov	r1, r9
 8004bf8:	414b      	adcs	r3, r1
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c08:	4659      	mov	r1, fp
 8004c0a:	00cb      	lsls	r3, r1, #3
 8004c0c:	4655      	mov	r5, sl
 8004c0e:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004c12:	4651      	mov	r1, sl
 8004c14:	00ca      	lsls	r2, r1, #3
 8004c16:	4610      	mov	r0, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4642      	mov	r2, r8
 8004c1e:	189b      	adds	r3, r3, r2
 8004c20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c24:	464b      	mov	r3, r9
 8004c26:	460a      	mov	r2, r1
 8004c28:	eb42 0303 	adc.w	r3, r2, r3
 8004c2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c48:	4649      	mov	r1, r9
 8004c4a:	008b      	lsls	r3, r1, #2
 8004c4c:	4645      	mov	r5, r8
 8004c4e:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8004c52:	4641      	mov	r1, r8
 8004c54:	008a      	lsls	r2, r1, #2
 8004c56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004c5a:	f7fb fe17 	bl	800088c <__aeabi_uldivmod>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4611      	mov	r1, r2
 8004c64:	4b38      	ldr	r3, [pc, #224]	@ (8004d48 <UART_SetConfig+0x4f4>)
 8004c66:	fba3 2301 	umull	r2, r3, r3, r1
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	2264      	movs	r2, #100	@ 0x64
 8004c6e:	fb02 f303 	mul.w	r3, r2, r3
 8004c72:	1acb      	subs	r3, r1, r3
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	3332      	adds	r3, #50	@ 0x32
 8004c78:	4a33      	ldr	r2, [pc, #204]	@ (8004d48 <UART_SetConfig+0x4f4>)
 8004c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c84:	441c      	add	r4, r3
 8004c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c94:	4642      	mov	r2, r8
 8004c96:	464b      	mov	r3, r9
 8004c98:	1891      	adds	r1, r2, r2
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	415b      	adcs	r3, r3
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ca4:	4641      	mov	r1, r8
 8004ca6:	1851      	adds	r1, r2, r1
 8004ca8:	6039      	str	r1, [r7, #0]
 8004caa:	4649      	mov	r1, r9
 8004cac:	414b      	adcs	r3, r1
 8004cae:	607b      	str	r3, [r7, #4]
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cbc:	4659      	mov	r1, fp
 8004cbe:	00cb      	lsls	r3, r1, #3
 8004cc0:	4655      	mov	r5, sl
 8004cc2:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8004cc6:	4651      	mov	r1, sl
 8004cc8:	00ca      	lsls	r2, r1, #3
 8004cca:	4610      	mov	r0, r2
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4603      	mov	r3, r0
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	189b      	adds	r3, r3, r2
 8004cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cd6:	464b      	mov	r3, r9
 8004cd8:	460a      	mov	r2, r1
 8004cda:	eb42 0303 	adc.w	r3, r2, r3
 8004cde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cea:	667a      	str	r2, [r7, #100]	@ 0x64
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004cf8:	4649      	mov	r1, r9
 8004cfa:	008b      	lsls	r3, r1, #2
 8004cfc:	4645      	mov	r5, r8
 8004cfe:	ea43 7395 	orr.w	r3, r3, r5, lsr #30
 8004d02:	4641      	mov	r1, r8
 8004d04:	008a      	lsls	r2, r1, #2
 8004d06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d0a:	f7fb fdbf 	bl	800088c <__aeabi_uldivmod>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4b0d      	ldr	r3, [pc, #52]	@ (8004d48 <UART_SetConfig+0x4f4>)
 8004d14:	fba3 1302 	umull	r1, r3, r3, r2
 8004d18:	095b      	lsrs	r3, r3, #5
 8004d1a:	2164      	movs	r1, #100	@ 0x64
 8004d1c:	fb01 f303 	mul.w	r3, r1, r3
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	3332      	adds	r3, #50	@ 0x32
 8004d26:	4a08      	ldr	r2, [pc, #32]	@ (8004d48 <UART_SetConfig+0x4f4>)
 8004d28:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2c:	095b      	lsrs	r3, r3, #5
 8004d2e:	f003 020f 	and.w	r2, r3, #15
 8004d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4422      	add	r2, r4
 8004d3a:	609a      	str	r2, [r3, #8]
}
 8004d3c:	bf00      	nop
 8004d3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d42:	46bd      	mov	sp, r7
 8004d44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d48:	51eb851f 	.word	0x51eb851f

08004d4c <sniprintf>:
 8004d4c:	b40c      	push	{r2, r3}
 8004d4e:	b530      	push	{r4, r5, lr}
 8004d50:	4b18      	ldr	r3, [pc, #96]	@ (8004db4 <sniprintf+0x68>)
 8004d52:	1e0c      	subs	r4, r1, #0
 8004d54:	681d      	ldr	r5, [r3, #0]
 8004d56:	b09d      	sub	sp, #116	@ 0x74
 8004d58:	da08      	bge.n	8004d6c <sniprintf+0x20>
 8004d5a:	238b      	movs	r3, #139	@ 0x8b
 8004d5c:	602b      	str	r3, [r5, #0]
 8004d5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d62:	b01d      	add	sp, #116	@ 0x74
 8004d64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d68:	b002      	add	sp, #8
 8004d6a:	4770      	bx	lr
 8004d6c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004d70:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004d7a:	bf14      	ite	ne
 8004d7c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8004d80:	4623      	moveq	r3, r4
 8004d82:	9304      	str	r3, [sp, #16]
 8004d84:	9307      	str	r3, [sp, #28]
 8004d86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004d8a:	9002      	str	r0, [sp, #8]
 8004d8c:	9006      	str	r0, [sp, #24]
 8004d8e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d92:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004d94:	ab21      	add	r3, sp, #132	@ 0x84
 8004d96:	a902      	add	r1, sp, #8
 8004d98:	4628      	mov	r0, r5
 8004d9a:	9301      	str	r3, [sp, #4]
 8004d9c:	f000 f994 	bl	80050c8 <_svfiprintf_r>
 8004da0:	1c43      	adds	r3, r0, #1
 8004da2:	bfbc      	itt	lt
 8004da4:	238b      	movlt	r3, #139	@ 0x8b
 8004da6:	602b      	strlt	r3, [r5, #0]
 8004da8:	2c00      	cmp	r4, #0
 8004daa:	d0da      	beq.n	8004d62 <sniprintf+0x16>
 8004dac:	9b02      	ldr	r3, [sp, #8]
 8004dae:	2200      	movs	r2, #0
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	e7d6      	b.n	8004d62 <sniprintf+0x16>
 8004db4:	2000000c 	.word	0x2000000c

08004db8 <memset>:
 8004db8:	4402      	add	r2, r0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d100      	bne.n	8004dc2 <memset+0xa>
 8004dc0:	4770      	bx	lr
 8004dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004dc6:	e7f9      	b.n	8004dbc <memset+0x4>

08004dc8 <__errno>:
 8004dc8:	4b01      	ldr	r3, [pc, #4]	@ (8004dd0 <__errno+0x8>)
 8004dca:	6818      	ldr	r0, [r3, #0]
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	2000000c 	.word	0x2000000c

08004dd4 <__libc_init_array>:
 8004dd4:	b570      	push	{r4, r5, r6, lr}
 8004dd6:	4d0d      	ldr	r5, [pc, #52]	@ (8004e0c <__libc_init_array+0x38>)
 8004dd8:	4c0d      	ldr	r4, [pc, #52]	@ (8004e10 <__libc_init_array+0x3c>)
 8004dda:	1b64      	subs	r4, r4, r5
 8004ddc:	10a4      	asrs	r4, r4, #2
 8004dde:	2600      	movs	r6, #0
 8004de0:	42a6      	cmp	r6, r4
 8004de2:	d109      	bne.n	8004df8 <__libc_init_array+0x24>
 8004de4:	4d0b      	ldr	r5, [pc, #44]	@ (8004e14 <__libc_init_array+0x40>)
 8004de6:	4c0c      	ldr	r4, [pc, #48]	@ (8004e18 <__libc_init_array+0x44>)
 8004de8:	f000 fc64 	bl	80056b4 <_init>
 8004dec:	1b64      	subs	r4, r4, r5
 8004dee:	10a4      	asrs	r4, r4, #2
 8004df0:	2600      	movs	r6, #0
 8004df2:	42a6      	cmp	r6, r4
 8004df4:	d105      	bne.n	8004e02 <__libc_init_array+0x2e>
 8004df6:	bd70      	pop	{r4, r5, r6, pc}
 8004df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dfc:	4798      	blx	r3
 8004dfe:	3601      	adds	r6, #1
 8004e00:	e7ee      	b.n	8004de0 <__libc_init_array+0xc>
 8004e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e06:	4798      	blx	r3
 8004e08:	3601      	adds	r6, #1
 8004e0a:	e7f2      	b.n	8004df2 <__libc_init_array+0x1e>
 8004e0c:	0800574c 	.word	0x0800574c
 8004e10:	0800574c 	.word	0x0800574c
 8004e14:	0800574c 	.word	0x0800574c
 8004e18:	08005750 	.word	0x08005750

08004e1c <__retarget_lock_acquire_recursive>:
 8004e1c:	4770      	bx	lr

08004e1e <__retarget_lock_release_recursive>:
 8004e1e:	4770      	bx	lr

08004e20 <_free_r>:
 8004e20:	b538      	push	{r3, r4, r5, lr}
 8004e22:	4605      	mov	r5, r0
 8004e24:	2900      	cmp	r1, #0
 8004e26:	d041      	beq.n	8004eac <_free_r+0x8c>
 8004e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e2c:	1f0c      	subs	r4, r1, #4
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	bfb8      	it	lt
 8004e32:	18e4      	addlt	r4, r4, r3
 8004e34:	f000 f8e0 	bl	8004ff8 <__malloc_lock>
 8004e38:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb0 <_free_r+0x90>)
 8004e3a:	6813      	ldr	r3, [r2, #0]
 8004e3c:	b933      	cbnz	r3, 8004e4c <_free_r+0x2c>
 8004e3e:	6063      	str	r3, [r4, #4]
 8004e40:	6014      	str	r4, [r2, #0]
 8004e42:	4628      	mov	r0, r5
 8004e44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e48:	f000 b8dc 	b.w	8005004 <__malloc_unlock>
 8004e4c:	42a3      	cmp	r3, r4
 8004e4e:	d908      	bls.n	8004e62 <_free_r+0x42>
 8004e50:	6820      	ldr	r0, [r4, #0]
 8004e52:	1821      	adds	r1, r4, r0
 8004e54:	428b      	cmp	r3, r1
 8004e56:	bf01      	itttt	eq
 8004e58:	6819      	ldreq	r1, [r3, #0]
 8004e5a:	685b      	ldreq	r3, [r3, #4]
 8004e5c:	1809      	addeq	r1, r1, r0
 8004e5e:	6021      	streq	r1, [r4, #0]
 8004e60:	e7ed      	b.n	8004e3e <_free_r+0x1e>
 8004e62:	461a      	mov	r2, r3
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	b10b      	cbz	r3, 8004e6c <_free_r+0x4c>
 8004e68:	42a3      	cmp	r3, r4
 8004e6a:	d9fa      	bls.n	8004e62 <_free_r+0x42>
 8004e6c:	6811      	ldr	r1, [r2, #0]
 8004e6e:	1850      	adds	r0, r2, r1
 8004e70:	42a0      	cmp	r0, r4
 8004e72:	d10b      	bne.n	8004e8c <_free_r+0x6c>
 8004e74:	6820      	ldr	r0, [r4, #0]
 8004e76:	4401      	add	r1, r0
 8004e78:	1850      	adds	r0, r2, r1
 8004e7a:	4283      	cmp	r3, r0
 8004e7c:	6011      	str	r1, [r2, #0]
 8004e7e:	d1e0      	bne.n	8004e42 <_free_r+0x22>
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	6053      	str	r3, [r2, #4]
 8004e86:	4408      	add	r0, r1
 8004e88:	6010      	str	r0, [r2, #0]
 8004e8a:	e7da      	b.n	8004e42 <_free_r+0x22>
 8004e8c:	d902      	bls.n	8004e94 <_free_r+0x74>
 8004e8e:	230c      	movs	r3, #12
 8004e90:	602b      	str	r3, [r5, #0]
 8004e92:	e7d6      	b.n	8004e42 <_free_r+0x22>
 8004e94:	6820      	ldr	r0, [r4, #0]
 8004e96:	1821      	adds	r1, r4, r0
 8004e98:	428b      	cmp	r3, r1
 8004e9a:	bf04      	itt	eq
 8004e9c:	6819      	ldreq	r1, [r3, #0]
 8004e9e:	685b      	ldreq	r3, [r3, #4]
 8004ea0:	6063      	str	r3, [r4, #4]
 8004ea2:	bf04      	itt	eq
 8004ea4:	1809      	addeq	r1, r1, r0
 8004ea6:	6021      	streq	r1, [r4, #0]
 8004ea8:	6054      	str	r4, [r2, #4]
 8004eaa:	e7ca      	b.n	8004e42 <_free_r+0x22>
 8004eac:	bd38      	pop	{r3, r4, r5, pc}
 8004eae:	bf00      	nop
 8004eb0:	200002f8 	.word	0x200002f8

08004eb4 <sbrk_aligned>:
 8004eb4:	b570      	push	{r4, r5, r6, lr}
 8004eb6:	4e0f      	ldr	r6, [pc, #60]	@ (8004ef4 <sbrk_aligned+0x40>)
 8004eb8:	460c      	mov	r4, r1
 8004eba:	6831      	ldr	r1, [r6, #0]
 8004ebc:	4605      	mov	r5, r0
 8004ebe:	b911      	cbnz	r1, 8004ec6 <sbrk_aligned+0x12>
 8004ec0:	f000 fba4 	bl	800560c <_sbrk_r>
 8004ec4:	6030      	str	r0, [r6, #0]
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	4628      	mov	r0, r5
 8004eca:	f000 fb9f 	bl	800560c <_sbrk_r>
 8004ece:	1c43      	adds	r3, r0, #1
 8004ed0:	d103      	bne.n	8004eda <sbrk_aligned+0x26>
 8004ed2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	bd70      	pop	{r4, r5, r6, pc}
 8004eda:	1cc4      	adds	r4, r0, #3
 8004edc:	f024 0403 	bic.w	r4, r4, #3
 8004ee0:	42a0      	cmp	r0, r4
 8004ee2:	d0f8      	beq.n	8004ed6 <sbrk_aligned+0x22>
 8004ee4:	1a21      	subs	r1, r4, r0
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f000 fb90 	bl	800560c <_sbrk_r>
 8004eec:	3001      	adds	r0, #1
 8004eee:	d1f2      	bne.n	8004ed6 <sbrk_aligned+0x22>
 8004ef0:	e7ef      	b.n	8004ed2 <sbrk_aligned+0x1e>
 8004ef2:	bf00      	nop
 8004ef4:	200002f4 	.word	0x200002f4

08004ef8 <_malloc_r>:
 8004ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004efc:	1ccd      	adds	r5, r1, #3
 8004efe:	f025 0503 	bic.w	r5, r5, #3
 8004f02:	3508      	adds	r5, #8
 8004f04:	2d0c      	cmp	r5, #12
 8004f06:	bf38      	it	cc
 8004f08:	250c      	movcc	r5, #12
 8004f0a:	2d00      	cmp	r5, #0
 8004f0c:	4606      	mov	r6, r0
 8004f0e:	db01      	blt.n	8004f14 <_malloc_r+0x1c>
 8004f10:	42a9      	cmp	r1, r5
 8004f12:	d904      	bls.n	8004f1e <_malloc_r+0x26>
 8004f14:	230c      	movs	r3, #12
 8004f16:	6033      	str	r3, [r6, #0]
 8004f18:	2000      	movs	r0, #0
 8004f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ff4 <_malloc_r+0xfc>
 8004f22:	f000 f869 	bl	8004ff8 <__malloc_lock>
 8004f26:	f8d8 3000 	ldr.w	r3, [r8]
 8004f2a:	461c      	mov	r4, r3
 8004f2c:	bb44      	cbnz	r4, 8004f80 <_malloc_r+0x88>
 8004f2e:	4629      	mov	r1, r5
 8004f30:	4630      	mov	r0, r6
 8004f32:	f7ff ffbf 	bl	8004eb4 <sbrk_aligned>
 8004f36:	1c43      	adds	r3, r0, #1
 8004f38:	4604      	mov	r4, r0
 8004f3a:	d158      	bne.n	8004fee <_malloc_r+0xf6>
 8004f3c:	f8d8 4000 	ldr.w	r4, [r8]
 8004f40:	4627      	mov	r7, r4
 8004f42:	2f00      	cmp	r7, #0
 8004f44:	d143      	bne.n	8004fce <_malloc_r+0xd6>
 8004f46:	2c00      	cmp	r4, #0
 8004f48:	d04b      	beq.n	8004fe2 <_malloc_r+0xea>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	4639      	mov	r1, r7
 8004f4e:	4630      	mov	r0, r6
 8004f50:	eb04 0903 	add.w	r9, r4, r3
 8004f54:	f000 fb5a 	bl	800560c <_sbrk_r>
 8004f58:	4581      	cmp	r9, r0
 8004f5a:	d142      	bne.n	8004fe2 <_malloc_r+0xea>
 8004f5c:	6821      	ldr	r1, [r4, #0]
 8004f5e:	1a6d      	subs	r5, r5, r1
 8004f60:	4629      	mov	r1, r5
 8004f62:	4630      	mov	r0, r6
 8004f64:	f7ff ffa6 	bl	8004eb4 <sbrk_aligned>
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d03a      	beq.n	8004fe2 <_malloc_r+0xea>
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	442b      	add	r3, r5
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	f8d8 3000 	ldr.w	r3, [r8]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	bb62      	cbnz	r2, 8004fd4 <_malloc_r+0xdc>
 8004f7a:	f8c8 7000 	str.w	r7, [r8]
 8004f7e:	e00f      	b.n	8004fa0 <_malloc_r+0xa8>
 8004f80:	6822      	ldr	r2, [r4, #0]
 8004f82:	1b52      	subs	r2, r2, r5
 8004f84:	d420      	bmi.n	8004fc8 <_malloc_r+0xd0>
 8004f86:	2a0b      	cmp	r2, #11
 8004f88:	d917      	bls.n	8004fba <_malloc_r+0xc2>
 8004f8a:	1961      	adds	r1, r4, r5
 8004f8c:	42a3      	cmp	r3, r4
 8004f8e:	6025      	str	r5, [r4, #0]
 8004f90:	bf18      	it	ne
 8004f92:	6059      	strne	r1, [r3, #4]
 8004f94:	6863      	ldr	r3, [r4, #4]
 8004f96:	bf08      	it	eq
 8004f98:	f8c8 1000 	streq.w	r1, [r8]
 8004f9c:	5162      	str	r2, [r4, r5]
 8004f9e:	604b      	str	r3, [r1, #4]
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	f000 f82f 	bl	8005004 <__malloc_unlock>
 8004fa6:	f104 000b 	add.w	r0, r4, #11
 8004faa:	1d23      	adds	r3, r4, #4
 8004fac:	f020 0007 	bic.w	r0, r0, #7
 8004fb0:	1ac2      	subs	r2, r0, r3
 8004fb2:	bf1c      	itt	ne
 8004fb4:	1a1b      	subne	r3, r3, r0
 8004fb6:	50a3      	strne	r3, [r4, r2]
 8004fb8:	e7af      	b.n	8004f1a <_malloc_r+0x22>
 8004fba:	6862      	ldr	r2, [r4, #4]
 8004fbc:	42a3      	cmp	r3, r4
 8004fbe:	bf0c      	ite	eq
 8004fc0:	f8c8 2000 	streq.w	r2, [r8]
 8004fc4:	605a      	strne	r2, [r3, #4]
 8004fc6:	e7eb      	b.n	8004fa0 <_malloc_r+0xa8>
 8004fc8:	4623      	mov	r3, r4
 8004fca:	6864      	ldr	r4, [r4, #4]
 8004fcc:	e7ae      	b.n	8004f2c <_malloc_r+0x34>
 8004fce:	463c      	mov	r4, r7
 8004fd0:	687f      	ldr	r7, [r7, #4]
 8004fd2:	e7b6      	b.n	8004f42 <_malloc_r+0x4a>
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	42a3      	cmp	r3, r4
 8004fda:	d1fb      	bne.n	8004fd4 <_malloc_r+0xdc>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	6053      	str	r3, [r2, #4]
 8004fe0:	e7de      	b.n	8004fa0 <_malloc_r+0xa8>
 8004fe2:	230c      	movs	r3, #12
 8004fe4:	6033      	str	r3, [r6, #0]
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	f000 f80c 	bl	8005004 <__malloc_unlock>
 8004fec:	e794      	b.n	8004f18 <_malloc_r+0x20>
 8004fee:	6005      	str	r5, [r0, #0]
 8004ff0:	e7d6      	b.n	8004fa0 <_malloc_r+0xa8>
 8004ff2:	bf00      	nop
 8004ff4:	200002f8 	.word	0x200002f8

08004ff8 <__malloc_lock>:
 8004ff8:	4801      	ldr	r0, [pc, #4]	@ (8005000 <__malloc_lock+0x8>)
 8004ffa:	f7ff bf0f 	b.w	8004e1c <__retarget_lock_acquire_recursive>
 8004ffe:	bf00      	nop
 8005000:	200002f0 	.word	0x200002f0

08005004 <__malloc_unlock>:
 8005004:	4801      	ldr	r0, [pc, #4]	@ (800500c <__malloc_unlock+0x8>)
 8005006:	f7ff bf0a 	b.w	8004e1e <__retarget_lock_release_recursive>
 800500a:	bf00      	nop
 800500c:	200002f0 	.word	0x200002f0

08005010 <__ssputs_r>:
 8005010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005014:	688e      	ldr	r6, [r1, #8]
 8005016:	461f      	mov	r7, r3
 8005018:	42be      	cmp	r6, r7
 800501a:	680b      	ldr	r3, [r1, #0]
 800501c:	4682      	mov	sl, r0
 800501e:	460c      	mov	r4, r1
 8005020:	4690      	mov	r8, r2
 8005022:	d82d      	bhi.n	8005080 <__ssputs_r+0x70>
 8005024:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005028:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800502c:	d026      	beq.n	800507c <__ssputs_r+0x6c>
 800502e:	6965      	ldr	r5, [r4, #20]
 8005030:	6909      	ldr	r1, [r1, #16]
 8005032:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005036:	eba3 0901 	sub.w	r9, r3, r1
 800503a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800503e:	1c7b      	adds	r3, r7, #1
 8005040:	444b      	add	r3, r9
 8005042:	106d      	asrs	r5, r5, #1
 8005044:	429d      	cmp	r5, r3
 8005046:	bf38      	it	cc
 8005048:	461d      	movcc	r5, r3
 800504a:	0553      	lsls	r3, r2, #21
 800504c:	d527      	bpl.n	800509e <__ssputs_r+0x8e>
 800504e:	4629      	mov	r1, r5
 8005050:	f7ff ff52 	bl	8004ef8 <_malloc_r>
 8005054:	4606      	mov	r6, r0
 8005056:	b360      	cbz	r0, 80050b2 <__ssputs_r+0xa2>
 8005058:	6921      	ldr	r1, [r4, #16]
 800505a:	464a      	mov	r2, r9
 800505c:	f000 fae6 	bl	800562c <memcpy>
 8005060:	89a3      	ldrh	r3, [r4, #12]
 8005062:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800506a:	81a3      	strh	r3, [r4, #12]
 800506c:	6126      	str	r6, [r4, #16]
 800506e:	6165      	str	r5, [r4, #20]
 8005070:	444e      	add	r6, r9
 8005072:	eba5 0509 	sub.w	r5, r5, r9
 8005076:	6026      	str	r6, [r4, #0]
 8005078:	60a5      	str	r5, [r4, #8]
 800507a:	463e      	mov	r6, r7
 800507c:	42be      	cmp	r6, r7
 800507e:	d900      	bls.n	8005082 <__ssputs_r+0x72>
 8005080:	463e      	mov	r6, r7
 8005082:	6820      	ldr	r0, [r4, #0]
 8005084:	4632      	mov	r2, r6
 8005086:	4641      	mov	r1, r8
 8005088:	f000 faa6 	bl	80055d8 <memmove>
 800508c:	68a3      	ldr	r3, [r4, #8]
 800508e:	1b9b      	subs	r3, r3, r6
 8005090:	60a3      	str	r3, [r4, #8]
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	4433      	add	r3, r6
 8005096:	6023      	str	r3, [r4, #0]
 8005098:	2000      	movs	r0, #0
 800509a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800509e:	462a      	mov	r2, r5
 80050a0:	f000 fad2 	bl	8005648 <_realloc_r>
 80050a4:	4606      	mov	r6, r0
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d1e0      	bne.n	800506c <__ssputs_r+0x5c>
 80050aa:	6921      	ldr	r1, [r4, #16]
 80050ac:	4650      	mov	r0, sl
 80050ae:	f7ff feb7 	bl	8004e20 <_free_r>
 80050b2:	230c      	movs	r3, #12
 80050b4:	f8ca 3000 	str.w	r3, [sl]
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050be:	81a3      	strh	r3, [r4, #12]
 80050c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050c4:	e7e9      	b.n	800509a <__ssputs_r+0x8a>
	...

080050c8 <_svfiprintf_r>:
 80050c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050cc:	4698      	mov	r8, r3
 80050ce:	898b      	ldrh	r3, [r1, #12]
 80050d0:	061b      	lsls	r3, r3, #24
 80050d2:	b09d      	sub	sp, #116	@ 0x74
 80050d4:	4607      	mov	r7, r0
 80050d6:	460d      	mov	r5, r1
 80050d8:	4614      	mov	r4, r2
 80050da:	d510      	bpl.n	80050fe <_svfiprintf_r+0x36>
 80050dc:	690b      	ldr	r3, [r1, #16]
 80050de:	b973      	cbnz	r3, 80050fe <_svfiprintf_r+0x36>
 80050e0:	2140      	movs	r1, #64	@ 0x40
 80050e2:	f7ff ff09 	bl	8004ef8 <_malloc_r>
 80050e6:	6028      	str	r0, [r5, #0]
 80050e8:	6128      	str	r0, [r5, #16]
 80050ea:	b930      	cbnz	r0, 80050fa <_svfiprintf_r+0x32>
 80050ec:	230c      	movs	r3, #12
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050f4:	b01d      	add	sp, #116	@ 0x74
 80050f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050fa:	2340      	movs	r3, #64	@ 0x40
 80050fc:	616b      	str	r3, [r5, #20]
 80050fe:	2300      	movs	r3, #0
 8005100:	9309      	str	r3, [sp, #36]	@ 0x24
 8005102:	2320      	movs	r3, #32
 8005104:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005108:	f8cd 800c 	str.w	r8, [sp, #12]
 800510c:	2330      	movs	r3, #48	@ 0x30
 800510e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80052ac <_svfiprintf_r+0x1e4>
 8005112:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005116:	f04f 0901 	mov.w	r9, #1
 800511a:	4623      	mov	r3, r4
 800511c:	469a      	mov	sl, r3
 800511e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005122:	b10a      	cbz	r2, 8005128 <_svfiprintf_r+0x60>
 8005124:	2a25      	cmp	r2, #37	@ 0x25
 8005126:	d1f9      	bne.n	800511c <_svfiprintf_r+0x54>
 8005128:	ebba 0b04 	subs.w	fp, sl, r4
 800512c:	d00b      	beq.n	8005146 <_svfiprintf_r+0x7e>
 800512e:	465b      	mov	r3, fp
 8005130:	4622      	mov	r2, r4
 8005132:	4629      	mov	r1, r5
 8005134:	4638      	mov	r0, r7
 8005136:	f7ff ff6b 	bl	8005010 <__ssputs_r>
 800513a:	3001      	adds	r0, #1
 800513c:	f000 80a7 	beq.w	800528e <_svfiprintf_r+0x1c6>
 8005140:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005142:	445a      	add	r2, fp
 8005144:	9209      	str	r2, [sp, #36]	@ 0x24
 8005146:	f89a 3000 	ldrb.w	r3, [sl]
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 809f 	beq.w	800528e <_svfiprintf_r+0x1c6>
 8005150:	2300      	movs	r3, #0
 8005152:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800515a:	f10a 0a01 	add.w	sl, sl, #1
 800515e:	9304      	str	r3, [sp, #16]
 8005160:	9307      	str	r3, [sp, #28]
 8005162:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005166:	931a      	str	r3, [sp, #104]	@ 0x68
 8005168:	4654      	mov	r4, sl
 800516a:	2205      	movs	r2, #5
 800516c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005170:	484e      	ldr	r0, [pc, #312]	@ (80052ac <_svfiprintf_r+0x1e4>)
 8005172:	f7fb f835 	bl	80001e0 <memchr>
 8005176:	9a04      	ldr	r2, [sp, #16]
 8005178:	b9d8      	cbnz	r0, 80051b2 <_svfiprintf_r+0xea>
 800517a:	06d0      	lsls	r0, r2, #27
 800517c:	bf44      	itt	mi
 800517e:	2320      	movmi	r3, #32
 8005180:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005184:	0711      	lsls	r1, r2, #28
 8005186:	bf44      	itt	mi
 8005188:	232b      	movmi	r3, #43	@ 0x2b
 800518a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800518e:	f89a 3000 	ldrb.w	r3, [sl]
 8005192:	2b2a      	cmp	r3, #42	@ 0x2a
 8005194:	d015      	beq.n	80051c2 <_svfiprintf_r+0xfa>
 8005196:	9a07      	ldr	r2, [sp, #28]
 8005198:	4654      	mov	r4, sl
 800519a:	2000      	movs	r0, #0
 800519c:	f04f 0c0a 	mov.w	ip, #10
 80051a0:	4621      	mov	r1, r4
 80051a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051a6:	3b30      	subs	r3, #48	@ 0x30
 80051a8:	2b09      	cmp	r3, #9
 80051aa:	d94b      	bls.n	8005244 <_svfiprintf_r+0x17c>
 80051ac:	b1b0      	cbz	r0, 80051dc <_svfiprintf_r+0x114>
 80051ae:	9207      	str	r2, [sp, #28]
 80051b0:	e014      	b.n	80051dc <_svfiprintf_r+0x114>
 80051b2:	eba0 0308 	sub.w	r3, r0, r8
 80051b6:	fa09 f303 	lsl.w	r3, r9, r3
 80051ba:	4313      	orrs	r3, r2
 80051bc:	9304      	str	r3, [sp, #16]
 80051be:	46a2      	mov	sl, r4
 80051c0:	e7d2      	b.n	8005168 <_svfiprintf_r+0xa0>
 80051c2:	9b03      	ldr	r3, [sp, #12]
 80051c4:	1d19      	adds	r1, r3, #4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	9103      	str	r1, [sp, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	bfbb      	ittet	lt
 80051ce:	425b      	neglt	r3, r3
 80051d0:	f042 0202 	orrlt.w	r2, r2, #2
 80051d4:	9307      	strge	r3, [sp, #28]
 80051d6:	9307      	strlt	r3, [sp, #28]
 80051d8:	bfb8      	it	lt
 80051da:	9204      	strlt	r2, [sp, #16]
 80051dc:	7823      	ldrb	r3, [r4, #0]
 80051de:	2b2e      	cmp	r3, #46	@ 0x2e
 80051e0:	d10a      	bne.n	80051f8 <_svfiprintf_r+0x130>
 80051e2:	7863      	ldrb	r3, [r4, #1]
 80051e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80051e6:	d132      	bne.n	800524e <_svfiprintf_r+0x186>
 80051e8:	9b03      	ldr	r3, [sp, #12]
 80051ea:	1d1a      	adds	r2, r3, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	9203      	str	r2, [sp, #12]
 80051f0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80051f4:	3402      	adds	r4, #2
 80051f6:	9305      	str	r3, [sp, #20]
 80051f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80052b0 <_svfiprintf_r+0x1e8>
 80051fc:	7821      	ldrb	r1, [r4, #0]
 80051fe:	2203      	movs	r2, #3
 8005200:	4650      	mov	r0, sl
 8005202:	f7fa ffed 	bl	80001e0 <memchr>
 8005206:	b138      	cbz	r0, 8005218 <_svfiprintf_r+0x150>
 8005208:	9b04      	ldr	r3, [sp, #16]
 800520a:	eba0 000a 	sub.w	r0, r0, sl
 800520e:	2240      	movs	r2, #64	@ 0x40
 8005210:	4082      	lsls	r2, r0
 8005212:	4313      	orrs	r3, r2
 8005214:	3401      	adds	r4, #1
 8005216:	9304      	str	r3, [sp, #16]
 8005218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800521c:	4825      	ldr	r0, [pc, #148]	@ (80052b4 <_svfiprintf_r+0x1ec>)
 800521e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005222:	2206      	movs	r2, #6
 8005224:	f7fa ffdc 	bl	80001e0 <memchr>
 8005228:	2800      	cmp	r0, #0
 800522a:	d036      	beq.n	800529a <_svfiprintf_r+0x1d2>
 800522c:	4b22      	ldr	r3, [pc, #136]	@ (80052b8 <_svfiprintf_r+0x1f0>)
 800522e:	bb1b      	cbnz	r3, 8005278 <_svfiprintf_r+0x1b0>
 8005230:	9b03      	ldr	r3, [sp, #12]
 8005232:	3307      	adds	r3, #7
 8005234:	f023 0307 	bic.w	r3, r3, #7
 8005238:	3308      	adds	r3, #8
 800523a:	9303      	str	r3, [sp, #12]
 800523c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800523e:	4433      	add	r3, r6
 8005240:	9309      	str	r3, [sp, #36]	@ 0x24
 8005242:	e76a      	b.n	800511a <_svfiprintf_r+0x52>
 8005244:	fb0c 3202 	mla	r2, ip, r2, r3
 8005248:	460c      	mov	r4, r1
 800524a:	2001      	movs	r0, #1
 800524c:	e7a8      	b.n	80051a0 <_svfiprintf_r+0xd8>
 800524e:	2300      	movs	r3, #0
 8005250:	3401      	adds	r4, #1
 8005252:	9305      	str	r3, [sp, #20]
 8005254:	4619      	mov	r1, r3
 8005256:	f04f 0c0a 	mov.w	ip, #10
 800525a:	4620      	mov	r0, r4
 800525c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005260:	3a30      	subs	r2, #48	@ 0x30
 8005262:	2a09      	cmp	r2, #9
 8005264:	d903      	bls.n	800526e <_svfiprintf_r+0x1a6>
 8005266:	2b00      	cmp	r3, #0
 8005268:	d0c6      	beq.n	80051f8 <_svfiprintf_r+0x130>
 800526a:	9105      	str	r1, [sp, #20]
 800526c:	e7c4      	b.n	80051f8 <_svfiprintf_r+0x130>
 800526e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005272:	4604      	mov	r4, r0
 8005274:	2301      	movs	r3, #1
 8005276:	e7f0      	b.n	800525a <_svfiprintf_r+0x192>
 8005278:	ab03      	add	r3, sp, #12
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	462a      	mov	r2, r5
 800527e:	4b0f      	ldr	r3, [pc, #60]	@ (80052bc <_svfiprintf_r+0x1f4>)
 8005280:	a904      	add	r1, sp, #16
 8005282:	4638      	mov	r0, r7
 8005284:	f3af 8000 	nop.w
 8005288:	1c42      	adds	r2, r0, #1
 800528a:	4606      	mov	r6, r0
 800528c:	d1d6      	bne.n	800523c <_svfiprintf_r+0x174>
 800528e:	89ab      	ldrh	r3, [r5, #12]
 8005290:	065b      	lsls	r3, r3, #25
 8005292:	f53f af2d 	bmi.w	80050f0 <_svfiprintf_r+0x28>
 8005296:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005298:	e72c      	b.n	80050f4 <_svfiprintf_r+0x2c>
 800529a:	ab03      	add	r3, sp, #12
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	462a      	mov	r2, r5
 80052a0:	4b06      	ldr	r3, [pc, #24]	@ (80052bc <_svfiprintf_r+0x1f4>)
 80052a2:	a904      	add	r1, sp, #16
 80052a4:	4638      	mov	r0, r7
 80052a6:	f000 f879 	bl	800539c <_printf_i>
 80052aa:	e7ed      	b.n	8005288 <_svfiprintf_r+0x1c0>
 80052ac:	08005710 	.word	0x08005710
 80052b0:	08005716 	.word	0x08005716
 80052b4:	0800571a 	.word	0x0800571a
 80052b8:	00000000 	.word	0x00000000
 80052bc:	08005011 	.word	0x08005011

080052c0 <_printf_common>:
 80052c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052c4:	4616      	mov	r6, r2
 80052c6:	4698      	mov	r8, r3
 80052c8:	688a      	ldr	r2, [r1, #8]
 80052ca:	690b      	ldr	r3, [r1, #16]
 80052cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052d0:	4293      	cmp	r3, r2
 80052d2:	bfb8      	it	lt
 80052d4:	4613      	movlt	r3, r2
 80052d6:	6033      	str	r3, [r6, #0]
 80052d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052dc:	4607      	mov	r7, r0
 80052de:	460c      	mov	r4, r1
 80052e0:	b10a      	cbz	r2, 80052e6 <_printf_common+0x26>
 80052e2:	3301      	adds	r3, #1
 80052e4:	6033      	str	r3, [r6, #0]
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	0699      	lsls	r1, r3, #26
 80052ea:	bf42      	ittt	mi
 80052ec:	6833      	ldrmi	r3, [r6, #0]
 80052ee:	3302      	addmi	r3, #2
 80052f0:	6033      	strmi	r3, [r6, #0]
 80052f2:	6825      	ldr	r5, [r4, #0]
 80052f4:	f015 0506 	ands.w	r5, r5, #6
 80052f8:	d106      	bne.n	8005308 <_printf_common+0x48>
 80052fa:	f104 0a19 	add.w	sl, r4, #25
 80052fe:	68e3      	ldr	r3, [r4, #12]
 8005300:	6832      	ldr	r2, [r6, #0]
 8005302:	1a9b      	subs	r3, r3, r2
 8005304:	42ab      	cmp	r3, r5
 8005306:	dc26      	bgt.n	8005356 <_printf_common+0x96>
 8005308:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800530c:	6822      	ldr	r2, [r4, #0]
 800530e:	3b00      	subs	r3, #0
 8005310:	bf18      	it	ne
 8005312:	2301      	movne	r3, #1
 8005314:	0692      	lsls	r2, r2, #26
 8005316:	d42b      	bmi.n	8005370 <_printf_common+0xb0>
 8005318:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800531c:	4641      	mov	r1, r8
 800531e:	4638      	mov	r0, r7
 8005320:	47c8      	blx	r9
 8005322:	3001      	adds	r0, #1
 8005324:	d01e      	beq.n	8005364 <_printf_common+0xa4>
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	6922      	ldr	r2, [r4, #16]
 800532a:	f003 0306 	and.w	r3, r3, #6
 800532e:	2b04      	cmp	r3, #4
 8005330:	bf02      	ittt	eq
 8005332:	68e5      	ldreq	r5, [r4, #12]
 8005334:	6833      	ldreq	r3, [r6, #0]
 8005336:	1aed      	subeq	r5, r5, r3
 8005338:	68a3      	ldr	r3, [r4, #8]
 800533a:	bf0c      	ite	eq
 800533c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005340:	2500      	movne	r5, #0
 8005342:	4293      	cmp	r3, r2
 8005344:	bfc4      	itt	gt
 8005346:	1a9b      	subgt	r3, r3, r2
 8005348:	18ed      	addgt	r5, r5, r3
 800534a:	2600      	movs	r6, #0
 800534c:	341a      	adds	r4, #26
 800534e:	42b5      	cmp	r5, r6
 8005350:	d11a      	bne.n	8005388 <_printf_common+0xc8>
 8005352:	2000      	movs	r0, #0
 8005354:	e008      	b.n	8005368 <_printf_common+0xa8>
 8005356:	2301      	movs	r3, #1
 8005358:	4652      	mov	r2, sl
 800535a:	4641      	mov	r1, r8
 800535c:	4638      	mov	r0, r7
 800535e:	47c8      	blx	r9
 8005360:	3001      	adds	r0, #1
 8005362:	d103      	bne.n	800536c <_printf_common+0xac>
 8005364:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800536c:	3501      	adds	r5, #1
 800536e:	e7c6      	b.n	80052fe <_printf_common+0x3e>
 8005370:	18e1      	adds	r1, r4, r3
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	2030      	movs	r0, #48	@ 0x30
 8005376:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800537a:	4422      	add	r2, r4
 800537c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005380:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005384:	3302      	adds	r3, #2
 8005386:	e7c7      	b.n	8005318 <_printf_common+0x58>
 8005388:	2301      	movs	r3, #1
 800538a:	4622      	mov	r2, r4
 800538c:	4641      	mov	r1, r8
 800538e:	4638      	mov	r0, r7
 8005390:	47c8      	blx	r9
 8005392:	3001      	adds	r0, #1
 8005394:	d0e6      	beq.n	8005364 <_printf_common+0xa4>
 8005396:	3601      	adds	r6, #1
 8005398:	e7d9      	b.n	800534e <_printf_common+0x8e>
	...

0800539c <_printf_i>:
 800539c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053a0:	7e0f      	ldrb	r7, [r1, #24]
 80053a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053a4:	2f78      	cmp	r7, #120	@ 0x78
 80053a6:	4691      	mov	r9, r2
 80053a8:	4680      	mov	r8, r0
 80053aa:	460c      	mov	r4, r1
 80053ac:	469a      	mov	sl, r3
 80053ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053b2:	d807      	bhi.n	80053c4 <_printf_i+0x28>
 80053b4:	2f62      	cmp	r7, #98	@ 0x62
 80053b6:	d80a      	bhi.n	80053ce <_printf_i+0x32>
 80053b8:	2f00      	cmp	r7, #0
 80053ba:	f000 80d1 	beq.w	8005560 <_printf_i+0x1c4>
 80053be:	2f58      	cmp	r7, #88	@ 0x58
 80053c0:	f000 80b8 	beq.w	8005534 <_printf_i+0x198>
 80053c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80053cc:	e03a      	b.n	8005444 <_printf_i+0xa8>
 80053ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053d2:	2b15      	cmp	r3, #21
 80053d4:	d8f6      	bhi.n	80053c4 <_printf_i+0x28>
 80053d6:	a101      	add	r1, pc, #4	@ (adr r1, 80053dc <_printf_i+0x40>)
 80053d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053dc:	08005435 	.word	0x08005435
 80053e0:	08005449 	.word	0x08005449
 80053e4:	080053c5 	.word	0x080053c5
 80053e8:	080053c5 	.word	0x080053c5
 80053ec:	080053c5 	.word	0x080053c5
 80053f0:	080053c5 	.word	0x080053c5
 80053f4:	08005449 	.word	0x08005449
 80053f8:	080053c5 	.word	0x080053c5
 80053fc:	080053c5 	.word	0x080053c5
 8005400:	080053c5 	.word	0x080053c5
 8005404:	080053c5 	.word	0x080053c5
 8005408:	08005547 	.word	0x08005547
 800540c:	08005473 	.word	0x08005473
 8005410:	08005501 	.word	0x08005501
 8005414:	080053c5 	.word	0x080053c5
 8005418:	080053c5 	.word	0x080053c5
 800541c:	08005569 	.word	0x08005569
 8005420:	080053c5 	.word	0x080053c5
 8005424:	08005473 	.word	0x08005473
 8005428:	080053c5 	.word	0x080053c5
 800542c:	080053c5 	.word	0x080053c5
 8005430:	08005509 	.word	0x08005509
 8005434:	6833      	ldr	r3, [r6, #0]
 8005436:	1d1a      	adds	r2, r3, #4
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6032      	str	r2, [r6, #0]
 800543c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005440:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005444:	2301      	movs	r3, #1
 8005446:	e09c      	b.n	8005582 <_printf_i+0x1e6>
 8005448:	6833      	ldr	r3, [r6, #0]
 800544a:	6820      	ldr	r0, [r4, #0]
 800544c:	1d19      	adds	r1, r3, #4
 800544e:	6031      	str	r1, [r6, #0]
 8005450:	0606      	lsls	r6, r0, #24
 8005452:	d501      	bpl.n	8005458 <_printf_i+0xbc>
 8005454:	681d      	ldr	r5, [r3, #0]
 8005456:	e003      	b.n	8005460 <_printf_i+0xc4>
 8005458:	0645      	lsls	r5, r0, #25
 800545a:	d5fb      	bpl.n	8005454 <_printf_i+0xb8>
 800545c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005460:	2d00      	cmp	r5, #0
 8005462:	da03      	bge.n	800546c <_printf_i+0xd0>
 8005464:	232d      	movs	r3, #45	@ 0x2d
 8005466:	426d      	negs	r5, r5
 8005468:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800546c:	4858      	ldr	r0, [pc, #352]	@ (80055d0 <_printf_i+0x234>)
 800546e:	230a      	movs	r3, #10
 8005470:	e011      	b.n	8005496 <_printf_i+0xfa>
 8005472:	6821      	ldr	r1, [r4, #0]
 8005474:	6833      	ldr	r3, [r6, #0]
 8005476:	0608      	lsls	r0, r1, #24
 8005478:	f853 5b04 	ldr.w	r5, [r3], #4
 800547c:	d402      	bmi.n	8005484 <_printf_i+0xe8>
 800547e:	0649      	lsls	r1, r1, #25
 8005480:	bf48      	it	mi
 8005482:	b2ad      	uxthmi	r5, r5
 8005484:	2f6f      	cmp	r7, #111	@ 0x6f
 8005486:	4852      	ldr	r0, [pc, #328]	@ (80055d0 <_printf_i+0x234>)
 8005488:	6033      	str	r3, [r6, #0]
 800548a:	bf14      	ite	ne
 800548c:	230a      	movne	r3, #10
 800548e:	2308      	moveq	r3, #8
 8005490:	2100      	movs	r1, #0
 8005492:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005496:	6866      	ldr	r6, [r4, #4]
 8005498:	60a6      	str	r6, [r4, #8]
 800549a:	2e00      	cmp	r6, #0
 800549c:	db05      	blt.n	80054aa <_printf_i+0x10e>
 800549e:	6821      	ldr	r1, [r4, #0]
 80054a0:	432e      	orrs	r6, r5
 80054a2:	f021 0104 	bic.w	r1, r1, #4
 80054a6:	6021      	str	r1, [r4, #0]
 80054a8:	d04b      	beq.n	8005542 <_printf_i+0x1a6>
 80054aa:	4616      	mov	r6, r2
 80054ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80054b0:	fb03 5711 	mls	r7, r3, r1, r5
 80054b4:	5dc7      	ldrb	r7, [r0, r7]
 80054b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054ba:	462f      	mov	r7, r5
 80054bc:	42bb      	cmp	r3, r7
 80054be:	460d      	mov	r5, r1
 80054c0:	d9f4      	bls.n	80054ac <_printf_i+0x110>
 80054c2:	2b08      	cmp	r3, #8
 80054c4:	d10b      	bne.n	80054de <_printf_i+0x142>
 80054c6:	6823      	ldr	r3, [r4, #0]
 80054c8:	07df      	lsls	r7, r3, #31
 80054ca:	d508      	bpl.n	80054de <_printf_i+0x142>
 80054cc:	6923      	ldr	r3, [r4, #16]
 80054ce:	6861      	ldr	r1, [r4, #4]
 80054d0:	4299      	cmp	r1, r3
 80054d2:	bfde      	ittt	le
 80054d4:	2330      	movle	r3, #48	@ 0x30
 80054d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054da:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80054de:	1b92      	subs	r2, r2, r6
 80054e0:	6122      	str	r2, [r4, #16]
 80054e2:	f8cd a000 	str.w	sl, [sp]
 80054e6:	464b      	mov	r3, r9
 80054e8:	aa03      	add	r2, sp, #12
 80054ea:	4621      	mov	r1, r4
 80054ec:	4640      	mov	r0, r8
 80054ee:	f7ff fee7 	bl	80052c0 <_printf_common>
 80054f2:	3001      	adds	r0, #1
 80054f4:	d14a      	bne.n	800558c <_printf_i+0x1f0>
 80054f6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054fa:	b004      	add	sp, #16
 80054fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	f043 0320 	orr.w	r3, r3, #32
 8005506:	6023      	str	r3, [r4, #0]
 8005508:	4832      	ldr	r0, [pc, #200]	@ (80055d4 <_printf_i+0x238>)
 800550a:	2778      	movs	r7, #120	@ 0x78
 800550c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	6831      	ldr	r1, [r6, #0]
 8005514:	061f      	lsls	r7, r3, #24
 8005516:	f851 5b04 	ldr.w	r5, [r1], #4
 800551a:	d402      	bmi.n	8005522 <_printf_i+0x186>
 800551c:	065f      	lsls	r7, r3, #25
 800551e:	bf48      	it	mi
 8005520:	b2ad      	uxthmi	r5, r5
 8005522:	6031      	str	r1, [r6, #0]
 8005524:	07d9      	lsls	r1, r3, #31
 8005526:	bf44      	itt	mi
 8005528:	f043 0320 	orrmi.w	r3, r3, #32
 800552c:	6023      	strmi	r3, [r4, #0]
 800552e:	b11d      	cbz	r5, 8005538 <_printf_i+0x19c>
 8005530:	2310      	movs	r3, #16
 8005532:	e7ad      	b.n	8005490 <_printf_i+0xf4>
 8005534:	4826      	ldr	r0, [pc, #152]	@ (80055d0 <_printf_i+0x234>)
 8005536:	e7e9      	b.n	800550c <_printf_i+0x170>
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	f023 0320 	bic.w	r3, r3, #32
 800553e:	6023      	str	r3, [r4, #0]
 8005540:	e7f6      	b.n	8005530 <_printf_i+0x194>
 8005542:	4616      	mov	r6, r2
 8005544:	e7bd      	b.n	80054c2 <_printf_i+0x126>
 8005546:	6833      	ldr	r3, [r6, #0]
 8005548:	6825      	ldr	r5, [r4, #0]
 800554a:	6961      	ldr	r1, [r4, #20]
 800554c:	1d18      	adds	r0, r3, #4
 800554e:	6030      	str	r0, [r6, #0]
 8005550:	062e      	lsls	r6, r5, #24
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	d501      	bpl.n	800555a <_printf_i+0x1be>
 8005556:	6019      	str	r1, [r3, #0]
 8005558:	e002      	b.n	8005560 <_printf_i+0x1c4>
 800555a:	0668      	lsls	r0, r5, #25
 800555c:	d5fb      	bpl.n	8005556 <_printf_i+0x1ba>
 800555e:	8019      	strh	r1, [r3, #0]
 8005560:	2300      	movs	r3, #0
 8005562:	6123      	str	r3, [r4, #16]
 8005564:	4616      	mov	r6, r2
 8005566:	e7bc      	b.n	80054e2 <_printf_i+0x146>
 8005568:	6833      	ldr	r3, [r6, #0]
 800556a:	1d1a      	adds	r2, r3, #4
 800556c:	6032      	str	r2, [r6, #0]
 800556e:	681e      	ldr	r6, [r3, #0]
 8005570:	6862      	ldr	r2, [r4, #4]
 8005572:	2100      	movs	r1, #0
 8005574:	4630      	mov	r0, r6
 8005576:	f7fa fe33 	bl	80001e0 <memchr>
 800557a:	b108      	cbz	r0, 8005580 <_printf_i+0x1e4>
 800557c:	1b80      	subs	r0, r0, r6
 800557e:	6060      	str	r0, [r4, #4]
 8005580:	6863      	ldr	r3, [r4, #4]
 8005582:	6123      	str	r3, [r4, #16]
 8005584:	2300      	movs	r3, #0
 8005586:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800558a:	e7aa      	b.n	80054e2 <_printf_i+0x146>
 800558c:	6923      	ldr	r3, [r4, #16]
 800558e:	4632      	mov	r2, r6
 8005590:	4649      	mov	r1, r9
 8005592:	4640      	mov	r0, r8
 8005594:	47d0      	blx	sl
 8005596:	3001      	adds	r0, #1
 8005598:	d0ad      	beq.n	80054f6 <_printf_i+0x15a>
 800559a:	6823      	ldr	r3, [r4, #0]
 800559c:	079b      	lsls	r3, r3, #30
 800559e:	d413      	bmi.n	80055c8 <_printf_i+0x22c>
 80055a0:	68e0      	ldr	r0, [r4, #12]
 80055a2:	9b03      	ldr	r3, [sp, #12]
 80055a4:	4298      	cmp	r0, r3
 80055a6:	bfb8      	it	lt
 80055a8:	4618      	movlt	r0, r3
 80055aa:	e7a6      	b.n	80054fa <_printf_i+0x15e>
 80055ac:	2301      	movs	r3, #1
 80055ae:	4632      	mov	r2, r6
 80055b0:	4649      	mov	r1, r9
 80055b2:	4640      	mov	r0, r8
 80055b4:	47d0      	blx	sl
 80055b6:	3001      	adds	r0, #1
 80055b8:	d09d      	beq.n	80054f6 <_printf_i+0x15a>
 80055ba:	3501      	adds	r5, #1
 80055bc:	68e3      	ldr	r3, [r4, #12]
 80055be:	9903      	ldr	r1, [sp, #12]
 80055c0:	1a5b      	subs	r3, r3, r1
 80055c2:	42ab      	cmp	r3, r5
 80055c4:	dcf2      	bgt.n	80055ac <_printf_i+0x210>
 80055c6:	e7eb      	b.n	80055a0 <_printf_i+0x204>
 80055c8:	2500      	movs	r5, #0
 80055ca:	f104 0619 	add.w	r6, r4, #25
 80055ce:	e7f5      	b.n	80055bc <_printf_i+0x220>
 80055d0:	08005721 	.word	0x08005721
 80055d4:	08005732 	.word	0x08005732

080055d8 <memmove>:
 80055d8:	4288      	cmp	r0, r1
 80055da:	b510      	push	{r4, lr}
 80055dc:	eb01 0402 	add.w	r4, r1, r2
 80055e0:	d902      	bls.n	80055e8 <memmove+0x10>
 80055e2:	4284      	cmp	r4, r0
 80055e4:	4623      	mov	r3, r4
 80055e6:	d807      	bhi.n	80055f8 <memmove+0x20>
 80055e8:	1e43      	subs	r3, r0, #1
 80055ea:	42a1      	cmp	r1, r4
 80055ec:	d008      	beq.n	8005600 <memmove+0x28>
 80055ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055f6:	e7f8      	b.n	80055ea <memmove+0x12>
 80055f8:	4402      	add	r2, r0
 80055fa:	4601      	mov	r1, r0
 80055fc:	428a      	cmp	r2, r1
 80055fe:	d100      	bne.n	8005602 <memmove+0x2a>
 8005600:	bd10      	pop	{r4, pc}
 8005602:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005606:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800560a:	e7f7      	b.n	80055fc <memmove+0x24>

0800560c <_sbrk_r>:
 800560c:	b538      	push	{r3, r4, r5, lr}
 800560e:	4d06      	ldr	r5, [pc, #24]	@ (8005628 <_sbrk_r+0x1c>)
 8005610:	2300      	movs	r3, #0
 8005612:	4604      	mov	r4, r0
 8005614:	4608      	mov	r0, r1
 8005616:	602b      	str	r3, [r5, #0]
 8005618:	f7fb fffa 	bl	8001610 <_sbrk>
 800561c:	1c43      	adds	r3, r0, #1
 800561e:	d102      	bne.n	8005626 <_sbrk_r+0x1a>
 8005620:	682b      	ldr	r3, [r5, #0]
 8005622:	b103      	cbz	r3, 8005626 <_sbrk_r+0x1a>
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	bd38      	pop	{r3, r4, r5, pc}
 8005628:	200002ec 	.word	0x200002ec

0800562c <memcpy>:
 800562c:	440a      	add	r2, r1
 800562e:	4291      	cmp	r1, r2
 8005630:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005634:	d100      	bne.n	8005638 <memcpy+0xc>
 8005636:	4770      	bx	lr
 8005638:	b510      	push	{r4, lr}
 800563a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800563e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005642:	4291      	cmp	r1, r2
 8005644:	d1f9      	bne.n	800563a <memcpy+0xe>
 8005646:	bd10      	pop	{r4, pc}

08005648 <_realloc_r>:
 8005648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800564c:	4607      	mov	r7, r0
 800564e:	4614      	mov	r4, r2
 8005650:	460d      	mov	r5, r1
 8005652:	b921      	cbnz	r1, 800565e <_realloc_r+0x16>
 8005654:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005658:	4611      	mov	r1, r2
 800565a:	f7ff bc4d 	b.w	8004ef8 <_malloc_r>
 800565e:	b92a      	cbnz	r2, 800566c <_realloc_r+0x24>
 8005660:	f7ff fbde 	bl	8004e20 <_free_r>
 8005664:	4625      	mov	r5, r4
 8005666:	4628      	mov	r0, r5
 8005668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800566c:	f000 f81a 	bl	80056a4 <_malloc_usable_size_r>
 8005670:	4284      	cmp	r4, r0
 8005672:	4606      	mov	r6, r0
 8005674:	d802      	bhi.n	800567c <_realloc_r+0x34>
 8005676:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800567a:	d8f4      	bhi.n	8005666 <_realloc_r+0x1e>
 800567c:	4621      	mov	r1, r4
 800567e:	4638      	mov	r0, r7
 8005680:	f7ff fc3a 	bl	8004ef8 <_malloc_r>
 8005684:	4680      	mov	r8, r0
 8005686:	b908      	cbnz	r0, 800568c <_realloc_r+0x44>
 8005688:	4645      	mov	r5, r8
 800568a:	e7ec      	b.n	8005666 <_realloc_r+0x1e>
 800568c:	42b4      	cmp	r4, r6
 800568e:	4622      	mov	r2, r4
 8005690:	4629      	mov	r1, r5
 8005692:	bf28      	it	cs
 8005694:	4632      	movcs	r2, r6
 8005696:	f7ff ffc9 	bl	800562c <memcpy>
 800569a:	4629      	mov	r1, r5
 800569c:	4638      	mov	r0, r7
 800569e:	f7ff fbbf 	bl	8004e20 <_free_r>
 80056a2:	e7f1      	b.n	8005688 <_realloc_r+0x40>

080056a4 <_malloc_usable_size_r>:
 80056a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056a8:	1f18      	subs	r0, r3, #4
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	bfbc      	itt	lt
 80056ae:	580b      	ldrlt	r3, [r1, r0]
 80056b0:	18c0      	addlt	r0, r0, r3
 80056b2:	4770      	bx	lr

080056b4 <_init>:
 80056b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b6:	bf00      	nop
 80056b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ba:	bc08      	pop	{r3}
 80056bc:	469e      	mov	lr, r3
 80056be:	4770      	bx	lr

080056c0 <_fini>:
 80056c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056c2:	bf00      	nop
 80056c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056c6:	bc08      	pop	{r3}
 80056c8:	469e      	mov	lr, r3
 80056ca:	4770      	bx	lr
